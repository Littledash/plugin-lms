{"version":3,"sources":["../../src/students/studentsCollection.ts"],"sourcesContent":["import { CollectionConfig, Field } from 'payload'\nimport { FieldsOverride } from '../types.js'\nimport { mergeFields } from '../utilities/deepMerge.js'\n\n/**\n * Props interface for configuring the courses collection\n * @property studentsCollectionSlug - Slug for the students collection (default: 'users')\n * @property certificatesCollectionSlug - Slug for the certificates collection (default: 'certificates')\n * @property overrides - Optional configuration overrides for fields and collection settings\n */\ntype Props = {\n  /**\n   * Array of fields used for capturing the students data. Use this over overrides to customise the fields here as it's reused across the plugin.\n   */\n  studentsFields: Field[]\n  studentsCollectionSlug?: string\n  certificatesCollectionSlug?: string\n  overrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n}\n\n/**\n * Creates a courses collection configuration for Payload CMS\n * This collection manages educational courses with various access modes, pricing, and content organization\n *\n * @param props - Configuration properties for the courses collection\n * @returns CollectionConfig object for courses\n */\nexport const studentsCollection: (props?: Props) => CollectionConfig = (props) => {\n  const { overrides, studentsFields = [], studentsCollectionSlug = 'users' } = props || {}\n\n  const fieldsOverride = overrides?.fields\n\n  /**\n   * Default fields for the courses collection\n   * Includes course details, access control, pricing, relationships, and content organization\n   */\n  const defaultFields: Field[] = [...studentsFields]\n\n  // Apply field overrides if provided\n  let fields: Field[]\n  \n  if (fieldsOverride && typeof fieldsOverride === 'function') {\n    // Get the user's fields\n    const userFields = fieldsOverride({ defaultFields })\n    // Merge user fields with default fields, avoiding duplicates\n    fields = mergeFields(defaultFields, userFields)\n  } else {\n    fields = defaultFields\n  }\n\n  /**\n   * Base configuration for the courses collection\n   * Includes slug, access control, timestamps, and admin settings\n   */\n  const baseConfig: CollectionConfig = {\n    slug: studentsCollectionSlug,\n    timestamps: true,\n    ...overrides,\n    admin: {\n      ...overrides?.admin,\n    },\n    fields,\n  }\n\n  return { ...baseConfig }\n}\n"],"names":["mergeFields","studentsCollection","props","overrides","studentsFields","studentsCollectionSlug","fieldsOverride","fields","defaultFields","userFields","baseConfig","slug","timestamps","admin"],"mappings":"AAEA,SAASA,WAAW,QAAQ,4BAA2B;AAkBvD;;;;;;CAMC,GACD,OAAO,MAAMC,qBAA0D,CAACC;IACtE,MAAM,EAAEC,SAAS,EAAEC,iBAAiB,EAAE,EAAEC,yBAAyB,OAAO,EAAE,GAAGH,SAAS,CAAC;IAEvF,MAAMI,iBAAiBH,WAAWI;IAElC;;;GAGC,GACD,MAAMC,gBAAyB;WAAIJ;KAAe;IAElD,oCAAoC;IACpC,IAAIG;IAEJ,IAAID,kBAAkB,OAAOA,mBAAmB,YAAY;QAC1D,wBAAwB;QACxB,MAAMG,aAAaH,eAAe;YAAEE;QAAc;QAClD,6DAA6D;QAC7DD,SAASP,YAAYQ,eAAeC;IACtC,OAAO;QACLF,SAASC;IACX;IAEA;;;GAGC,GACD,MAAME,aAA+B;QACnCC,MAAMN;QACNO,YAAY;QACZ,GAAGT,SAAS;QACZU,OAAO;YACL,GAAGV,WAAWU,KAAK;QACrB;QACAN;IACF;IAEA,OAAO;QAAE,GAAGG,UAAU;IAAC;AACzB,EAAC"}