{"version":3,"sources":["../../src/courses/coursesCollection.ts"],"sourcesContent":["import { CollectionConfig, Field } from 'payload'\nimport { FieldsOverride } from '../types.js'\nimport type { CurrenciesConfig } from '../types.js'\nimport { pricesField } from '../fields/pricesField.js'\nimport { isAdminOrAuthor, isAdminOrAuthorFieldLevel } from '../access/isAdminOrAuthor.js'\nimport { isAdminOrAuthorOrStudentFieldLevel } from '../access/isAdminOrAuthorOrStudent.js'\nimport { isAdminOrAuthorOrEnrolledInCourseFieldLevel } from '../access/isAdminOrAuthorOrEnrolledInCourse.js'\nimport { isAdminOrPublished } from '../access/isAdminOrPublished.js'\n/**\n * Props interface for configuring the courses collection\n * @property categoriesCollectionSlug - Slug for the categories collection (default: 'categories')\n * @property certificatesCollectionSlug - Slug for the certificates collection (default: 'certificates')\n * @property currenciesConfig - Configuration for supported currencies\n * @property lessonsCollectionSlug - Slug for the lessons collection (default: 'lessons')\n * @property mediaCollectionSlug - Slug for the media collection (default: 'media')\n * @property studentsCollectionSlug - Slug for the students collection (default: 'users')\n * @property tagsCollectionSlug - Slug for the tags collection (default: 'tags')\n * @property overrides - Optional configuration overrides for fields and collection settings\n */\ntype Props = {\n  categoriesCollectionSlug?: string\n  certificatesCollectionSlug?: string\n  currenciesConfig?: CurrenciesConfig\n  lessonsCollectionSlug?: string\n  mediaCollectionSlug?: string\n  studentsCollectionSlug?: string\n  tagsCollectionSlug?: string\n  overrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n}\n\n/**\n * Creates a courses collection configuration for Payload CMS\n * This collection manages educational courses with various access modes, pricing, and content organization\n *\n * @param props - Configuration properties for the courses collection\n * @returns CollectionConfig object for courses\n */\nexport const coursesCollection: (props?: Props) => CollectionConfig<'courses'> = (props) => {\n  const {\n    overrides,\n    mediaCollectionSlug = 'media',\n    lessonsCollectionSlug = 'lessons',\n    categoriesCollectionSlug = 'categories',\n    tagsCollectionSlug = 'tags',\n    currenciesConfig,\n    studentsCollectionSlug = 'users',\n    certificatesCollectionSlug = 'certificates',\n  } = props || {}\n  const fieldsOverride = overrides?.fields\n\n  /**\n   * Default fields for the courses collection\n   * Includes course details, access control, pricing, relationships, and content organization\n   */\n  const defaultFields: Field[] = [\n    {\n      name: 'title',\n      type: 'text',\n      required: true,\n      admin: {\n        description: 'The title of the course',\n      },\n    },\n    {\n      name: 'excerpt',\n      type: 'textarea',\n      admin: {\n        description: 'The excerpt of the course',\n      },\n    },\n    {\n      name: 'description',\n      type: 'richText',\n      required: true,\n      admin: {\n        description: 'The description of the course',\n      },\n    },\n\n    {\n      name: 'lessons',\n      type: 'relationship',\n      relationTo: lessonsCollectionSlug,\n      hasMany: true,\n      admin: {\n        allowCreate: false,\n        description: 'The lessons that are part of the course',\n      },\n      access: {\n        // No access control for the lessons field\n        read: isAdminOrAuthorOrStudentFieldLevel,\n      },\n    },\n    {\n      name: 'featuredImage',\n      type: 'upload',\n      relationTo: mediaCollectionSlug,\n      admin: {\n        position: 'sidebar',\n        description: 'The featured image of the course',\n      },\n    },\n    {\n      type: 'tabs',\n\n      tabs: [\n        {\n          label: 'Enrollment',\n          name: 'enrollment',\n          description: 'Controls how students gain access to the course',\n          fields: [\n            {\n              name: 'accessMode',\n              type: 'select',\n              defaultValue: 'open',\n              options: [\n                { label: 'Open', value: 'open' },\n                { label: 'Free', value: 'free' },\n                { label: 'Buy Now', value: 'buy now' },\n                { label: 'Recurring', value: 'recurring' },\n                { label: 'Closed', value: 'closed' },\n              ],\n              required: true,\n              admin: {\n                description: 'Controls how students gain access to the course',\n              },\n            },\n\n            ...(currenciesConfig\n              ? [\n                  pricesField({\n                    currenciesConfig,\n                    overrides: {\n                      admin: {\n                        condition: (_, siblingData) => {\n                          console.log(siblingData, 'siblingData')\n                          \n                          return ['buy now', 'recurring', 'closed'].includes(\n                            siblingData?.accessMode,\n                          )\n                        },\n                      },\n                    },\n                  }),\n                ]\n              : []),\n            {\n              name: 'enrollmentUrl',\n              type: 'text',\n              admin: {\n                description: 'The URL for the enrollment page',\n                condition: (_, siblingData) => siblingData?.accessMode === 'closed',\n              },\n            },\n          ],\n        },\n        {\n          label: 'Course Settings',\n          name: 'courseSettings',\n          description: 'Controls the look and feel of the course and optional content settings',\n          fields: [\n            {\n              name: 'courseMaterials',\n              type: 'richText',\n              admin: {\n                description: 'The materials that are part of the course',\n              },\n              access: {\n                read: isAdminOrAuthorOrEnrolledInCourseFieldLevel,\n              },\n            },\n\n            {\n              name: 'accessExpirationDays',\n              type: 'number',\n              admin: {\n                description: 'The number of days after which the access to the course will expire',\n              },\n            },\n\n            {\n              name: 'duration',\n              type: 'group',\n              fields: [\n                {\n                  type: 'row',\n                  fields: [\n                    {\n                      name: 'hours',\n                      type: 'number',\n                      label: 'hour(s)',\n                      admin: {\n                        description: 'The number of hours in the course',\n                        width: '50%',\n                      },\n                    },\n                    {\n                      name: 'minutes',\n                      type: 'number',\n                      label: 'minute(s)',\n                      admin: {\n                        width: '50%',\n                        description: 'The number of minutes in the course',\n                      },\n                    },\n                  ],\n                },\n              ],\n              admin: {\n                description: 'The duration of the course',\n              },\n            },\n          ],\n        },\n        {\n          label: 'Access Settings',\n          name: 'accessSettings',\n          description:\n            'Controls additional requirements and restrictions that enrollees need to meet to access the course',\n          fields: [\n            {\n              name: 'prerequisiteCourses',\n              type: 'relationship',\n              relationTo: 'courses',\n              hasMany: true,\n              admin: {\n                allowCreate: false,\n                description:\n                  'Courses that a student must complete before enrolling in this course.',\n              },\n            },\n            {\n              name: 'requiredPoints',\n              type: 'number',\n              admin: {\n                description: 'The points that are required to access this course',\n              },\n            },\n            {\n              name: 'studentLimit',\n              type: 'number',\n              admin: {\n                description: 'The number of students that can enroll in the course',\n              },\n            },\n          ],\n        },\n        {\n          label: 'Awards',\n          name: 'awards',\n          description: 'Controls the awards settings of the course',\n          fields: [\n            {\n              name: 'certificate',\n              type: 'relationship',\n              relationTo: certificatesCollectionSlug,\n              hasMany: false,\n              admin: {\n                allowCreate: false,\n                description:\n                  'The certificate that is awarded to the students who complete the course',\n              },\n            },\n            {\n              name: 'coursePoints',\n              type: 'number',\n              label: 'Course completion points',\n              admin: {\n                description: 'The points that are awarded to the students who complete the course',\n              },\n            },\n          ],\n        },\n        {\n          label: 'Navigation',\n          name: 'navigation',\n          description: 'Controls the navigation settings of the course',\n          fields: [\n            {\n              name: 'navigationMode',\n              type: 'select',\n              label: 'Course Navigation Mode',\n              defaultValue: 'linear',\n              required: true,\n              options: [\n                { label: 'Linear', value: 'linear' },\n                { label: 'Free Form', value: 'free' },\n              ],\n              admin: {\n                description:\n                  'Controls how students interact with the content and their navigational experience',\n              },\n            },\n          ],\n        },\n        {\n          name: 'courseStudents',\n          label: 'Students',\n          description: 'Controls the students enrolled in the course',\n          fields: [\n            {\n              name: 'students',\n              type: 'relationship',\n              relationTo: studentsCollectionSlug,\n              hasMany: true,\n              admin: {\n                allowCreate: false,\n                description: 'The students enrolled in the course',\n              },\n              access: {\n                read: isAdminOrAuthorFieldLevel,\n              },\n            },\n          ],\n        },\n      ],\n    },\n\n    {\n      name: 'categories',\n      type: 'relationship',\n      relationTo: categoriesCollectionSlug,\n      hasMany: true,\n      admin: {\n        position: 'sidebar',\n        allowCreate: false,\n        description: 'The categories that are part of the course',\n      },\n    },\n    {\n      name: 'tags',\n      type: 'relationship',\n      relationTo: tagsCollectionSlug,\n      hasMany: true,\n      admin: {\n        position: 'sidebar',\n        allowCreate: false,\n        description: 'The tags that are part of the course',\n      },\n    },\n  ]\n\n  // Apply field overrides if provided\n  const fields =\n    fieldsOverride && typeof fieldsOverride === 'function'\n      ? fieldsOverride({ defaultFields })\n      : defaultFields\n\n  /**\n   * Base configuration for the courses collection\n   * Includes slug, access control, timestamps, and admin settings\n   */\n  const baseConfig: CollectionConfig = {\n    slug: 'courses',\n    access: {\n      create: isAdminOrAuthor,\n      delete: isAdminOrAuthor,\n      read: isAdminOrPublished, // TODO not sure if everyone should be able to read courses\n      update: isAdminOrAuthor,\n    },\n    timestamps: true,\n    ...overrides,\n    admin: {\n      useAsTitle: 'title',\n      group: 'LMS',\n      ...overrides?.admin,\n    },\n    fields,\n  }\n\n  return { ...baseConfig }\n}\n"],"names":["pricesField","isAdminOrAuthor","isAdminOrAuthorFieldLevel","isAdminOrAuthorOrStudentFieldLevel","isAdminOrAuthorOrEnrolledInCourseFieldLevel","isAdminOrPublished","coursesCollection","props","overrides","mediaCollectionSlug","lessonsCollectionSlug","categoriesCollectionSlug","tagsCollectionSlug","currenciesConfig","studentsCollectionSlug","certificatesCollectionSlug","fieldsOverride","fields","defaultFields","name","type","required","admin","description","relationTo","hasMany","allowCreate","access","read","position","tabs","label","defaultValue","options","value","condition","_","siblingData","console","log","includes","accessMode","width","baseConfig","slug","create","delete","update","timestamps","useAsTitle","group"],"mappings":"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"}