{"version":3,"sources":["../../src/utilities/deepMerge.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport type { Field } from 'payload'\nimport { findFieldByNameAndType } from './findFieldByNameAndType.js'\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item: unknown): item is object {\n  return typeof item === 'object' && !Array.isArray(item)\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function deepMerge<T, R>(target: T, source: R): T {\n  const output = { ...target }\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = deepMerge(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    })\n  }\n\n  return output\n}\n\n/**\n * Merges two arrays of fields, intelligently combining field configurations\n * @param existingFields - The existing fields array\n * @param newFields - The new fields to merge\n * @returns Merged fields array with field configurations properly merged\n */\nexport const mergeFields = (existingFields: Field[], newFields: Field[]): Field[] => {\n  const mergedFields = [...existingFields]\n  \n  for (const newField of newFields) {\n    if (!('name' in newField)) {\n      // Field without a name, just add it\n      mergedFields.push(newField)\n      continue\n    }\n    \n    // Check if a field with the same name already exists\n    const existingFieldIndex = mergedFields.findIndex(field => \n      'name' in field && field.name === newField.name\n    )\n    \n    if (existingFieldIndex === -1) {\n      // Field doesn't exist, add it\n      mergedFields.push(newField)\n    } else {\n      // Field exists, merge the configurations\n      const existingField = mergedFields[existingFieldIndex]\n      const mergedField = mergeFieldConfigurations(existingField, newField)\n      mergedFields[existingFieldIndex] = mergedField\n    }\n  }\n  \n  return mergedFields\n}\n\n/**\n * Merges two field configurations, combining their properties intelligently\n * @param existingField - The existing field configuration\n * @param newField - The new field configuration to merge\n * @returns Merged field configuration\n */\nconst mergeFieldConfigurations = (existingField: Field, newField: Field): Field => {\n  // Start with the existing field as base\n  const mergedField = { ...existingField }\n  \n  // Merge basic properties, with new field taking precedence for most properties\n  Object.assign(mergedField, newField)\n  \n  // Special handling for arrays and objects that should be merged, not replaced\n  if (existingField.options && newField.options) {\n    // For select fields, merge options arrays\n    if (Array.isArray(existingField.options) && Array.isArray(newField.options)) {\n      const existingOptions = existingField.options as any[]\n      const newOptions = newField.options as any[]\n      \n      // Create a map of existing options by value to avoid duplicates\n      const optionsMap = new Map()\n      existingOptions.forEach(option => {\n        if (option.value) {\n          optionsMap.set(option.value, option)\n        }\n      })\n      \n      // Add new options, allowing them to override existing ones\n      newOptions.forEach(option => {\n        if (option.value) {\n          optionsMap.set(option.value, option)\n        }\n      })\n      \n      mergedField.options = Array.from(optionsMap.values())\n    }\n  }\n  \n  // Merge admin configurations\n  if (existingField.admin && newField.admin) {\n    mergedField.admin = { ...existingField.admin, ...newField.admin }\n  }\n  \n  // Merge validation configurations\n  if (existingField.validate && newField.validate) {\n    // For validation functions, use the new one as it's more specific\n    mergedField.validate = newField.validate\n  }\n  \n  // Merge hooks configurations\n  if (existingField.hooks && newField.hooks) {\n    mergedField.hooks = {\n      ...existingField.hooks,\n      ...newField.hooks,\n      // For arrays like beforeChange, afterRead, etc., concatenate them\n      beforeChange: [\n        ...(existingField.hooks.beforeChange || []),\n        ...(newField.hooks.beforeChange || [])\n      ],\n      afterChange: [\n        ...(existingField.hooks.afterChange || []),\n        ...(newField.hooks.afterChange || [])\n      ],\n      beforeRead: [\n        ...(existingField.hooks.beforeRead || []),\n        ...(newField.hooks.beforeRead || [])\n      ],\n      afterRead: [\n        ...(existingField.hooks.afterRead || []),\n        ...(newField.hooks.afterRead || [])\n      ],\n      beforeValidate: [\n        ...(existingField.hooks.beforeValidate || []),\n        ...(newField.hooks.beforeValidate || [])\n      ],\n      afterValidate: [\n        ...(existingField.hooks.afterValidate || []),\n        ...(newField.hooks.afterValidate || [])\n      ]\n    }\n  }\n  \n  return mergedField\n}\n"],"names":["isObject","item","Array","isArray","deepMerge","target","source","output","Object","keys","forEach","key","assign","mergeFields","existingFields","newFields","mergedFields","newField","push","existingFieldIndex","findIndex","field","name","existingField","mergedField","mergeFieldConfigurations","options","existingOptions","newOptions","optionsMap","Map","option","value","set","from","values","admin","validate","hooks","beforeChange","afterChange","beforeRead","afterRead","beforeValidate","afterValidate"],"mappings":"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"}