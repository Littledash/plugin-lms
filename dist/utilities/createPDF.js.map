{"version":3,"sources":["../../src/utilities/createPDF.tsx"],"sourcesContent":["import { PDFDocument, StandardFonts, rgb } from 'pdf-lib'\nimport fontkit from '@pdf-lib/fontkit'\n\ntype createPDFProps = {\n    studentName: string;\n    courseTitle: string;\n    completionDate: string;\n    certificateNumber: string;\n    templateImage: string;\n    fontFamily: string;\n    authorName?: string;\n}\n\nexport const createPDF = async ({\n    studentName,\n    courseTitle,\n    completionDate,\n    certificateNumber,\n    templateImage,\n    fontFamily,\n    authorName,\n}: createPDFProps): Promise<Uint8Array> => {\n    console.log('createPDF called with data:', {\n        studentName,\n        courseTitle,\n        completionDate,\n        certificateNumber,\n        templateImage,\n        fontFamily,\n        authorName\n    })\n\n    // Validate inputs\n    if (!studentName || !courseTitle) {\n        throw new Error('Missing required fields: studentName and courseTitle are required')\n    }\n\n    try {\n        console.log('Creating PDF with pdf-lib...')\n        \n        // Create a new PDF document\n        const pdfDoc = await PDFDocument.create()\n        \n        // Register fontkit for custom font support\n        pdfDoc.registerFontkit(fontkit)\n        \n        // Add a page (A4 size in landscape orientation)\n        const page = pdfDoc.addPage([842, 595]) // A4 landscape dimensions\n        \n        // Embed fonts - use Google Fonts or fallback to standard fonts\n        let primaryFont, boldFont\n        \n        if (fontFamily && fontFamily.toLowerCase() !== 'poppins') {\n            try {\n                console.log(`Loading Google Font: ${fontFamily}`)\n                \n                // Map font family to Google Fonts URL\n                const getGoogleFontUrl = (fontName: string) => {\n                    const fontMap: { [key: string]: string } = {\n                        'poppins': 'https://fonts.gstatic.com/s/poppins/v23/pxiEyp8kv8JHgFVrJJfecg.woff2',\n                        'poppins-bold': 'https://fonts.gstatic.com/s/poppins/v23/pxiByp8kv8JHgFVrLCz7Z1xlFQ.woff2',\n                        'roboto': 'https://fonts.gstatic.com/s/roboto/v31/KFOmCnqEu92Fr1Mu4mxK.woff2',\n                        'roboto-bold': 'https://fonts.gstatic.com/s/roboto/v31/KFOlCnqEu92Fr1MmWUlfBBc4.woff2',\n                        'opensans': 'https://fonts.gstatic.com/s/opensans/v40/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4gaVIGxA.woff2',\n                        'opensans-bold': 'https://fonts.gstatic.com/s/opensans/v40/memQYaGs126MiZpBA-UFUIcVXSCEkx2cmqvXlWq8tWZ0Pw86hd0Rk8ZkWVAewA.woff2',\n                        'lato': 'https://fonts.gstatic.com/s/lato/v24/S6uyw4BMUTPHjx4wXg.woff2',\n                        'lato-bold': 'https://fonts.gstatic.com/s/lato/v24/S6u9w4BMUTPHh6UVSwiPGQ.woff2',\n                        'montserrat': 'https://fonts.gstatic.com/s/montserrat/v26/JTUHjIg1_i6t8kCHKm4532VJOt5-QNFgpCtr6Hw5aXpsog.woff2',\n                        'montserrat-bold': 'https://fonts.gstatic.com/s/montserrat/v26/JTUSjIg1_i6t8kCHKm4532VJOt5-QNFgpCtr6Hw0aXpsog.woff2',\n                    }\n                    return fontMap[fontName.toLowerCase()] || null\n                }\n                \n                const fontUrl = getGoogleFontUrl(fontFamily)\n                const boldFontUrl = getGoogleFontUrl(`${fontFamily}-bold`)\n                \n                if (fontUrl) {\n                    // Fetch and embed the Google Font\n                    const fontResponse = await fetch(fontUrl)\n                    const fontBytes = await fontResponse.arrayBuffer()\n                    primaryFont = await pdfDoc.embedFont(fontBytes)\n                    console.log(`Successfully loaded Google Font: ${fontFamily}`)\n                } else {\n                    throw new Error(`Font ${fontFamily} not found in Google Fonts mapping`)\n                }\n                \n                if (boldFontUrl) {\n                    // Fetch and embed the bold variant\n                    const boldFontResponse = await fetch(boldFontUrl)\n                    const boldFontBytes = await boldFontResponse.arrayBuffer()\n                    boldFont = await pdfDoc.embedFont(boldFontBytes)\n                    console.log(`Successfully loaded Google Font bold variant: ${fontFamily}`)\n                } else {\n                    // If no bold variant, use the regular font for bold text\n                    boldFont = primaryFont\n                    console.log(`No bold variant found for ${fontFamily}, using regular font for bold text`)\n                }\n                \n            } catch (fontError) {\n                console.warn(`Failed to load Google Font ${fontFamily}, falling back to Helvetica:`, fontError)\n                primaryFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n                boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)\n            }\n        } else {\n            // Default to Poppins Google Font\n            try {\n                console.log('Loading default Google Font: Poppins')\n                const poppinsUrl = 'https://fonts.gstatic.com/s/poppins/v23/pxiEyp8kv8JHgFVrJJfecg.woff2'\n                const poppinsBoldUrl = 'https://fonts.gstatic.com/s/poppins/v23/pxiByp8kv8JHgFVrLCz7Z1xlFQ.woff2'\n                \n                const fontResponse = await fetch(poppinsUrl)\n                const fontBytes = await fontResponse.arrayBuffer()\n                primaryFont = await pdfDoc.embedFont(fontBytes)\n                \n                const boldFontResponse = await fetch(poppinsBoldUrl)\n                const boldFontBytes = await boldFontResponse.arrayBuffer()\n                boldFont = await pdfDoc.embedFont(boldFontBytes)\n                \n                console.log('Successfully loaded default Poppins font')\n            } catch (poppinsError) {\n                console.warn('Failed to load Poppins, falling back to Helvetica:', poppinsError)\n                primaryFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n                boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)\n            }\n        }\n        \n        // Get page dimensions\n        const { width, height } = page.getSize()\n        \n        // Add background image if provided\n        if (templateImage) {\n            try {\n                console.log('Loading template image:', templateImage)\n                const imageResponse = await fetch(templateImage)\n                const imageBytes = await imageResponse.arrayBuffer()\n                \n                // Determine image type and embed accordingly\n                let image\n                if (templateImage.toLowerCase().includes('.jpg') || templateImage.toLowerCase().includes('.jpeg')) {\n                    image = await pdfDoc.embedJpg(imageBytes)\n                } else if (templateImage.toLowerCase().includes('.png')) {\n                    image = await pdfDoc.embedPng(imageBytes)\n                } else {\n                    // Try JPG first, then PNG\n                    try {\n                        image = await pdfDoc.embedJpg(imageBytes)\n                    } catch {\n                        image = await pdfDoc.embedPng(imageBytes)\n                    }\n                }\n                \n                // Scale image to fit page\n                const imageDims = image.scaleToFit(width, height)\n                \n                // Center the image on the page\n                page.drawImage(image, {\n                    x: (width - imageDims.width) / 2,\n                    y: (height - imageDims.height) / 2,\n                    width: imageDims.width,\n                    height: imageDims.height,\n                })\n                \n                console.log('Template image added successfully')\n            } catch (imageError) {\n                console.warn('Failed to load template image, continuing without it:', imageError)\n            }\n        }\n        \n        // Add certificate content\n        const centerX = width / 2\n        \n        // Certificate title\n        page.drawText('Certificate of Completion', {\n            x: centerX - 120,\n            y: height - 120,\n            size: 24,\n            font: boldFont,\n            color: rgb(0, 0, 0),\n        })\n        \n        // Student name\n        page.drawText(studentName, {\n            x: centerX - (studentName.length * 8),\n            y: height - 180,\n            size: 20,\n            font: boldFont,\n            color: rgb(0, 0, 0),\n        })\n        \n        // Course title\n        page.drawText(courseTitle, {\n            x: centerX - (courseTitle.length * 6),\n            y: height - 220,\n            size: 16,\n            font: primaryFont,\n            color: rgb(0, 0, 0),\n        })\n        \n        // Completion date\n        page.drawText(`Completed on: ${completionDate}`, {\n            x: centerX - 80,\n            y: height - 260,\n            size: 14,\n            font: primaryFont,\n            color: rgb(0, 0, 0),\n        })\n        \n        // Certificate number\n        page.drawText(`Certificate Number: ${certificateNumber}`, {\n            x: centerX - 100,\n            y: height - 300,\n            size: 12,\n            font: primaryFont,\n            color: rgb(0.5, 0.5, 0.5),\n        })\n        \n        // Author name (if provided)\n        if (authorName) {\n            page.drawText(`Author: ${authorName}`, {\n                x: centerX - 60,\n                y: height - 340,\n                size: 14,\n                font: primaryFont,\n                color: rgb(0, 0, 0),\n            })\n        }\n        \n        // Set document metadata\n        pdfDoc.setTitle(`Certificate of Completion - ${studentName}`)\n        pdfDoc.setAuthor('LMS System')\n        pdfDoc.setSubject(`Certificate for ${courseTitle}`)\n        pdfDoc.setKeywords(['certificate', 'completion', 'course', 'education'])\n        pdfDoc.setCreationDate(new Date())\n        \n        console.log('PDF created successfully, generating blob...')\n        \n        // Generate PDF bytes\n        const pdfBytes = await pdfDoc.save()\n        \n        console.log('PDF created successfully, size:', pdfBytes.length)\n        \n        // Return the Uint8Array directly - the calling code can convert to blob if needed\n        return pdfBytes\n        \n    } catch (error) {\n        console.error('Error in createPDF:', error)\n        console.error('Error type:', typeof error)\n        console.error('Error constructor:', error?.constructor?.name)\n        console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace')\n        console.error('Error message:', error instanceof Error ? error.message : String(error))\n        \n        // Try to get more details about the error\n        if (error && typeof error === 'object') {\n            console.error('Error keys:', Object.keys(error))\n            console.error('Error properties:', Object.getOwnPropertyNames(error))\n        }\n        \n        throw error\n    }\n}"],"names":["PDFDocument","StandardFonts","rgb","fontkit","createPDF","studentName","courseTitle","completionDate","certificateNumber","templateImage","fontFamily","authorName","console","log","Error","pdfDoc","create","registerFontkit","page","addPage","primaryFont","boldFont","toLowerCase","getGoogleFontUrl","fontName","fontMap","fontUrl","boldFontUrl","fontResponse","fetch","fontBytes","arrayBuffer","embedFont","boldFontResponse","boldFontBytes","fontError","warn","Helvetica","HelveticaBold","poppinsUrl","poppinsBoldUrl","poppinsError","width","height","getSize","imageResponse","imageBytes","image","includes","embedJpg","embedPng","imageDims","scaleToFit","drawImage","x","y","imageError","centerX","drawText","size","font","color","length","setTitle","setAuthor","setSubject","setKeywords","setCreationDate","Date","pdfBytes","save","error","constructor","name","stack","message","String","Object","keys","getOwnPropertyNames"],"mappings":"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"}