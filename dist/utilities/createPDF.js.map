{"version":3,"sources":["../../src/utilities/createPDF.tsx"],"sourcesContent":["import React from 'react'\nimport { pdf, Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer'\nimport { CertificateDocument } from '../ui/Certificate/index.js'\n\ntype createPDFProps = {\n    studentName: string;\n    courseTitle: string;\n    completionDate: string;\n    certificateNumber: string;\n    templateImage: string;\n    fontFamily: string;\n    authorName?: string;\n}\n\nexport const createPDF = async ({\n    studentName,\n    courseTitle,\n    completionDate,\n    certificateNumber,\n    templateImage,\n    fontFamily,\n    authorName,\n}: createPDFProps) => {\n    console.log('createPDF called with data:', {\n        studentName,\n        courseTitle,\n        completionDate,\n        certificateNumber,\n        templateImage,\n        fontFamily,\n        authorName\n    })\n\n    // Validate inputs\n    if (!studentName || !courseTitle) {\n        throw new Error('Missing required fields: studentName and courseTitle are required')\n    }\n\n    // Check if CertificateDocument is available\n    console.log('CertificateDocument type:', typeof CertificateDocument)\n    if (!CertificateDocument) {\n        throw new Error('CertificateDocument component is not available')\n    }\n\n    try {\n        // First try with a simple test document to isolate the issue\n        console.log('Creating simple test PDF first...')\n        const testPDF = pdf(\n            <Document>\n                <Page size=\"A4\">\n                    <View>\n                        <Text>Test Certificate</Text>\n                        <Text>Student: {studentName}</Text>\n                        <Text>Course: {courseTitle}</Text>\n                    </View>\n                </Page>\n            </Document>\n        )\n        \n        console.log('Test PDF object created, calling toBlob()...')\n        const testBlob = await testPDF.toBlob()\n        console.log('Test PDF created successfully, size:', testBlob.size)\n        \n        // If test works, try with the full certificate\n        console.log('Test PDF successful, now creating full certificate...')\n        const PDF = pdf(\n            <CertificateDocument\n                studentName={studentName}\n                courseTitle={courseTitle}\n                completionDate={completionDate}\n                certificateNumber={certificateNumber}\n                templateImage={templateImage}\n                fontFamily={fontFamily}\n                authorName={authorName}\n            />\n        )\n\n        console.log('Full PDF object created, calling toBlob()')\n        const blob = await PDF.toBlob()\n        console.log('Full PDF blob created successfully, size:', blob.size)\n        return blob\n    } catch (error) {\n        console.error('Error in createPDF:', error)\n        console.error('Error type:', typeof error)\n        console.error('Error constructor:', error?.constructor?.name)\n        console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace')\n        console.error('Error message:', error instanceof Error ? error.message : String(error))\n        \n        // Try to get more details about the error\n        if (error && typeof error === 'object') {\n            console.error('Error keys:', Object.keys(error))\n            console.error('Error properties:', Object.getOwnPropertyNames(error))\n        }\n        \n        throw error\n    }\n}"],"names":["React","pdf","Document","Page","Text","View","CertificateDocument","createPDF","studentName","courseTitle","completionDate","certificateNumber","templateImage","fontFamily","authorName","console","log","Error","testPDF","size","testBlob","toBlob","PDF","blob","error","constructor","name","stack","message","String","Object","keys","getOwnPropertyNames"],"mappings":";AAAA,OAAOA,WAAW,QAAO;AACzB,SAASC,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,QAAoB,sBAAqB;AACjF,SAASC,mBAAmB,QAAQ,6BAA4B;AAYhE,OAAO,MAAMC,YAAY,OAAO,EAC5BC,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,UAAU,EACVC,UAAU,EACG;IACbC,QAAQC,GAAG,CAAC,+BAA+B;QACvCR;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;IACJ;IAEA,kBAAkB;IAClB,IAAI,CAACN,eAAe,CAACC,aAAa;QAC9B,MAAM,IAAIQ,MAAM;IACpB;IAEA,4CAA4C;IAC5CF,QAAQC,GAAG,CAAC,6BAA6B,OAAOV;IAChD,IAAI,CAACA,qBAAqB;QACtB,MAAM,IAAIW,MAAM;IACpB;IAEA,IAAI;QACA,6DAA6D;QAC7DF,QAAQC,GAAG,CAAC;QACZ,MAAME,UAAUjB,kBACZ,KAACC;sBACG,cAAA,KAACC;gBAAKgB,MAAK;0BACP,cAAA,MAACd;;sCACG,KAACD;sCAAK;;sCACN,MAACA;;gCAAK;gCAAUI;;;sCAChB,MAACJ;;gCAAK;gCAASK;;;;;;;QAM/BM,QAAQC,GAAG,CAAC;QACZ,MAAMI,WAAW,MAAMF,QAAQG,MAAM;QACrCN,QAAQC,GAAG,CAAC,wCAAwCI,SAASD,IAAI;QAEjE,+CAA+C;QAC/CJ,QAAQC,GAAG,CAAC;QACZ,MAAMM,MAAMrB,kBACR,KAACK;YACGE,aAAaA;YACbC,aAAaA;YACbC,gBAAgBA;YAChBC,mBAAmBA;YACnBC,eAAeA;YACfC,YAAYA;YACZC,YAAYA;;QAIpBC,QAAQC,GAAG,CAAC;QACZ,MAAMO,OAAO,MAAMD,IAAID,MAAM;QAC7BN,QAAQC,GAAG,CAAC,6CAA6CO,KAAKJ,IAAI;QAClE,OAAOI;IACX,EAAE,OAAOC,OAAO;QACZT,QAAQS,KAAK,CAAC,uBAAuBA;QACrCT,QAAQS,KAAK,CAAC,eAAe,OAAOA;QACpCT,QAAQS,KAAK,CAAC,sBAAsBA,OAAOC,aAAaC;QACxDX,QAAQS,KAAK,CAAC,gBAAgBA,iBAAiBP,QAAQO,MAAMG,KAAK,GAAG;QACrEZ,QAAQS,KAAK,CAAC,kBAAkBA,iBAAiBP,QAAQO,MAAMI,OAAO,GAAGC,OAAOL;QAEhF,0CAA0C;QAC1C,IAAIA,SAAS,OAAOA,UAAU,UAAU;YACpCT,QAAQS,KAAK,CAAC,eAAeM,OAAOC,IAAI,CAACP;YACzCT,QAAQS,KAAK,CAAC,qBAAqBM,OAAOE,mBAAmB,CAACR;QAClE;QAEA,MAAMA;IACV;AACJ,EAAC"}