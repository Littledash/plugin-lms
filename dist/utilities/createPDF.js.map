{"version":3,"sources":["../../src/utilities/createPDF.tsx"],"sourcesContent":["import { PDFDocument, StandardFonts, rgb } from 'pdf-lib'\nimport fontkit from '@pdf-lib/fontkit'\n\ntype createPDFProps = {\n    studentName: string;\n    courseTitle: string;\n    completionDate: string;\n    certificateNumber: string;\n    templateImage: string;\n    fontFamily: string;\n    authorName?: string;\n}\n\nexport const createPDF = async ({\n    studentName,\n    courseTitle,\n    completionDate,\n    certificateNumber,\n    templateImage,\n    fontFamily,\n    authorName,\n}: createPDFProps): Promise<Uint8Array> => {\n    console.log('createPDF called with data:', {\n        studentName,\n        courseTitle,\n        completionDate,\n        certificateNumber,\n        templateImage,\n        fontFamily,\n        authorName\n    })\n\n    // Validate inputs\n    if (!studentName || !courseTitle) {\n        throw new Error('Missing required fields: studentName and courseTitle are required')\n    }\n\n    try {\n        console.log('Creating PDF with pdf-lib...')\n        \n        // Create a new PDF document\n        const pdfDoc = await PDFDocument.create()\n        \n        // Register fontkit for custom font support\n        pdfDoc.registerFontkit(fontkit)\n        \n        // Add a page (A4 size in landscape orientation)\n        const page = pdfDoc.addPage([842, 595]) // A4 landscape dimensions\n        \n        // Embed fonts - use Google Fonts or fallback to standard fonts\n        let primaryFont, boldFont\n        \n        if (fontFamily && fontFamily.toLowerCase() !== 'poppins') {\n            try {\n                console.log(`Loading Google Font: ${fontFamily}`)\n                \n                // Map font family to Google Fonts URL - Updated with more reliable URLs\n                const getGoogleFontUrl = (fontName: string) => {\n                    const fontMap: { [key: string]: string } = {\n                        'poppins': 'https://fonts.gstatic.com/s/poppins/v20/pxiEyp8kv8JHgFVrJJfecg.woff2',\n                        'poppins-bold': 'https://fonts.gstatic.com/s/poppins/v20/pxiByp8kv8JHgFVrLCz7Z1xlFQ.woff2',\n                        'roboto': 'https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Mu4mxK.woff2',\n                        'roboto-bold': 'https://fonts.gstatic.com/s/roboto/v30/KFOlCnqEu92Fr1MmWUlfBBc4.woff2',\n                        'opensans': 'https://fonts.gstatic.com/s/opensans/v34/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4gaVIGxA.woff2',\n                        'opensans-bold': 'https://fonts.gstatic.com/s/opensans/v34/memQYaGs126MiZpBA-UFUIcVXSCEkx2cmqvXlWq8tWZ0Pw86hd0Rk8ZkWVAewA.woff2',\n                        'lato': 'https://fonts.gstatic.com/s/lato/v24/S6uyw4BMUTPHjx4wXg.woff2',\n                        'lato-bold': 'https://fonts.gstatic.com/s/lato/v24/S6u9w4BMUTPHh6UVSwiPGQ.woff2',\n                        'montserrat': 'https://fonts.gstatic.com/s/montserrat/v25/JTUHjIg1_i6t8kCHKm4532VJOt5-QNFgpCtr6Hw5aXpsog.woff2',\n                        'montserrat-bold': 'https://fonts.gstatic.com/s/montserrat/v25/JTUSjIg1_i6t8kCHKm4532VJOt5-QNFgpCtr6Hw0aXpsog.woff2',\n                    }\n                    return fontMap[fontName.toLowerCase()] || null\n                }\n                \n                const fontUrl = getGoogleFontUrl(fontFamily)\n                const boldFontUrl = getGoogleFontUrl(`${fontFamily}-bold`)\n                \n                if (fontUrl) {\n                    // Fetch and embed the Google Font\n                    console.log(`Fetching ${fontFamily} regular font from:`, fontUrl)\n                    const fontResponse = await fetch(fontUrl)\n                    if (!fontResponse.ok) {\n                        throw new Error(`Failed to fetch ${fontFamily} regular font: ${fontResponse.status} ${fontResponse.statusText}`)\n                    }\n                    const fontBytes = await fontResponse.arrayBuffer()\n                    primaryFont = await pdfDoc.embedFont(fontBytes)\n                    console.log(`Successfully loaded Google Font: ${fontFamily}`)\n                } else {\n                    throw new Error(`Font ${fontFamily} not found in Google Fonts mapping`)\n                }\n                \n                if (boldFontUrl) {\n                    // Fetch and embed the bold variant\n                    console.log(`Fetching ${fontFamily} bold font from:`, boldFontUrl)\n                    const boldFontResponse = await fetch(boldFontUrl)\n                    if (!boldFontResponse.ok) {\n                        throw new Error(`Failed to fetch ${fontFamily} bold font: ${boldFontResponse.status} ${boldFontResponse.statusText}`)\n                    }\n                    const boldFontBytes = await boldFontResponse.arrayBuffer()\n                    boldFont = await pdfDoc.embedFont(boldFontBytes)\n                    console.log(`Successfully loaded Google Font bold variant: ${fontFamily}`)\n                } else {\n                    // If no bold variant, use the regular font for bold text\n                    boldFont = primaryFont\n                    console.log(`No bold variant found for ${fontFamily}, using regular font for bold text`)\n                }\n                \n            } catch (fontError) {\n                console.warn(`Failed to load Google Font ${fontFamily}, falling back to Helvetica:`, fontError)\n                primaryFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n                boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)\n            }\n        } else {\n            // Default to Poppins Google Font with improved error handling\n            try {\n                console.log('Loading default Google Font: Poppins')\n                const poppinsUrl = 'https://fonts.gstatic.com/s/poppins/v20/pxiEyp8kv8JHgFVrJJfecg.woff2'\n                const poppinsBoldUrl = 'https://fonts.gstatic.com/s/poppins/v20/pxiByp8kv8JHgFVrLCz7Z1xlFQ.woff2'\n                \n                console.log('Fetching Poppins regular font from:', poppinsUrl)\n                const fontResponse = await fetch(poppinsUrl)\n                if (!fontResponse.ok) {\n                    throw new Error(`Failed to fetch Poppins regular font: ${fontResponse.status} ${fontResponse.statusText}`)\n                }\n                const fontBytes = await fontResponse.arrayBuffer()\n                primaryFont = await pdfDoc.embedFont(fontBytes)\n                console.log('Successfully embedded Poppins regular font')\n                \n                console.log('Fetching Poppins bold font from:', poppinsBoldUrl)\n                const boldFontResponse = await fetch(poppinsBoldUrl)\n                if (!boldFontResponse.ok) {\n                    throw new Error(`Failed to fetch Poppins bold font: ${boldFontResponse.status} ${boldFontResponse.statusText}`)\n                }\n                const boldFontBytes = await boldFontResponse.arrayBuffer()\n                boldFont = await pdfDoc.embedFont(boldFontBytes)\n                console.log('Successfully embedded Poppins bold font')\n                \n                console.log('Successfully loaded default Poppins font family')\n            } catch (poppinsError) {\n                console.warn('Failed to load Poppins, falling back to Helvetica:', poppinsError)\n                console.warn('Poppins error details:', {\n                    message: poppinsError instanceof Error ? poppinsError.message : String(poppinsError),\n                    stack: poppinsError instanceof Error ? poppinsError.stack : undefined\n                })\n                primaryFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n                boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)\n                console.log('Fallback to Helvetica fonts completed')\n            }\n        }\n        \n        // Get page dimensions\n        const { width, height } = page.getSize()\n        \n        // Add background image if provided\n        if (templateImage) {\n            try {\n                console.log('Loading template image:', templateImage)\n                const imageResponse = await fetch(templateImage)\n                const imageBytes = await imageResponse.arrayBuffer()\n                \n                // Determine image type and embed accordingly\n                let image\n                if (templateImage.toLowerCase().includes('.jpg') || templateImage.toLowerCase().includes('.jpeg')) {\n                    image = await pdfDoc.embedJpg(imageBytes)\n                } else if (templateImage.toLowerCase().includes('.png')) {\n                    image = await pdfDoc.embedPng(imageBytes)\n                } else {\n                    // Try JPG first, then PNG\n                    try {\n                        image = await pdfDoc.embedJpg(imageBytes)\n                    } catch {\n                        image = await pdfDoc.embedPng(imageBytes)\n                    }\n                }\n                \n                // Scale image to fit page\n                const imageDims = image.scaleToFit(width, height)\n                \n                // Center the image on the page\n                page.drawImage(image, {\n                    x: (width - imageDims.width) / 2,\n                    y: (height - imageDims.height) / 2,\n                    width: imageDims.width,\n                    height: imageDims.height,\n                })\n                \n                console.log('Template image added successfully')\n            } catch (imageError) {\n                console.warn('Failed to load template image, continuing without it:', imageError)\n            }\n        }\n        \n        // Add certificate content - New template only requires first name, last name, and date\n        const centerX = width / 2\n        \n        // Certificate title (commented out - now part of template image)\n        // page.drawText('Certificate of Completion', {\n        //     x: centerX - 120,\n        //     y: height - 120,\n        //     size: 24,\n        //     font: boldFont,\n        //     color: rgb(0, 0, 0),\n        // })\n        \n        // Student name - positioned for new template\n        page.drawText(studentName, {\n            x: centerX - (studentName.length * 6),\n            y: height - 280,\n            size: 18,\n            font: boldFont,\n            color: rgb(0.8, 0.2, 0.4), // Pink color to match template\n        })\n        \n        // Course title (commented out - now part of template image)\n        // page.drawText(courseTitle, {\n        //     x: centerX - (courseTitle.length * 6),\n        //     y: height - 220,\n        //     size: 16,\n        //     font: primaryFont,\n        //     color: rgb(0, 0, 0),\n        // })\n        \n        // Completion date - positioned for new template\n        page.drawText(completionDate, {\n            x: centerX - 40,\n            y: height - 450,\n            size: 12,\n            font: primaryFont,\n            color: rgb(0, 0, 0),\n        })\n        \n        // Certificate number (removed - not needed in new template)\n        // page.drawText(`Certificate Number: ${certificateNumber}`, {\n        //     x: centerX - 100,\n        //     y: height - 300,\n        //     size: 12,\n        //     font: primaryFont,\n        //     color: rgb(0.5, 0.5, 0.5),\n        // })\n        \n        // Author name (removed - not needed in new template)\n        // if (authorName) {\n        //     page.drawText(`Author: ${authorName}`, {\n        //         x: centerX - 60,\n        //         y: height - 340,\n        //         size: 14,\n        //         font: primaryFont,\n        //         color: rgb(0, 0, 0),\n        //     })\n        // }\n        \n        // Set document metadata\n        pdfDoc.setTitle(`Certificate of Completion - ${studentName}`)\n        pdfDoc.setAuthor('LMS System')\n        pdfDoc.setSubject(`Certificate for ${courseTitle}`)\n        pdfDoc.setKeywords(['certificate', 'completion', 'course', 'education'])\n        pdfDoc.setCreationDate(new Date())\n        \n        console.log('PDF created successfully, generating blob...')\n        \n        // Generate PDF bytes\n        const pdfBytes = await pdfDoc.save()\n        \n        console.log('PDF created successfully, size:', pdfBytes.length)\n        \n        // Return the Uint8Array directly - the calling code can convert to blob if needed\n        return pdfBytes\n        \n    } catch (error) {\n        console.error('Error in createPDF:', error)\n        console.error('Error type:', typeof error)\n        console.error('Error constructor:', error?.constructor?.name)\n        console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace')\n        console.error('Error message:', error instanceof Error ? error.message : String(error))\n        \n        // Try to get more details about the error\n        if (error && typeof error === 'object') {\n            console.error('Error keys:', Object.keys(error))\n            console.error('Error properties:', Object.getOwnPropertyNames(error))\n        }\n        \n        throw error\n    }\n}"],"names":["PDFDocument","StandardFonts","rgb","fontkit","createPDF","studentName","courseTitle","completionDate","certificateNumber","templateImage","fontFamily","authorName","console","log","Error","pdfDoc","create","registerFontkit","page","addPage","primaryFont","boldFont","toLowerCase","getGoogleFontUrl","fontName","fontMap","fontUrl","boldFontUrl","fontResponse","fetch","ok","status","statusText","fontBytes","arrayBuffer","embedFont","boldFontResponse","boldFontBytes","fontError","warn","Helvetica","HelveticaBold","poppinsUrl","poppinsBoldUrl","poppinsError","message","String","stack","undefined","width","height","getSize","imageResponse","imageBytes","image","includes","embedJpg","embedPng","imageDims","scaleToFit","drawImage","x","y","imageError","centerX","drawText","length","size","font","color","setTitle","setAuthor","setSubject","setKeywords","setCreationDate","Date","pdfBytes","save","error","constructor","name","Object","keys","getOwnPropertyNames"],"mappings":"AAAA,SAASA,WAAW,EAAEC,aAAa,EAAEC,GAAG,QAAQ,UAAS;AACzD,OAAOC,aAAa,mBAAkB;AAYtC,OAAO,MAAMC,YAAY,OAAO,EAC5BC,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,UAAU,EACVC,UAAU,EACG;IACbC,QAAQC,GAAG,CAAC,+BAA+B;QACvCR;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;IACJ;IAEA,kBAAkB;IAClB,IAAI,CAACN,eAAe,CAACC,aAAa;QAC9B,MAAM,IAAIQ,MAAM;IACpB;IAEA,IAAI;QACAF,QAAQC,GAAG,CAAC;QAEZ,4BAA4B;QAC5B,MAAME,SAAS,MAAMf,YAAYgB,MAAM;QAEvC,2CAA2C;QAC3CD,OAAOE,eAAe,CAACd;QAEvB,gDAAgD;QAChD,MAAMe,OAAOH,OAAOI,OAAO,CAAC;YAAC;YAAK;SAAI,EAAE,0BAA0B;;QAElE,+DAA+D;QAC/D,IAAIC,aAAaC;QAEjB,IAAIX,cAAcA,WAAWY,WAAW,OAAO,WAAW;YACtD,IAAI;gBACAV,QAAQC,GAAG,CAAC,CAAC,qBAAqB,EAAEH,YAAY;gBAEhD,wEAAwE;gBACxE,MAAMa,mBAAmB,CAACC;oBACtB,MAAMC,UAAqC;wBACvC,WAAW;wBACX,gBAAgB;wBAChB,UAAU;wBACV,eAAe;wBACf,YAAY;wBACZ,iBAAiB;wBACjB,QAAQ;wBACR,aAAa;wBACb,cAAc;wBACd,mBAAmB;oBACvB;oBACA,OAAOA,OAAO,CAACD,SAASF,WAAW,GAAG,IAAI;gBAC9C;gBAEA,MAAMI,UAAUH,iBAAiBb;gBACjC,MAAMiB,cAAcJ,iBAAiB,GAAGb,WAAW,KAAK,CAAC;gBAEzD,IAAIgB,SAAS;oBACT,kCAAkC;oBAClCd,QAAQC,GAAG,CAAC,CAAC,SAAS,EAAEH,WAAW,mBAAmB,CAAC,EAAEgB;oBACzD,MAAME,eAAe,MAAMC,MAAMH;oBACjC,IAAI,CAACE,aAAaE,EAAE,EAAE;wBAClB,MAAM,IAAIhB,MAAM,CAAC,gBAAgB,EAAEJ,WAAW,eAAe,EAAEkB,aAAaG,MAAM,CAAC,CAAC,EAAEH,aAAaI,UAAU,EAAE;oBACnH;oBACA,MAAMC,YAAY,MAAML,aAAaM,WAAW;oBAChDd,cAAc,MAAML,OAAOoB,SAAS,CAACF;oBACrCrB,QAAQC,GAAG,CAAC,CAAC,iCAAiC,EAAEH,YAAY;gBAChE,OAAO;oBACH,MAAM,IAAII,MAAM,CAAC,KAAK,EAAEJ,WAAW,kCAAkC,CAAC;gBAC1E;gBAEA,IAAIiB,aAAa;oBACb,mCAAmC;oBACnCf,QAAQC,GAAG,CAAC,CAAC,SAAS,EAAEH,WAAW,gBAAgB,CAAC,EAAEiB;oBACtD,MAAMS,mBAAmB,MAAMP,MAAMF;oBACrC,IAAI,CAACS,iBAAiBN,EAAE,EAAE;wBACtB,MAAM,IAAIhB,MAAM,CAAC,gBAAgB,EAAEJ,WAAW,YAAY,EAAE0B,iBAAiBL,MAAM,CAAC,CAAC,EAAEK,iBAAiBJ,UAAU,EAAE;oBACxH;oBACA,MAAMK,gBAAgB,MAAMD,iBAAiBF,WAAW;oBACxDb,WAAW,MAAMN,OAAOoB,SAAS,CAACE;oBAClCzB,QAAQC,GAAG,CAAC,CAAC,8CAA8C,EAAEH,YAAY;gBAC7E,OAAO;oBACH,yDAAyD;oBACzDW,WAAWD;oBACXR,QAAQC,GAAG,CAAC,CAAC,0BAA0B,EAAEH,WAAW,kCAAkC,CAAC;gBAC3F;YAEJ,EAAE,OAAO4B,WAAW;gBAChB1B,QAAQ2B,IAAI,CAAC,CAAC,2BAA2B,EAAE7B,WAAW,4BAA4B,CAAC,EAAE4B;gBACrFlB,cAAc,MAAML,OAAOoB,SAAS,CAAClC,cAAcuC,SAAS;gBAC5DnB,WAAW,MAAMN,OAAOoB,SAAS,CAAClC,cAAcwC,aAAa;YACjE;QACJ,OAAO;YACH,8DAA8D;YAC9D,IAAI;gBACA7B,QAAQC,GAAG,CAAC;gBACZ,MAAM6B,aAAa;gBACnB,MAAMC,iBAAiB;gBAEvB/B,QAAQC,GAAG,CAAC,uCAAuC6B;gBACnD,MAAMd,eAAe,MAAMC,MAAMa;gBACjC,IAAI,CAACd,aAAaE,EAAE,EAAE;oBAClB,MAAM,IAAIhB,MAAM,CAAC,sCAAsC,EAAEc,aAAaG,MAAM,CAAC,CAAC,EAAEH,aAAaI,UAAU,EAAE;gBAC7G;gBACA,MAAMC,YAAY,MAAML,aAAaM,WAAW;gBAChDd,cAAc,MAAML,OAAOoB,SAAS,CAACF;gBACrCrB,QAAQC,GAAG,CAAC;gBAEZD,QAAQC,GAAG,CAAC,oCAAoC8B;gBAChD,MAAMP,mBAAmB,MAAMP,MAAMc;gBACrC,IAAI,CAACP,iBAAiBN,EAAE,EAAE;oBACtB,MAAM,IAAIhB,MAAM,CAAC,mCAAmC,EAAEsB,iBAAiBL,MAAM,CAAC,CAAC,EAAEK,iBAAiBJ,UAAU,EAAE;gBAClH;gBACA,MAAMK,gBAAgB,MAAMD,iBAAiBF,WAAW;gBACxDb,WAAW,MAAMN,OAAOoB,SAAS,CAACE;gBAClCzB,QAAQC,GAAG,CAAC;gBAEZD,QAAQC,GAAG,CAAC;YAChB,EAAE,OAAO+B,cAAc;gBACnBhC,QAAQ2B,IAAI,CAAC,sDAAsDK;gBACnEhC,QAAQ2B,IAAI,CAAC,0BAA0B;oBACnCM,SAASD,wBAAwB9B,QAAQ8B,aAAaC,OAAO,GAAGC,OAAOF;oBACvEG,OAAOH,wBAAwB9B,QAAQ8B,aAAaG,KAAK,GAAGC;gBAChE;gBACA5B,cAAc,MAAML,OAAOoB,SAAS,CAAClC,cAAcuC,SAAS;gBAC5DnB,WAAW,MAAMN,OAAOoB,SAAS,CAAClC,cAAcwC,aAAa;gBAC7D7B,QAAQC,GAAG,CAAC;YAChB;QACJ;QAEA,sBAAsB;QACtB,MAAM,EAAEoC,KAAK,EAAEC,MAAM,EAAE,GAAGhC,KAAKiC,OAAO;QAEtC,mCAAmC;QACnC,IAAI1C,eAAe;YACf,IAAI;gBACAG,QAAQC,GAAG,CAAC,2BAA2BJ;gBACvC,MAAM2C,gBAAgB,MAAMvB,MAAMpB;gBAClC,MAAM4C,aAAa,MAAMD,cAAclB,WAAW;gBAElD,6CAA6C;gBAC7C,IAAIoB;gBACJ,IAAI7C,cAAca,WAAW,GAAGiC,QAAQ,CAAC,WAAW9C,cAAca,WAAW,GAAGiC,QAAQ,CAAC,UAAU;oBAC/FD,QAAQ,MAAMvC,OAAOyC,QAAQ,CAACH;gBAClC,OAAO,IAAI5C,cAAca,WAAW,GAAGiC,QAAQ,CAAC,SAAS;oBACrDD,QAAQ,MAAMvC,OAAO0C,QAAQ,CAACJ;gBAClC,OAAO;oBACH,0BAA0B;oBAC1B,IAAI;wBACAC,QAAQ,MAAMvC,OAAOyC,QAAQ,CAACH;oBAClC,EAAE,OAAM;wBACJC,QAAQ,MAAMvC,OAAO0C,QAAQ,CAACJ;oBAClC;gBACJ;gBAEA,0BAA0B;gBAC1B,MAAMK,YAAYJ,MAAMK,UAAU,CAACV,OAAOC;gBAE1C,+BAA+B;gBAC/BhC,KAAK0C,SAAS,CAACN,OAAO;oBAClBO,GAAG,AAACZ,CAAAA,QAAQS,UAAUT,KAAK,AAAD,IAAK;oBAC/Ba,GAAG,AAACZ,CAAAA,SAASQ,UAAUR,MAAM,AAAD,IAAK;oBACjCD,OAAOS,UAAUT,KAAK;oBACtBC,QAAQQ,UAAUR,MAAM;gBAC5B;gBAEAtC,QAAQC,GAAG,CAAC;YAChB,EAAE,OAAOkD,YAAY;gBACjBnD,QAAQ2B,IAAI,CAAC,yDAAyDwB;YAC1E;QACJ;QAEA,uFAAuF;QACvF,MAAMC,UAAUf,QAAQ;QAExB,iEAAiE;QACjE,+CAA+C;QAC/C,wBAAwB;QACxB,uBAAuB;QACvB,gBAAgB;QAChB,sBAAsB;QACtB,2BAA2B;QAC3B,KAAK;QAEL,6CAA6C;QAC7C/B,KAAK+C,QAAQ,CAAC5D,aAAa;YACvBwD,GAAGG,UAAW3D,YAAY6D,MAAM,GAAG;YACnCJ,GAAGZ,SAAS;YACZiB,MAAM;YACNC,MAAM/C;YACNgD,OAAOnE,IAAI,KAAK,KAAK;QACzB;QAEA,4DAA4D;QAC5D,+BAA+B;QAC/B,6CAA6C;QAC7C,uBAAuB;QACvB,gBAAgB;QAChB,yBAAyB;QACzB,2BAA2B;QAC3B,KAAK;QAEL,gDAAgD;QAChDgB,KAAK+C,QAAQ,CAAC1D,gBAAgB;YAC1BsD,GAAGG,UAAU;YACbF,GAAGZ,SAAS;YACZiB,MAAM;YACNC,MAAMhD;YACNiD,OAAOnE,IAAI,GAAG,GAAG;QACrB;QAEA,4DAA4D;QAC5D,8DAA8D;QAC9D,wBAAwB;QACxB,uBAAuB;QACvB,gBAAgB;QAChB,yBAAyB;QACzB,iCAAiC;QACjC,KAAK;QAEL,qDAAqD;QACrD,oBAAoB;QACpB,+CAA+C;QAC/C,2BAA2B;QAC3B,2BAA2B;QAC3B,oBAAoB;QACpB,6BAA6B;QAC7B,+BAA+B;QAC/B,SAAS;QACT,IAAI;QAEJ,wBAAwB;QACxBa,OAAOuD,QAAQ,CAAC,CAAC,4BAA4B,EAAEjE,aAAa;QAC5DU,OAAOwD,SAAS,CAAC;QACjBxD,OAAOyD,UAAU,CAAC,CAAC,gBAAgB,EAAElE,aAAa;QAClDS,OAAO0D,WAAW,CAAC;YAAC;YAAe;YAAc;YAAU;SAAY;QACvE1D,OAAO2D,eAAe,CAAC,IAAIC;QAE3B/D,QAAQC,GAAG,CAAC;QAEZ,qBAAqB;QACrB,MAAM+D,WAAW,MAAM7D,OAAO8D,IAAI;QAElCjE,QAAQC,GAAG,CAAC,mCAAmC+D,SAASV,MAAM;QAE9D,kFAAkF;QAClF,OAAOU;IAEX,EAAE,OAAOE,OAAO;QACZlE,QAAQkE,KAAK,CAAC,uBAAuBA;QACrClE,QAAQkE,KAAK,CAAC,eAAe,OAAOA;QACpClE,QAAQkE,KAAK,CAAC,sBAAsBA,OAAOC,aAAaC;QACxDpE,QAAQkE,KAAK,CAAC,gBAAgBA,iBAAiBhE,QAAQgE,MAAM/B,KAAK,GAAG;QACrEnC,QAAQkE,KAAK,CAAC,kBAAkBA,iBAAiBhE,QAAQgE,MAAMjC,OAAO,GAAGC,OAAOgC;QAEhF,0CAA0C;QAC1C,IAAIA,SAAS,OAAOA,UAAU,UAAU;YACpClE,QAAQkE,KAAK,CAAC,eAAeG,OAAOC,IAAI,CAACJ;YACzClE,QAAQkE,KAAK,CAAC,qBAAqBG,OAAOE,mBAAmB,CAACL;QAClE;QAEA,MAAMA;IACV;AACJ,EAAC"}