{"version":3,"sources":["../../src/fields/slug.ts"],"sourcesContent":["import type { TextField, CheckboxField } from 'payload'\nimport { formatSlugHook } from '../ui/SlugInput/formatSlug.js'\n\n/**\n * Overrides for slug and checkbox fields\n */\ntype Overrides = {\n  slugOverrides?: Partial<TextField>\n  checkboxOverrides?: Partial<CheckboxField>\n}\n\n/**\n * Type definition for the slug field function\n */\ntype Slug = (fieldToUse?: string, overrides?: Overrides) => [TextField, CheckboxField]\n\n/**\n * Creates a slug field with automatic generation from a source field\n * @param fieldToUse - The field name to use as the source for slug generation\n * @param overrides - Configuration overrides for slug and checkbox fields\n * @returns A tuple containing the slug field and its associated checkbox field\n */\nexport const slugField: Slug = (fieldToUse = 'title', overrides = {}) => {\n  const { slugOverrides, checkboxOverrides } = overrides\n\n  const checkBoxField: CheckboxField = {\n    name: 'slugLock',\n    type: 'checkbox',\n    defaultValue: true,\n    admin: {\n      hidden: true,\n      position: 'sidebar',\n    },\n    ...checkboxOverrides,\n  }\n\n  // @ts-expect-error - ts mismatch Partial<TextField> with TextField\n  const slugField: TextField = {\n    name: 'slug',\n    type: 'text',\n    index: true,\n    label: 'Slug',\n    ...(slugOverrides || {}),\n    hooks: {\n      // Kept this in for hook or API based updates\n      beforeValidate: [formatSlugHook(fieldToUse)],\n    },\n    admin: {\n      position: 'sidebar',\n      ...(slugOverrides?.admin || {}),\n      components: {\n        Field: {\n          path: '@littledash/plugin-lms/ui/SlugInput#SlugInput',\n          clientProps: {\n            fieldToUse,\n            checkboxFieldPath: checkBoxField.name,\n          },\n        },\n      },\n    },\n  }\n\n  return [slugField, checkBoxField]\n}\n"],"names":["formatSlugHook","slugField","fieldToUse","overrides","slugOverrides","checkboxOverrides","checkBoxField","name","type","defaultValue","admin","hidden","position","index","label","hooks","beforeValidate","components","Field","path","clientProps","checkboxFieldPath"],"mappings":"AACA,SAASA,cAAc,QAAQ,gCAA+B;AAe9D;;;;;CAKC,GACD,OAAO,MAAMC,YAAkB,CAACC,aAAa,OAAO,EAAEC,YAAY,CAAC,CAAC;IAClE,MAAM,EAAEC,aAAa,EAAEC,iBAAiB,EAAE,GAAGF;IAE7C,MAAMG,gBAA+B;QACnCC,MAAM;QACNC,MAAM;QACNC,cAAc;QACdC,OAAO;YACLC,QAAQ;YACRC,UAAU;QACZ;QACA,GAAGP,iBAAiB;IACtB;IAEA,mEAAmE;IACnE,MAAMJ,YAAuB;QAC3BM,MAAM;QACNC,MAAM;QACNK,OAAO;QACPC,OAAO;QACP,GAAIV,iBAAiB,CAAC,CAAC;QACvBW,OAAO;YACL,6CAA6C;YAC7CC,gBAAgB;gBAAChB,eAAeE;aAAY;QAC9C;QACAQ,OAAO;YACLE,UAAU;YACV,GAAIR,eAAeM,SAAS,CAAC,CAAC;YAC9BO,YAAY;gBACVC,OAAO;oBACLC,MAAM;oBACNC,aAAa;wBACXlB;wBACAmB,mBAAmBf,cAAcC,IAAI;oBACvC;gBACF;YACF;QACF;IACF;IAEA,OAAO;QAACN;QAAWK;KAAc;AACnC,EAAC"}