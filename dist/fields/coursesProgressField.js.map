{"version":3,"sources":["../../src/fields/coursesProgressField.ts"],"sourcesContent":["import type { ArrayField } from 'payload'\n\n/**\n * Props for the roles field configuration\n */\ntype Props = {\n  coursesCollectionSlug?: string\n  lessonsCollectionSlug?: string\n  quizzesCollectionSlug?: string\n  overrides?: Partial<ArrayField>\n}\n\n/**\n * Creates a field for the courses progress\n * @param props - Configuration overrides for the field\n * @returns A configured field for the courses progress\n */\nexport const coursesProgressField: (props: Props) => ArrayField = ({\n  coursesCollectionSlug = 'courses',\n  lessonsCollectionSlug = 'lessons',\n  quizzesCollectionSlug = 'quizzes',\n  overrides,\n}) => {\n  const field: ArrayField = {\n    name: 'coursesProgress',\n    type: 'array',\n    fields: [\n      {\n        name: 'course',\n        type: 'relationship',\n        relationTo: coursesCollectionSlug,\n        hasMany: false,\n        required: true,\n        admin: {\n          allowCreate: false,\n          allowEdit: false,\n        },\n      },\n      {\n        name: 'completed',\n        type: 'checkbox',\n        defaultValue: false,\n      },\n      {\n        name: 'completedAt',\n        type: 'date',\n        admin: {\n          condition: (_, siblingData) => siblingData.completed === true,\n        },\n      },\n      {\n        name: 'completedLessons',\n        type: 'array',\n        fields: [\n          {\n            name: 'lesson',\n            type: 'relationship',\n            relationTo: lessonsCollectionSlug,\n            hasMany: false,\n            required: true,\n            filterOptions: ({ siblingData, data }) => {\n            \n              // @ts-ignore\n              return {\n                course: { \n                  // @ts-expect-error\n                  equals: siblingData.course \n                }\n              }\n            },\n          },\n          {\n            name: 'completedAt',\n            type: 'date',\n            required: true,\n          },\n        ],\n      },\n      {\n        name: 'completedQuizzes',\n        type: 'array',\n        fields: [\n          {\n            name: 'quiz',\n            type: 'relationship',\n            relationTo: quizzesCollectionSlug,\n            hasMany: false,\n            required: true,\n          },\n          {\n            name: 'score',\n            type: 'number',\n            required: true,\n          },\n          {\n            name: 'completedAt',\n            type: 'date',\n            required: true,\n          },\n        ],\n      },\n    ],\n    ...overrides,\n    admin: {\n      ...overrides?.admin,\n    },\n  }\n\n  return field\n}\n"],"names":["coursesProgressField","coursesCollectionSlug","lessonsCollectionSlug","quizzesCollectionSlug","overrides","field","name","type","fields","relationTo","hasMany","required","admin","allowCreate","allowEdit","defaultValue","condition","_","siblingData","completed","filterOptions","data","course","equals"],"mappings":"AAYA;;;;CAIC,GACD,OAAO,MAAMA,uBAAqD,CAAC,EACjEC,wBAAwB,SAAS,EACjCC,wBAAwB,SAAS,EACjCC,wBAAwB,SAAS,EACjCC,SAAS,EACV;IACC,MAAMC,QAAoB;QACxBC,MAAM;QACNC,MAAM;QACNC,QAAQ;YACN;gBACEF,MAAM;gBACNC,MAAM;gBACNE,YAAYR;gBACZS,SAAS;gBACTC,UAAU;gBACVC,OAAO;oBACLC,aAAa;oBACbC,WAAW;gBACb;YACF;YACA;gBACER,MAAM;gBACNC,MAAM;gBACNQ,cAAc;YAChB;YACA;gBACET,MAAM;gBACNC,MAAM;gBACNK,OAAO;oBACLI,WAAW,CAACC,GAAGC,cAAgBA,YAAYC,SAAS,KAAK;gBAC3D;YACF;YACA;gBACEb,MAAM;gBACNC,MAAM;gBACNC,QAAQ;oBACN;wBACEF,MAAM;wBACNC,MAAM;wBACNE,YAAYP;wBACZQ,SAAS;wBACTC,UAAU;wBACVS,eAAe,CAAC,EAAEF,WAAW,EAAEG,IAAI,EAAE;4BAEnC,aAAa;4BACb,OAAO;gCACLC,QAAQ;oCACN,mBAAmB;oCACnBC,QAAQL,YAAYI,MAAM;gCAC5B;4BACF;wBACF;oBACF;oBACA;wBACEhB,MAAM;wBACNC,MAAM;wBACNI,UAAU;oBACZ;iBACD;YACH;YACA;gBACEL,MAAM;gBACNC,MAAM;gBACNC,QAAQ;oBACN;wBACEF,MAAM;wBACNC,MAAM;wBACNE,YAAYN;wBACZO,SAAS;wBACTC,UAAU;oBACZ;oBACA;wBACEL,MAAM;wBACNC,MAAM;wBACNI,UAAU;oBACZ;oBACA;wBACEL,MAAM;wBACNC,MAAM;wBACNI,UAAU;oBACZ;iBACD;YACH;SACD;QACD,GAAGP,SAAS;QACZQ,OAAO;YACL,GAAGR,WAAWQ,KAAK;QACrB;IACF;IAEA,OAAOP;AACT,EAAC"}