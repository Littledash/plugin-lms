{"version":3,"sources":["../../src/plugin/index.ts"],"sourcesContent":["import type { Config } from 'payload'\n\nimport type { LMSPluginConfig, SanitizedLMSPluginConfig } from '../types.js'\nimport { addressesCollection } from '../addresses/addressesCollection.js'\nimport { coursesCollection } from '../courses/coursesCollection.js'\nimport { lessonsCollection } from '../lessons/lessonsCollection.js'\nimport { quizzesCollection } from '../quizzes/quizzesCollection.js'\nimport { categoriesCollection } from '../categoires/categoriesCollection.js'\nimport { tagsCollection } from '../tags/tagsCollection.js'\nimport { certificatesCollection } from '../certificates/certificatesCollection.js'\nimport { questionsCollection } from '../questions/questionsCollection.js'\nimport { topicsCollection } from '../topics/topicsCollection.js'\nimport { defaultAddressFields } from '../fields/defaultAddressFields.js'\nimport { sanitizePluginConfig } from '../utilities/sanitizePluginConfig.js'\nimport { getCollectionSlugMap } from '../utilities/getCollectionSlugMap.js'\nimport { studentsCollection } from '../students/studentsCollection.js'\nimport { defaultStudentFields } from '../fields/defaultStudentFields.js'\n\nexport const lmsPlugin =\n  (pluginConfig?: LMSPluginConfig) =>\n  (incomingConfig: Config): Config => {\n    if (!pluginConfig) {\n      return incomingConfig\n    }\n\n    const sanitizedPluginConfig = sanitizePluginConfig({ pluginConfig })\n\n    /**\n     * Used to keep track of the slugs of collections in case they are overridden by the user.\n     */\n    const collectionSlugMap = getCollectionSlugMap({ sanitizedPluginConfig })\n\n    // Ensure collections exists\n    if (!incomingConfig.collections) {\n      incomingConfig.collections = []\n    }\n\n    const currenciesConfig: Required<SanitizedLMSPluginConfig['currencies']> =\n      sanitizedPluginConfig.currencies\n\n    let studentsFields\n\n    if (sanitizedPluginConfig.students) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.students === 'object'\n          ? sanitizedPluginConfig.students.studentsCollection\n          : undefined\n\n      studentsFields = sanitizedPluginConfig.students.studentsFields\n      console.log('studentsFields', studentsFields)\n\n      if (studentsFields) {\n        const students = studentsCollection({\n          studentsCollectionSlug: collectionSlugMap.students,\n          studentsFields: studentsFields({ defaultFields: defaultStudentFields() }),\n          overrides: collectionOverrides,\n        })\n\n        incomingConfig.collections.push(students)\n      }\n    }\n\n    let addressFields\n\n    if (sanitizedPluginConfig.addresses) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.addresses === 'object'\n          ? sanitizedPluginConfig.addresses.addressesCollection\n          : undefined\n\n      addressFields = sanitizedPluginConfig.addresses.addressFields\n\n      const supportedCountries = sanitizedPluginConfig.addresses.supportedCountries\n\n      const addresses = addressesCollection({\n        addressFields: addressFields({ defaultFields: defaultAddressFields() }),\n        studentsCollectionSlug: collectionSlugMap.students,\n        overrides: collectionOverrides,\n        supportedCountries,\n      })\n\n      incomingConfig.collections.push(addresses)\n    }\n\n    if (sanitizedPluginConfig.certificates) {\n      const certificates = certificatesCollection({\n        mediaCollectionSlug: collectionSlugMap.media,\n        studentsCollectionSlug: collectionSlugMap.students,\n      })\n      incomingConfig.collections.push(certificates)\n    }\n\n    if (sanitizedPluginConfig.courses) {\n      const courses = coursesCollection({\n        categoriesCollectionSlug: collectionSlugMap.categories,\n        certificatesCollectionSlug: collectionSlugMap.certificates,\n        currenciesConfig,\n        lessonsCollectionSlug: collectionSlugMap.lessons,\n        mediaCollectionSlug: collectionSlugMap.media,\n        studentsCollectionSlug: collectionSlugMap.students,\n        tagsCollectionSlug: collectionSlugMap.tags,\n      })\n      incomingConfig.collections.push(courses)\n    }\n\n    if (sanitizedPluginConfig.lessons) {\n      const lessons = lessonsCollection({\n        coursesCollectionSlug: collectionSlugMap.courses,\n        mediaCollectionSlug: collectionSlugMap.media,\n        quizzesCollectionSlug: collectionSlugMap.quizzes,\n        categoriesCollectionSlug: collectionSlugMap.categories,\n        studentsCollectionSlug: collectionSlugMap.students,\n      })\n      incomingConfig.collections.push(lessons)\n    }\n\n    if (sanitizedPluginConfig.topics) {\n      const topics = topicsCollection({\n        coursesCollectionSlug: collectionSlugMap.courses,\n        mediaCollectionSlug: collectionSlugMap.media,\n        quizzesCollectionSlug: collectionSlugMap.quizzes,\n        lessonsCollectionSlug: collectionSlugMap.lessons,\n      })\n      incomingConfig.collections.push(topics)\n    }\n\n    if (sanitizedPluginConfig.quizzes) {\n      const quizzes = quizzesCollection({\n        mediaCollectionSlug: collectionSlugMap.media,\n        studentsCollectionSlug: collectionSlugMap.students,\n      })\n      incomingConfig.collections.push(quizzes)\n    }\n\n    if (sanitizedPluginConfig.categories) {\n      const categories = categoriesCollection()\n      incomingConfig.collections.push(categories)\n    }\n\n    if (sanitizedPluginConfig.tags) {\n      const tags = tagsCollection()\n      incomingConfig.collections.push(tags)\n    }\n\n    if (sanitizedPluginConfig.questions) {\n      const questions = questionsCollection({\n        studentsCollectionSlug: collectionSlugMap.students,\n      })\n      incomingConfig.collections.push(questions)\n    }\n\n    return {\n      ...incomingConfig,\n    }\n  }\n"],"names":["addressesCollection","coursesCollection","lessonsCollection","quizzesCollection","categoriesCollection","tagsCollection","certificatesCollection","questionsCollection","topicsCollection","defaultAddressFields","sanitizePluginConfig","getCollectionSlugMap","studentsCollection","defaultStudentFields","lmsPlugin","pluginConfig","incomingConfig","sanitizedPluginConfig","collectionSlugMap","collections","currenciesConfig","currencies","studentsFields","students","collectionOverrides","undefined","console","log","studentsCollectionSlug","defaultFields","overrides","push","addressFields","addresses","supportedCountries","certificates","mediaCollectionSlug","media","courses","categoriesCollectionSlug","categories","certificatesCollectionSlug","lessonsCollectionSlug","lessons","tagsCollectionSlug","tags","coursesCollectionSlug","quizzesCollectionSlug","quizzes","topics","questions"],"mappings":"AAGA,SAASA,mBAAmB,QAAQ,sCAAqC;AACzE,SAASC,iBAAiB,QAAQ,kCAAiC;AACnE,SAASC,iBAAiB,QAAQ,kCAAiC;AACnE,SAASC,iBAAiB,QAAQ,kCAAiC;AACnE,SAASC,oBAAoB,QAAQ,wCAAuC;AAC5E,SAASC,cAAc,QAAQ,4BAA2B;AAC1D,SAASC,sBAAsB,QAAQ,4CAA2C;AAClF,SAASC,mBAAmB,QAAQ,sCAAqC;AACzE,SAASC,gBAAgB,QAAQ,gCAA+B;AAChE,SAASC,oBAAoB,QAAQ,oCAAmC;AACxE,SAASC,oBAAoB,QAAQ,uCAAsC;AAC3E,SAASC,oBAAoB,QAAQ,uCAAsC;AAC3E,SAASC,kBAAkB,QAAQ,oCAAmC;AACtE,SAASC,oBAAoB,QAAQ,oCAAmC;AAExE,OAAO,MAAMC,YACX,CAACC,eACD,CAACC;QACC,IAAI,CAACD,cAAc;YACjB,OAAOC;QACT;QAEA,MAAMC,wBAAwBP,qBAAqB;YAAEK;QAAa;QAElE;;KAEC,GACD,MAAMG,oBAAoBP,qBAAqB;YAAEM;QAAsB;QAEvE,4BAA4B;QAC5B,IAAI,CAACD,eAAeG,WAAW,EAAE;YAC/BH,eAAeG,WAAW,GAAG,EAAE;QACjC;QAEA,MAAMC,mBACJH,sBAAsBI,UAAU;QAElC,IAAIC;QAEJ,IAAIL,sBAAsBM,QAAQ,EAAE;YAClC,MAAMC,sBACJ,OAAOP,sBAAsBM,QAAQ,KAAK,WACtCN,sBAAsBM,QAAQ,CAACX,kBAAkB,GACjDa;YAENH,iBAAiBL,sBAAsBM,QAAQ,CAACD,cAAc;YAC9DI,QAAQC,GAAG,CAAC,kBAAkBL;YAE9B,IAAIA,gBAAgB;gBAClB,MAAMC,WAAWX,mBAAmB;oBAClCgB,wBAAwBV,kBAAkBK,QAAQ;oBAClDD,gBAAgBA,eAAe;wBAAEO,eAAehB;oBAAuB;oBACvEiB,WAAWN;gBACb;gBAEAR,eAAeG,WAAW,CAACY,IAAI,CAACR;YAClC;QACF;QAEA,IAAIS;QAEJ,IAAIf,sBAAsBgB,SAAS,EAAE;YACnC,MAAMT,sBACJ,OAAOP,sBAAsBgB,SAAS,KAAK,WACvChB,sBAAsBgB,SAAS,CAACjC,mBAAmB,GACnDyB;YAENO,gBAAgBf,sBAAsBgB,SAAS,CAACD,aAAa;YAE7D,MAAME,qBAAqBjB,sBAAsBgB,SAAS,CAACC,kBAAkB;YAE7E,MAAMD,YAAYjC,oBAAoB;gBACpCgC,eAAeA,cAAc;oBAAEH,eAAepB;gBAAuB;gBACrEmB,wBAAwBV,kBAAkBK,QAAQ;gBAClDO,WAAWN;gBACXU;YACF;YAEAlB,eAAeG,WAAW,CAACY,IAAI,CAACE;QAClC;QAEA,IAAIhB,sBAAsBkB,YAAY,EAAE;YACtC,MAAMA,eAAe7B,uBAAuB;gBAC1C8B,qBAAqBlB,kBAAkBmB,KAAK;gBAC5CT,wBAAwBV,kBAAkBK,QAAQ;YACpD;YACAP,eAAeG,WAAW,CAACY,IAAI,CAACI;QAClC;QAEA,IAAIlB,sBAAsBqB,OAAO,EAAE;YACjC,MAAMA,UAAUrC,kBAAkB;gBAChCsC,0BAA0BrB,kBAAkBsB,UAAU;gBACtDC,4BAA4BvB,kBAAkBiB,YAAY;gBAC1Df;gBACAsB,uBAAuBxB,kBAAkByB,OAAO;gBAChDP,qBAAqBlB,kBAAkBmB,KAAK;gBAC5CT,wBAAwBV,kBAAkBK,QAAQ;gBAClDqB,oBAAoB1B,kBAAkB2B,IAAI;YAC5C;YACA7B,eAAeG,WAAW,CAACY,IAAI,CAACO;QAClC;QAEA,IAAIrB,sBAAsB0B,OAAO,EAAE;YACjC,MAAMA,UAAUzC,kBAAkB;gBAChC4C,uBAAuB5B,kBAAkBoB,OAAO;gBAChDF,qBAAqBlB,kBAAkBmB,KAAK;gBAC5CU,uBAAuB7B,kBAAkB8B,OAAO;gBAChDT,0BAA0BrB,kBAAkBsB,UAAU;gBACtDZ,wBAAwBV,kBAAkBK,QAAQ;YACpD;YACAP,eAAeG,WAAW,CAACY,IAAI,CAACY;QAClC;QAEA,IAAI1B,sBAAsBgC,MAAM,EAAE;YAChC,MAAMA,SAASzC,iBAAiB;gBAC9BsC,uBAAuB5B,kBAAkBoB,OAAO;gBAChDF,qBAAqBlB,kBAAkBmB,KAAK;gBAC5CU,uBAAuB7B,kBAAkB8B,OAAO;gBAChDN,uBAAuBxB,kBAAkByB,OAAO;YAClD;YACA3B,eAAeG,WAAW,CAACY,IAAI,CAACkB;QAClC;QAEA,IAAIhC,sBAAsB+B,OAAO,EAAE;YACjC,MAAMA,UAAU7C,kBAAkB;gBAChCiC,qBAAqBlB,kBAAkBmB,KAAK;gBAC5CT,wBAAwBV,kBAAkBK,QAAQ;YACpD;YACAP,eAAeG,WAAW,CAACY,IAAI,CAACiB;QAClC;QAEA,IAAI/B,sBAAsBuB,UAAU,EAAE;YACpC,MAAMA,aAAapC;YACnBY,eAAeG,WAAW,CAACY,IAAI,CAACS;QAClC;QAEA,IAAIvB,sBAAsB4B,IAAI,EAAE;YAC9B,MAAMA,OAAOxC;YACbW,eAAeG,WAAW,CAACY,IAAI,CAACc;QAClC;QAEA,IAAI5B,sBAAsBiC,SAAS,EAAE;YACnC,MAAMA,YAAY3C,oBAAoB;gBACpCqB,wBAAwBV,kBAAkBK,QAAQ;YACpD;YACAP,eAAeG,WAAW,CAACY,IAAI,CAACmB;QAClC;QAEA,OAAO;YACL,GAAGlC,cAAc;QACnB;IACF,EAAC"}