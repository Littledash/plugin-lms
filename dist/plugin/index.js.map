{"version":3,"sources":["../../src/plugin/index.ts"],"sourcesContent":["import type { Config } from 'payload'\n\nimport type { LMSPluginConfig, SanitizedLMSPluginConfig } from '../types.js'\nimport { addressesCollection } from '../addresses/addressesCollection.js'\nimport { coursesCollection } from '../courses/coursesCollection.js'\nimport { groupsCollection } from '../groups/groupsCollection.js'\nimport { lessonsCollection } from '../lessons/lessonsCollection.js'\nimport { quizzesCollection } from '../quizzes/quizzesCollection.js'\nimport { categoriesCollection } from '../categoires/categoriesCollection.js'\nimport { tagsCollection } from '../tags/tagsCollection.js'\nimport { certificatesCollection } from '../certificates/certificatesCollection.js'\nimport { questionsCollection } from '../questions/questionsCollection.js'\nimport { topicsCollection } from '../topics/topicsCollection.js'\nimport { defaultAddressFields } from '../fields/defaultAddressFields.js'\nimport { sanitizePluginConfig } from '../utilities/sanitizePluginConfig.js'\nimport { getCollectionSlugMap } from '../utilities/getCollectionSlugMap.js'\nimport { studentsCollection } from '../students/studentsCollection.js'\nimport { defaultStudentFields } from '../fields/defaultStudentFields.js'\nimport { completeLessonHandler } from '../endpoints/complete-lesson.js'\nimport { enrollHandler } from '../endpoints/enroll.js'\nimport { submitQuizHandler } from '../endpoints/submit-quiz.js'\nimport { completeCourseHandler } from '../endpoints/complete-course.js'\nimport { addCertificateToUserHandler } from '../endpoints/add-certificate-to-user.js'\nimport { addUserToGroupHandler } from '../endpoints/add-user-to-group.js'\nimport { fetchProgressHandler } from '../endpoints/fetch-progress.js'\nimport { generateCertificateHandler } from '../endpoints/generate-certificate.js'\n\nexport const lmsPlugin =\n  (pluginConfig?: LMSPluginConfig) =>\n  (incomingConfig: Config): Config => {\n    if (!pluginConfig) {\n      return incomingConfig\n    }\n\n    const sanitizedPluginConfig = sanitizePluginConfig({ pluginConfig })\n\n    /**\n     * Used to keep track of the slugs of collections in case they are overridden by the user.\n     */\n    const collectionSlugMap = getCollectionSlugMap({ sanitizedPluginConfig })\n\n    // Ensure collections exists\n    if (!incomingConfig.collections) {\n      incomingConfig.collections = []\n    }\n\n    const currenciesConfig: Required<SanitizedLMSPluginConfig['currencies']> =\n      sanitizedPluginConfig.currencies\n\n    let studentsFields\n\n    if (sanitizedPluginConfig.students) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.students === 'object'\n          ? sanitizedPluginConfig.students.studentsCollection\n          : undefined\n\n      studentsFields = sanitizedPluginConfig.students.studentsFields\n\n      if (studentsFields) {\n        const students = studentsCollection({\n          studentsCollectionSlug: collectionSlugMap.students,\n          studentsFields: studentsFields({ defaultFields: defaultStudentFields() }),\n          overrides: collectionOverrides,\n        })\n\n        incomingConfig.collections.push(students)\n      }\n    }\n\n    let addressFields\n\n    if (sanitizedPluginConfig.addresses) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.addresses === 'object'\n          ? sanitizedPluginConfig.addresses.addressesCollection\n          : undefined\n\n      addressFields = sanitizedPluginConfig.addresses.addressFields\n\n      const supportedCountries = sanitizedPluginConfig.addresses.supportedCountries\n\n      const addresses = addressesCollection({\n        addressFields: addressFields({ defaultFields: defaultAddressFields() }),\n        studentsCollectionSlug: collectionSlugMap.students,\n        overrides: collectionOverrides,\n        supportedCountries,\n      })\n\n      incomingConfig.collections.push(addresses)\n    }\n\n    if (sanitizedPluginConfig.certificates) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.certificates === 'object'\n          ? sanitizedPluginConfig.certificates.certificatesCollection\n          : undefined\n\n      const certificates = certificatesCollection({\n        mediaCollectionSlug: collectionSlugMap.media,\n        studentsCollectionSlug: collectionSlugMap.students,\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(certificates)\n    }\n\n    if (sanitizedPluginConfig.courses) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.courses === 'object'\n          ? sanitizedPluginConfig.courses.coursesCollection\n          : undefined\n\n      const courses = coursesCollection({\n        categoriesCollectionSlug: collectionSlugMap.categories,\n        certificatesCollectionSlug: collectionSlugMap.certificates,\n        currenciesConfig,\n        lessonsCollectionSlug: collectionSlugMap.lessons,\n        mediaCollectionSlug: collectionSlugMap.media,\n        studentsCollectionSlug: collectionSlugMap.students,\n        tagsCollectionSlug: collectionSlugMap.tags,\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(courses)\n    }\n\n    if (sanitizedPluginConfig.groups) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.groups === 'object'\n          ? sanitizedPluginConfig.groups.groupsCollection\n          : undefined\n\n      const groups = groupsCollection({\n        coursesCollectionSlug: collectionSlugMap.courses,\n        usersCollectionSlug: collectionSlugMap.students,\n        certificatesCollectionSlug: collectionSlugMap.certificates,\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(groups)\n    }\n\n    if (sanitizedPluginConfig.lessons) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.lessons === 'object'\n          ? sanitizedPluginConfig.lessons.lessonsCollection\n          : undefined\n\n      const lessons = lessonsCollection({\n        coursesCollectionSlug: collectionSlugMap.courses,\n        mediaCollectionSlug: collectionSlugMap.media,\n        quizzesCollectionSlug: collectionSlugMap.quizzes,\n        categoriesCollectionSlug: collectionSlugMap.categories,\n        studentsCollectionSlug: collectionSlugMap.students,\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(lessons)\n    }\n\n    if (sanitizedPluginConfig.topics) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.topics === 'object'\n          ? sanitizedPluginConfig.topics.topicsCollection\n          : undefined\n\n      const topics = topicsCollection({\n        coursesCollectionSlug: collectionSlugMap.courses,\n        mediaCollectionSlug: collectionSlugMap.media,\n        quizzesCollectionSlug: collectionSlugMap.quizzes,\n        lessonsCollectionSlug: collectionSlugMap.lessons,\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(topics)\n    }\n\n    if (sanitizedPluginConfig.quizzes) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.quizzes === 'object'\n          ? sanitizedPluginConfig.quizzes.quizzesCollection\n          : undefined\n\n      const quizzes = quizzesCollection({\n        mediaCollectionSlug: collectionSlugMap.media,\n        studentsCollectionSlug: collectionSlugMap.students,\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(quizzes)\n    }\n\n    if (sanitizedPluginConfig.categories) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.categories === 'object'\n          ? sanitizedPluginConfig.categories.categoriesCollection\n          : undefined\n\n      const categories = categoriesCollection({\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(categories)\n    }\n\n    if (sanitizedPluginConfig.tags) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.tags === 'object'\n          ? sanitizedPluginConfig.tags.tagsCollection\n          : undefined\n\n      const tags = tagsCollection({\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(tags)\n    }\n\n    if (sanitizedPluginConfig.questions) {\n      const collectionOverrides =\n        typeof sanitizedPluginConfig.questions === 'object'\n          ? sanitizedPluginConfig.questions.questionsCollection\n          : undefined\n\n      const questions = questionsCollection({\n        studentsCollectionSlug: collectionSlugMap.students,\n        overrides: collectionOverrides,\n      })\n      incomingConfig.collections.push(questions)\n    }\n\n    if (sanitizedPluginConfig.endpoints) {\n      incomingConfig.endpoints = [\n        ...(incomingConfig.endpoints || []),\n        ...sanitizedPluginConfig.endpoints,\n      ]\n    }\n\n    // Add default endpoints\n    const defaultEndpoints = [\n      {\n        path: '/lms/enroll',\n        method: 'post' as const,\n        handler: enrollHandler({\n          userSlug: collectionSlugMap.students,\n          courseSlug: collectionSlugMap.courses,\n        }),\n      },\n      {\n        path: '/lms/complete-lesson',\n        method: 'post' as const, \n        handler: completeLessonHandler({\n          userSlug: collectionSlugMap.students,\n        }),\n      },\n      {\n        path: '/lms/submit-quiz',\n        method: 'post' as const,\n        handler: submitQuizHandler({\n          userSlug: collectionSlugMap.students,\n          quizzesSlug: collectionSlugMap.quizzes,\n        }),\n      },\n      {\n        path: '/lms/complete-course',\n        method: 'post' as const,\n        handler: completeCourseHandler({\n          userSlug: collectionSlugMap.students,\n          courseSlug: collectionSlugMap.courses,\n        }),\n      },\n      {\n        path: '/lms/add-certificate-to-user',\n        method: 'post' as const,\n        handler: addCertificateToUserHandler({\n          userSlug: collectionSlugMap.students,\n          courseSlug: collectionSlugMap.courses,\n          certificatesSlug: collectionSlugMap.certificates,\n        }),\n      },\n      {\n        path: '/lms/generate-certificate',\n        method: 'post' as const,\n        handler: generateCertificateHandler({\n          userSlug: collectionSlugMap.students,\n          courseSlug: collectionSlugMap.courses,\n          mediaSlug: collectionSlugMap.media,\n        }),\n      },\n      {\n        path: '/lms/add-user-to-group',\n        method: 'post' as const,\n        handler: addUserToGroupHandler({\n          userSlug: collectionSlugMap.students,\n          groupSlug: collectionSlugMap.groups,\n        }),\n      },\n      {\n        path: '/lms/fetch-progress',\n        method: 'get' as const,\n        handler: fetchProgressHandler({\n          userSlug: collectionSlugMap.students,\n        }),\n      },\n    ]\n\n    incomingConfig.endpoints = [\n      ...(incomingConfig.endpoints || []),\n      ...defaultEndpoints,\n    ]\n\n    \n\n    return {\n      ...incomingConfig,\n    }\n  }\n"],"names":["addressesCollection","coursesCollection","groupsCollection","lessonsCollection","quizzesCollection","categoriesCollection","tagsCollection","certificatesCollection","questionsCollection","topicsCollection","defaultAddressFields","sanitizePluginConfig","getCollectionSlugMap","studentsCollection","defaultStudentFields","completeLessonHandler","enrollHandler","submitQuizHandler","completeCourseHandler","addCertificateToUserHandler","addUserToGroupHandler","fetchProgressHandler","generateCertificateHandler","lmsPlugin","pluginConfig","incomingConfig","sanitizedPluginConfig","collectionSlugMap","collections","currenciesConfig","currencies","studentsFields","students","collectionOverrides","undefined","studentsCollectionSlug","defaultFields","overrides","push","addressFields","addresses","supportedCountries","certificates","mediaCollectionSlug","media","courses","categoriesCollectionSlug","categories","certificatesCollectionSlug","lessonsCollectionSlug","lessons","tagsCollectionSlug","tags","groups","coursesCollectionSlug","usersCollectionSlug","quizzesCollectionSlug","quizzes","topics","questions","endpoints","defaultEndpoints","path","method","handler","userSlug","courseSlug","quizzesSlug","certificatesSlug","mediaSlug","groupSlug"],"mappings":"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"}