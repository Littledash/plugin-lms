{"version":3,"sources":["../../src/plugin/index.ts"],"sourcesContent":["import type { ArrayField, Config, Field, RelationshipField, SelectField } from 'payload'\n\nimport type { LMSPluginConfig } from '../types.js'\nimport { AUD } from '../currencies/index.js'\nimport { coursesCollection } from '../courses/coursesCollection.js'\nimport { lessonsCollection } from '../lessons/lessonsCollection.js'\nimport { quizzesCollection } from '../quizzes/quizzesCollection.js'\nimport { categoriesCollection } from '../categoires/categoriesCollection.js'\nimport { tagsCollection } from '../tags/tagsCollection.js'\nimport { certificatesCollection } from '../certificates/certificatesCollection.js'\nimport { rolesField, rolesOptions } from '../fields/rolesField.js'\nimport { questionsCollection } from '../questions/questionsCollection.js'\nimport { enrolledCoursesField } from '../fields/enrolledCoursesField.js'\nimport { completedCoursesField } from '../fields/completedCoursesField.js'\nimport { coursesProgressField } from '../fields/coursesProgressField.js'\nimport { topicsCollection } from '../topics/topicsCollection.js'\nimport deepMerge from '../utilities/deepMerge.js'\n\n/**\n * \n *@TODO add groups collection and fields\n  - fields \n  name\n  description\n  members (relationship)\n  createdBy (relationship)\n  updatedBy (relationship)\n  createdAt\n  updatedAt\n\n  @TODO - than add groups to courses collection as a relationship\n */\n\n\nexport const lmsPlugin =\n  (pluginConfig?: LMSPluginConfig) =>\n  (incomingConfig: Config): Config => {\n    if (!pluginConfig) {\n      return incomingConfig\n    }\n\n    const studentsCollectionSlug = pluginConfig.studentsCollectionSlug || 'users'\n    const categoriesCollectionSlug = pluginConfig.categoriesCollectionSlug || 'categories'\n    const certificatesCollectionSlug = pluginConfig.certificatesCollectionSlug || 'certificates'\n    const coursesCollectionSlug = pluginConfig.coursesCollectionSlug || 'courses'\n    const lessonsCollectionSlug = pluginConfig.lessonsCollectionSlug || 'lessons'\n    const mediaCollectionSlug = pluginConfig.mediaCollectionSlug || 'media'\n    const tagsCollectionSlug = pluginConfig.tagsCollectionSlug || 'tags'\n    const quizzesCollectionSlug = pluginConfig.quizzesCollectionSlug || 'quizzes'\n    const topicsCollectionSlug = pluginConfig.topicsCollectionSlug || 'topics'\n\n    // Ensure collections exists\n    if (!incomingConfig.collections) {\n      incomingConfig.collections = []\n    }\n    const existingStudentsCollection = incomingConfig.collections.find(\n      (collection) => collection.slug === studentsCollectionSlug,\n    )\n    // Ensure students collection exists\n    if (existingStudentsCollection) {\n      // Handle fields that may be nested within tabs\n      const findFieldInTabs = (fields: Field[]) => {\n        for (const field of fields) {\n          if (field.type === 'tabs') {\n            for (const tab of field.tabs) {\n              const found = tab.fields?.find(f => 'name' in f && f.name === 'roles' && f.type === 'select');\n              if (found) return found;\n            }\n          }\n        }\n        return null;\n      };\n\n      // Check for roles field in tabs\n      const existingRolesField = existingStudentsCollection?.fields?.find(\n        field => 'name' in field && field.name === 'roles' && field.type === 'select'\n      ) || findFieldInTabs(existingStudentsCollection?.fields || [])\n\n      if (existingRolesField && existingRolesField.type === 'select') {\n        // Merge options if roles field exists\n        const existingOptions = (existingRolesField.options || []) as Array<{\n          label: string\n          value: string\n        }>\n\n        existingRolesField.options = [\n          ...existingOptions,\n          ...rolesOptions.filter(\n            (newOpt) => !existingOptions.find((existingOpt) => existingOpt.value === newOpt.value),\n          ),\n        ]\n      } else {\n        // Add roles field if it doesn't exist\n        existingStudentsCollection.fields.push(rolesField({}))\n      }\n\n      // Add enrolledCourses field if it doesn't exist\n      const existingEnrolledCoursesField = existingStudentsCollection?.fields?.find(\n        (field): field is RelationshipField =>\n          'name' in field && field.name === 'enrolledCourses' && field.type === 'relationship',\n      )\n\n      if (!existingEnrolledCoursesField) {\n        existingStudentsCollection.fields.push(enrolledCoursesField({}))\n      }\n\n      // Add completedCourses field if it doesn't exist\n      const existingCompletedCoursesField = existingStudentsCollection?.fields?.find(\n        (field): field is RelationshipField =>\n          'name' in field && field.name === 'completedCourses' && field.type === 'relationship',\n      )\n\n      if (!existingCompletedCoursesField) {\n        existingStudentsCollection.fields.push(completedCoursesField({}))\n      }\n\n      // Add coursesProgress field if it doesn't exist\n      const existingCoursesProgressField = existingStudentsCollection?.fields?.find(\n        (field): field is ArrayField =>\n          'name' in field && field.name === 'coursesProgress' && field.type === 'array',\n      )\n\n      if (!existingCoursesProgressField) {\n        existingStudentsCollection.fields.push(coursesProgressField({}))\n      }\n    }\n\n    // Ensure currencies are configured\n    const currenciesConfig: NonNullable<LMSPluginConfig['currencies']> =\n      pluginConfig.currencies ?? {\n        defaultCurrency: 'AUD',\n        supportedCurrencies: [AUD],\n      }\n\n    if (!currenciesConfig.defaultCurrency) {\n      currenciesConfig.defaultCurrency = currenciesConfig.supportedCurrencies[0]?.code\n    }\n\n    if (pluginConfig.certificates) {\n      const certificates = certificatesCollection({\n        mediaCollectionSlug,\n      })\n      incomingConfig.collections.push(certificates)\n    }\n\n    if (pluginConfig.courses) {\n      const courses = coursesCollection({\n        categoriesCollectionSlug,\n        certificatesCollectionSlug,\n        currenciesConfig,\n        lessonsCollectionSlug,\n        mediaCollectionSlug,\n        studentsCollectionSlug,\n        tagsCollectionSlug,\n      })\n      incomingConfig.collections.push(courses)\n    }\n\n    if (pluginConfig.lessons) {\n      const lessons = lessonsCollection({\n        coursesCollectionSlug,\n        mediaCollectionSlug,\n        quizzesCollectionSlug,\n      })\n      incomingConfig.collections.push(lessons)\n    }\n\n    if (pluginConfig.topics) {\n      const topics = topicsCollection({\n        coursesCollectionSlug,\n        mediaCollectionSlug,\n        quizzesCollectionSlug,\n        lessonsCollectionSlug,\n      })\n      incomingConfig.collections.push(topics)\n    }\n\n    if (pluginConfig.quizzes) {\n      const quizzes = quizzesCollection({\n        mediaCollectionSlug,\n      })\n      incomingConfig.collections.push(quizzes)\n    }\n\n\n    if (incomingConfig.collections?.find((col) => col.slug === 'categories') && pluginConfig.categories) {\n      const existingCategories = incomingConfig.collections.find((col) => col.slug === 'categories')\n      const newCategories = categoriesCollection()\n      \n      // Deep merge the collections\n      if (existingCategories) {\n        existingCategories.fields = deepMerge(existingCategories.fields || [], newCategories.fields || [])\n      }\n    } else if (pluginConfig.categories) {\n      const categories = categoriesCollection()\n      incomingConfig.collections.push(categories)\n    }\n\n    if (incomingConfig.collections?.find((col) => col.slug === 'tags') && pluginConfig.tags) {\n      const existingTags = incomingConfig.collections.find((col) => col.slug === 'tags')\n      const newTags = tagsCollection()\n      \n      // Deep merge the collections\n      if (existingTags) {\n        existingTags.fields = deepMerge(existingTags.fields || [], newTags.fields || [])\n      }\n    } else if (pluginConfig.tags) {\n      const tags = tagsCollection()\n      incomingConfig.collections.push(tags)\n    }\n\n    if (pluginConfig.questions) {\n      const questions = questionsCollection()\n      incomingConfig.collections.push(questions)\n    }\n\n    return {\n      ...incomingConfig,\n    }\n  }\n"],"names":["AUD","coursesCollection","lessonsCollection","quizzesCollection","categoriesCollection","tagsCollection","certificatesCollection","rolesField","rolesOptions","questionsCollection","enrolledCoursesField","completedCoursesField","coursesProgressField","topicsCollection","deepMerge","lmsPlugin","pluginConfig","incomingConfig","studentsCollectionSlug","categoriesCollectionSlug","certificatesCollectionSlug","coursesCollectionSlug","lessonsCollectionSlug","mediaCollectionSlug","tagsCollectionSlug","quizzesCollectionSlug","topicsCollectionSlug","collections","existingStudentsCollection","find","collection","slug","findFieldInTabs","fields","field","type","tab","tabs","found","f","name","existingRolesField","existingOptions","options","filter","newOpt","existingOpt","value","push","existingEnrolledCoursesField","existingCompletedCoursesField","existingCoursesProgressField","currenciesConfig","currencies","defaultCurrency","supportedCurrencies","code","certificates","courses","lessons","topics","quizzes","col","categories","existingCategories","newCategories","tags","existingTags","newTags","questions"],"mappings":"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"}