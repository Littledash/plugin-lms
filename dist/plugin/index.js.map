{"version":3,"sources":["../../src/plugin/index.ts"],"sourcesContent":["import type { ArrayField, Config, Field, RelationshipField, SelectField } from 'payload'\n\nimport type { LMSPluginConfig } from '../types.js'\nimport { AUD } from '../currencies/index.js'\nimport { addressesCollection } from '../addresses/addressesCollection.js'\nimport { coursesCollection } from '../courses/coursesCollection.js'\nimport { lessonsCollection } from '../lessons/lessonsCollection.js'\nimport { quizzesCollection } from '../quizzes/quizzesCollection.js'\nimport { categoriesCollection } from '../categoires/categoriesCollection.js'\nimport { tagsCollection } from '../tags/tagsCollection.js'\nimport { certificatesCollection } from '../certificates/certificatesCollection.js'\nimport { rolesField, rolesOptions } from '../fields/rolesField.js'\nimport { questionsCollection } from '../questions/questionsCollection.js'\nimport { enrolledCoursesField } from '../fields/enrolledCoursesField.js'\nimport { completedCoursesField } from '../fields/completedCoursesField.js'\nimport { coursesProgressField } from '../fields/coursesProgressField.js'\nimport { topicsCollection } from '../topics/topicsCollection.js'\nimport { deepMerge } from '../utilities/deepMerge.js'\nimport { defaultAddressFields } from '../fields/defaultAddressFields.js'\n\n/**\n * \n *@TODO add groups collection and fields\n  - fields \n  name\n  description\n  members (relationship)\n  createdBy (relationship)\n  updatedBy (relationship)\n  createdAt\n  updatedAt\n\n  @TODO - than add groups to courses collection as a relationship\n */\n\n\nexport const lmsPlugin =\n  (pluginConfig?: LMSPluginConfig) =>\n  (incomingConfig: Config): Config => {\n    if (!pluginConfig) {\n      return incomingConfig\n    }\n\n    const studentsCollectionSlug = pluginConfig.studentsCollectionSlug || 'users'\n    const addressesCollectionSlug = pluginConfig.addressesCollectionSlug || 'addresses'\n    const categoriesCollectionSlug = pluginConfig.categoriesCollectionSlug || 'categories'\n    const certificatesCollectionSlug = pluginConfig.certificatesCollectionSlug || 'certificates'\n    const coursesCollectionSlug = pluginConfig.coursesCollectionSlug || 'courses'\n    const lessonsCollectionSlug = pluginConfig.lessonsCollectionSlug || 'lessons'\n    const mediaCollectionSlug = pluginConfig.mediaCollectionSlug || 'media'\n    const tagsCollectionSlug = pluginConfig.tagsCollectionSlug || 'tags'\n    const quizzesCollectionSlug = pluginConfig.quizzesCollectionSlug || 'quizzes'\n    const topicsCollectionSlug = pluginConfig.topicsCollectionSlug || 'topics'\n\n    // Ensure collections exists\n    if (!incomingConfig.collections) {\n      incomingConfig.collections = []\n    }\n    let addressFields\n\n    const existingAddressesCollection = incomingConfig.collections.find(\n      (collection) => collection.slug === addressesCollectionSlug,\n    )\n    if (existingAddressesCollection) {\n      addressFields = existingAddressesCollection.fields\n    } else {\n      addressFields = defaultAddressFields()\n    }\n\n    if (pluginConfig.addresses) {\n      const addresses = addressesCollection({\n        addressFields,\n        studentsCollectionSlug,\n      })\n      incomingConfig.collections.push(addresses)\n    }\n\n    const existingStudentsCollection = incomingConfig.collections.find(\n      (collection) => collection.slug === studentsCollectionSlug,\n    )\n    // Ensure students collection exists\n    if (existingStudentsCollection) {\n      // Generic function to find any field by name and type\n      const findFieldByNameAndType = (fields: Field[], fieldName: string, fieldType: string): Field | null => {\n        for (const field of fields) {\n          if (field.type === 'tabs') {\n            for (const tab of field.tabs) {\n              const found = tab.fields?.find(f => 'name' in f && f.name === fieldName && f.type === fieldType);\n              if (found) return found;\n            }\n          } else if ('name' in field && field.name === fieldName && field.type === fieldType) {\n            return field;\n          }\n        }\n        return null;\n      };\n\n      // Check for roles field in tabs\n      const existingRolesField = findFieldByNameAndType(existingStudentsCollection?.fields || [], 'roles', 'select')\n\n      if (existingRolesField && existingRolesField.type === 'select') {\n        // Merge options if roles field exists\n        const existingOptions = (existingRolesField.options || []) as Array<{\n          label: string\n          value: string\n        }>\n\n        existingRolesField.options = [\n          ...existingOptions,\n          ...rolesOptions.filter(\n            (newOpt) => !existingOptions.find((existingOpt) => existingOpt.value === newOpt.value),\n          ),\n        ]\n      } else {\n        // Add roles field if it doesn't exist\n        existingStudentsCollection.fields.push(rolesField({}))\n      }\n\n      // Add enrolledCourses field if it doesn't exist\n      const existingEnrolledCoursesField = findFieldByNameAndType(existingStudentsCollection?.fields || [], 'enrolledCourses', 'relationship') as RelationshipField | null\n\n      if (!existingEnrolledCoursesField) {\n        existingStudentsCollection.fields.push(enrolledCoursesField({}))\n      }\n\n      // Add completedCourses field if it doesn't exist\n      const existingCompletedCoursesField = findFieldByNameAndType(existingStudentsCollection?.fields || [], 'completedCourses', 'relationship') as RelationshipField | null\n\n      if (!existingCompletedCoursesField) {\n        existingStudentsCollection.fields.push(completedCoursesField({}))\n      }\n\n      // Add coursesProgress field if it doesn't exist\n      const existingCoursesProgressField = findFieldByNameAndType(existingStudentsCollection?.fields || [], 'coursesProgress', 'array') as ArrayField | null\n\n      if (!existingCoursesProgressField) {\n        existingStudentsCollection.fields.push(coursesProgressField({}))\n      }\n\n      const exisitingCertificatesField = findFieldByNameAndType(existingStudentsCollection?.fields || [],  'certificates', 'relationship') as RelationshipField | null\n\n      if (!exisitingCertificatesField) {\n        existingStudentsCollection.fields.push(\n          {\n            name: 'certificates',\n            type: 'relationship',\n            relationTo: certificatesCollectionSlug,\n            hasMany: true,\n            admin: {\n              allowCreate: false,\n              description: 'The certificates the student has earned',\n            },\n          }\n        )\n      }\n      \n    }\n\n    // Ensure currencies are configured\n    const currenciesConfig: NonNullable<LMSPluginConfig['currencies']> =\n      pluginConfig.currencies ?? {\n        defaultCurrency: 'AUD',\n        supportedCurrencies: [AUD],\n      }\n\n    if (!currenciesConfig.defaultCurrency) {\n      currenciesConfig.defaultCurrency = currenciesConfig.supportedCurrencies[0]?.code\n    }\n\n    if (pluginConfig.certificates) {\n      const certificates = certificatesCollection({\n        mediaCollectionSlug,\n        studentsCollectionSlug,\n      })\n      incomingConfig.collections.push(certificates)\n    }\n\n    if (pluginConfig.courses) {\n      const courses = coursesCollection({\n        categoriesCollectionSlug,\n        certificatesCollectionSlug,\n        currenciesConfig,\n        lessonsCollectionSlug,\n        mediaCollectionSlug,\n        studentsCollectionSlug,\n        tagsCollectionSlug,\n      })\n      incomingConfig.collections.push(courses)\n    }\n\n    if (pluginConfig.lessons) {\n      const lessons = lessonsCollection({\n        coursesCollectionSlug,\n        mediaCollectionSlug,\n        quizzesCollectionSlug,\n        categoriesCollectionSlug,\n        studentsCollectionSlug,\n      })\n      incomingConfig.collections.push(lessons)\n    }\n\n    if (pluginConfig.topics) {\n      const topics = topicsCollection({\n        coursesCollectionSlug,\n        mediaCollectionSlug,\n        quizzesCollectionSlug,\n        lessonsCollectionSlug,\n      })\n      incomingConfig.collections.push(topics)\n    }\n\n    if (pluginConfig.quizzes) {\n      const quizzes = quizzesCollection({\n        mediaCollectionSlug,\n        studentsCollectionSlug,\n      })\n      incomingConfig.collections.push(quizzes)\n    }\n\n\n    if (incomingConfig.collections?.find((col) => col.slug === 'categories') && pluginConfig.categories) {\n      const existingCategories = incomingConfig.collections.find((col) => col.slug === 'categories')\n      const newCategories = categoriesCollection()\n      \n      // Deep merge the collections\n      if (existingCategories) {\n        existingCategories.fields = deepMerge(existingCategories.fields || [], newCategories.fields || [])\n      }\n    } else if (pluginConfig.categories) {\n      const categories = categoriesCollection()\n      incomingConfig.collections.push(categories)\n    }\n\n    if (incomingConfig.collections?.find((col) => col.slug === 'tags') && pluginConfig.tags) {\n      const existingTags = incomingConfig.collections.find((col) => col.slug === 'tags')\n      const newTags = tagsCollection()\n      \n      // Deep merge the collections\n      if (existingTags) {\n        existingTags.fields = deepMerge(existingTags.fields || [], newTags.fields || [])\n      }\n    } else if (pluginConfig.tags) {\n      const tags = tagsCollection()\n      incomingConfig.collections.push(tags)\n    }\n\n    if (pluginConfig.questions) {\n      const questions = questionsCollection()\n      incomingConfig.collections.push(questions)\n    }\n\n    // Add custom fields to collections\n    if (pluginConfig.customFields) {\n      Object.entries(pluginConfig.customFields).forEach(([collectionSlug, fields]) => {\n        const collection = incomingConfig.collections?.find((col) => col.slug === collectionSlug)\n\n        if (collection) {\n          collection.fields = [...collection.fields, ...fields]\n        }\n      })\n    }\n\n    return {\n      ...incomingConfig,\n    }\n  }\n"],"names":["AUD","addressesCollection","coursesCollection","lessonsCollection","quizzesCollection","categoriesCollection","tagsCollection","certificatesCollection","rolesField","rolesOptions","questionsCollection","enrolledCoursesField","completedCoursesField","coursesProgressField","topicsCollection","deepMerge","defaultAddressFields","lmsPlugin","pluginConfig","incomingConfig","studentsCollectionSlug","addressesCollectionSlug","categoriesCollectionSlug","certificatesCollectionSlug","coursesCollectionSlug","lessonsCollectionSlug","mediaCollectionSlug","tagsCollectionSlug","quizzesCollectionSlug","topicsCollectionSlug","collections","addressFields","existingAddressesCollection","find","collection","slug","fields","addresses","push","existingStudentsCollection","findFieldByNameAndType","fieldName","fieldType","field","type","tab","tabs","found","f","name","existingRolesField","existingOptions","options","filter","newOpt","existingOpt","value","existingEnrolledCoursesField","existingCompletedCoursesField","existingCoursesProgressField","exisitingCertificatesField","relationTo","hasMany","admin","allowCreate","description","currenciesConfig","currencies","defaultCurrency","supportedCurrencies","code","certificates","courses","lessons","topics","quizzes","col","categories","existingCategories","newCategories","tags","existingTags","newTags","questions","customFields","Object","entries","forEach","collectionSlug"],"mappings":"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"}