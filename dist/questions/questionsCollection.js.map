{"version":3,"sources":["../../src/questions/questionsCollection.ts"],"sourcesContent":["import { CollectionConfig, Field } from 'payload'\nimport { FieldsOverride } from '../types.js'\nimport { isAdminOrAuthorOrStudent } from '../access/isAdminOrAuthorOrStudent.js'\nimport { isAdminOrAuthor } from '../access/isAdminOrAuthor.js'\n\n/**\n * Props interface for configuring the questions collection\n * @property overrides - Optional configuration overrides for fields and collection settings\n */\ntype Props = {\n  overrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n}\n\n/**\n * Creates a questions collection configuration for Payload CMS\n * This collection manages questions for quizzes and assessments\n *\n * @param props - Configuration properties for the questions collection\n * @returns CollectionConfig object for questions\n */\nexport const questionsCollection: (props?: Props) => CollectionConfig<'questions'> = (props) => {\n  const { overrides } = props || {}\n  const fieldsOverride = overrides?.fields\n\n  /**\n   * Default fields for the questions collection\n   * Includes question details, access control, and content organization\n   */\n  const defaultFields: Field[] = [\n    {\n      name: 'title',\n      type: 'text',\n      required: true,\n      admin: {\n        description: 'The title of the question',\n      },\n    },\n    {\n      name: 'points',\n      type: 'number',\n      required: true,\n      min: 0,\n      defaultValue: 1,\n      admin: {\n        step: 0.1,\n        description: 'Points awarded for correct answer',\n      },\n    },\n    {\n      name: 'questionType',\n      type: 'select',\n      required: true,\n      options: [\n        { label: 'Multiple Choice', value: 'multipleChoice' },\n        { label: 'True/False', value: 'trueFalse' },\n        { label: 'Sorting', value: 'sorting' },\n        { label: 'Fill in the Blank', value: 'fillInBlank' },\n        { label: 'Assessment', value: 'assessment' },\n        { label: 'Essay/Open Answer', value: 'essay' },\n        { label: 'Free Choice', value: 'freeChoice' },\n        { label: 'Single Choice', value: 'singleChoice' },\n      ],\n    },\n    {\n      name: 'question',\n      type: 'text',\n      required: true,\n    },\n    {\n      name: 'choices',\n      type: 'array',\n      admin: {\n        condition: (_, siblingData) =>\n          ['multipleChoice', 'singleChoice', 'sorting'].includes(siblingData.questionType),\n      },\n      fields: [\n        { name: 'label', type: 'text', required: true },\n        { name: 'isCorrect', type: 'checkbox' },\n        {\n          name: 'order',\n          type: 'number',\n          admin: { condition: (_, siblingData) => siblingData.questionType === 'sorting' },\n        },\n      ],\n    },\n    {\n      name: 'correctAnswer',\n      type: 'select',\n      admin: {\n        condition: (_, siblingData) => siblingData.questionType === 'trueFalse',\n      },\n      options: [\n        { label: 'True', value: 'true' },\n        { label: 'False', value: 'false' },\n      ],\n    },\n    {\n      name: 'correctAnswers',\n      type: 'array',\n      admin: {\n        condition: (_, siblingData) => siblingData.questionType === 'fillInBlank',\n      },\n      fields: [{ name: 'answer', type: 'text', required: true }],\n    },\n    {\n      name: 'assessmentCriteria',\n      type: 'array',\n      admin: {\n        condition: (_, siblingData) => siblingData.questionType === 'assessment',\n      },\n      fields: [\n        { name: 'criterion', type: 'text', required: true },\n        { name: 'points', type: 'number', required: true },\n      ],\n    },\n    {\n      name: 'maxLength',\n      type: 'number',\n      admin: {\n        condition: (_, siblingData) => siblingData.questionType === 'essay',\n      },\n      defaultValue: 500,\n    },\n  ]\n\n  // Apply field overrides if provided\n  const fields =\n    fieldsOverride && typeof fieldsOverride === 'function'\n      ? fieldsOverride({ defaultFields })\n      : defaultFields\n\n  /**\n   * Base configuration for the questions collection\n   * Includes slug, access control, timestamps, and admin settings\n   */\n  const baseConfig: CollectionConfig = {\n    slug: 'questions',\n    access: {\n      read: isAdminOrAuthorOrStudent,\n      create: isAdminOrAuthor,\n      update: isAdminOrAuthor,\n      delete: isAdminOrAuthor,\n    },\n    timestamps: true,\n    ...overrides,\n    admin: {\n      useAsTitle: 'title',\n      group: 'LMS',\n      ...overrides?.admin,\n    },\n    fields,\n  }\n\n  return { ...baseConfig }\n}\n"],"names":["isAdminOrAuthorOrStudent","isAdminOrAuthor","questionsCollection","props","overrides","fieldsOverride","fields","defaultFields","name","type","required","admin","description","min","defaultValue","step","options","label","value","condition","_","siblingData","includes","questionType","baseConfig","slug","access","read","create","update","delete","timestamps","useAsTitle","group"],"mappings":"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"}