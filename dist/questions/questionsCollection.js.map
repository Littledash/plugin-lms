{"version":3,"sources":["../../src/questions/questionsCollection.ts"],"sourcesContent":["import { CollectionConfig, Field } from 'payload'\nimport { FieldsOverride, QuestionTypeOption } from '../types.js'\n\n/**\n * Props interface for configuring the questions collection\n * @property overrides - Optional configuration overrides for fields and collection settings\n * @property questionTypes - Optional array of question type options to override defaults\n */\ntype Props = {\n  studentsCollectionSlug?: string\n  overrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n  questionTypes?: QuestionTypeOption[]\n}\n\n/**\n * Creates a questions collection configuration for Payload CMS\n * This collection manages questions for quizzes and assessments\n *\n * @param props - Configuration properties for the questions collection\n * @returns CollectionConfig object for questions\n */\nexport const questionsCollection: (props?: Props) => CollectionConfig<'questions'> = (props) => {\n  const { overrides, studentsCollectionSlug = 'users', questionTypes } = props || {}\n  const fieldsOverride = overrides?.fields\n\n  // Default question types\n  const defaultQuestionTypes: QuestionTypeOption[] = [\n    { label: 'Multiple Choice', value: 'multipleChoice' },\n    { label: 'True/False', value: 'trueFalse' },\n    { label: 'Sorting', value: 'sorting' },\n    { label: 'Fill in the Blank', value: 'fillInBlank' },\n    { label: 'Assessment', value: 'assessment' },\n    { label: 'Essay/Open Answer', value: 'essay' },\n    { label: 'Free Choice', value: 'freeChoice' },\n    { label: 'Single Choice', value: 'singleChoice' },\n  ]\n\n  // Use provided question types or fall back to defaults\n  const availableQuestionTypes = questionTypes || defaultQuestionTypes\n\n  /**\n   * Default fields for the questions collection\n   * Includes question details, access control, and content organization\n   */\n  const defaultFields: Field[] = [\n    {\n      name: 'title',\n      type: 'text',\n      required: true,\n      admin: {\n        description: 'The title of the question',\n      },\n    },\n    {\n      name: 'points',\n      type: 'number',\n      required: true,\n      min: 0,\n      defaultValue: 1,\n      admin: {\n        step: 0.1,\n        description: 'Points awarded for correct answer',\n      },\n    },\n    {\n      name: 'questionType',\n      type: 'select',\n      required: true,\n      options: availableQuestionTypes,\n    },\n    {\n      name: 'question',\n      type: 'text',\n      required: true,\n    },\n    {\n      name: 'choices',\n      type: 'array',\n      admin: {\n        condition: (_, siblingData) =>\n          ['multipleChoice', 'singleChoice', 'sorting'].includes(siblingData.questionType),\n      },\n      fields: [\n        { name: 'label', type: 'text', required: true },\n        { name: 'isCorrect', type: 'checkbox' },\n        {\n          name: 'order',\n          type: 'number',\n          admin: { condition: (_, siblingData) => siblingData.questionType === 'sorting' },\n        },\n      ],\n    },\n    {\n      name: 'correctAnswer',\n      type: 'select',\n      admin: {\n        condition: (_, siblingData) => siblingData.questionType === 'trueFalse',\n      },\n      options: [\n        { label: 'True', value: 'true' },\n        { label: 'False', value: 'false' },\n      ],\n    },\n    {\n      name: 'correctAnswers',\n      type: 'array',\n      admin: {\n        condition: (_, siblingData) => siblingData.questionType === 'fillInBlank',\n      },\n      fields: [{ name: 'answer', type: 'text', required: true }],\n    },\n    {\n      name: 'assessmentCriteria',\n      type: 'array',\n      admin: {\n        condition: (_, siblingData) => siblingData.questionType === 'assessment',\n      },\n      fields: [\n        { name: 'criterion', type: 'text', required: true },\n        { name: 'points', type: 'number', required: true },\n      ],\n    },\n    {\n      name: 'maxLength',\n      type: 'number',\n      admin: {\n        condition: (_, siblingData) => siblingData.questionType === 'essay',\n      },\n      defaultValue: 500,\n    },\n    {\n      name: 'authors',\n      type: 'relationship',\n      relationTo: studentsCollectionSlug,\n      hasMany: true,\n      admin: {\n        allowCreate: false,\n        description: 'The authors of the question',\n      },\n    },\n  ]\n\n  // Apply field overrides if provided\n  const fields =\n    fieldsOverride && typeof fieldsOverride === 'function'\n      ? fieldsOverride({ defaultFields })\n      : defaultFields\n\n  /**\n   * Base configuration for the questions collection\n   * Includes slug, access control, timestamps, and admin settings\n   */\n  const baseConfig: CollectionConfig = {\n    slug: 'questions',\n    timestamps: true,\n    ...overrides,\n    admin: {\n      useAsTitle: 'title',\n      // group: 'LMS',\n      ...overrides?.admin,\n    },\n    fields,\n  }\n\n  return { ...baseConfig }\n}\n"],"names":["questionsCollection","props","overrides","studentsCollectionSlug","questionTypes","fieldsOverride","fields","defaultQuestionTypes","label","value","availableQuestionTypes","defaultFields","name","type","required","admin","description","min","defaultValue","step","options","condition","_","siblingData","includes","questionType","relationTo","hasMany","allowCreate","baseConfig","slug","timestamps","useAsTitle"],"mappings":"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"}