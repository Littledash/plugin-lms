{"version":3,"sources":["../../src/addresses/addressesCollection.ts"],"sourcesContent":["import type { CollectionConfig, Field } from 'payload'\n\nimport type { CountryType, FieldsOverride } from '../types.js'\n\nimport { defaultCountries } from './defaultCountries.js'\n\ntype Props = {\n  /**\n   * Array of fields used for capturing the address data. Use this over overrides to customise the fields here as it's reused across the plugin.\n   */\n  addressFields: Field[]\n  /**\n   * Slug of the students collection, defaults to 'users'.\n   */\n  studentsCollectionSlug?: string\n  overrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n  supportedCountries?: CountryType[]\n}\n\nexport const addressesCollection: (props: Props) => CollectionConfig = (props) => {\n  const { addressFields, studentsCollectionSlug = 'users', overrides } = props || {}\n  const fieldsOverride = overrides?.fields\n\n  const { supportedCountries: supportedCountriesFromProps } = props || {}\n  const supportedCountries = supportedCountriesFromProps || defaultCountries\n  const hasOnlyOneCountry = supportedCountries && supportedCountries.length === 1\n\n  const defaultFields: Field[] = [\n    {\n      name: 'customer',\n      type: 'relationship',\n      label: 'Student',\n      relationTo: studentsCollectionSlug,\n    },\n    ...addressFields.map((field) => {\n      if ('name' in field && field.name === 'country') {\n        return {\n          name: 'country',\n          type: 'select',\n          label: 'Country',\n          options: supportedCountries || defaultCountries,\n          required: true,\n          ...(supportedCountries && supportedCountries?.[0] && hasOnlyOneCountry\n            ? {\n                defaultValue: supportedCountries?.[0].value,\n              }\n            : {}),\n        } as Field\n      }\n\n      return field\n    }),\n  ]\n\n  const fields =\n    fieldsOverride && typeof fieldsOverride === 'function'\n      ? fieldsOverride({ defaultFields })\n      : defaultFields\n\n  const baseConfig: CollectionConfig = {\n    slug: 'addresses',\n    timestamps: true,\n    ...overrides,\n    admin: {\n      useAsTitle: 'createdAt',\n      ...overrides?.admin,\n    },\n    fields,\n  }\n\n  return { ...baseConfig }\n}\n"],"names":["defaultCountries","addressesCollection","props","addressFields","studentsCollectionSlug","overrides","fieldsOverride","fields","supportedCountries","supportedCountriesFromProps","hasOnlyOneCountry","length","defaultFields","name","type","label","relationTo","map","field","options","required","defaultValue","value","baseConfig","slug","timestamps","admin","useAsTitle"],"mappings":"AAIA,SAASA,gBAAgB,QAAQ,wBAAuB;AAexD,OAAO,MAAMC,sBAA0D,CAACC;IACtE,MAAM,EAAEC,aAAa,EAAEC,yBAAyB,OAAO,EAAEC,SAAS,EAAE,GAAGH,SAAS,CAAC;IACjF,MAAMI,iBAAiBD,WAAWE;IAElC,MAAM,EAAEC,oBAAoBC,2BAA2B,EAAE,GAAGP,SAAS,CAAC;IACtE,MAAMM,qBAAqBC,+BAA+BT;IAC1D,MAAMU,oBAAoBF,sBAAsBA,mBAAmBG,MAAM,KAAK;IAE9E,MAAMC,gBAAyB;QAC7B;YACEC,MAAM;YACNC,MAAM;YACNC,OAAO;YACPC,YAAYZ;QACd;WACGD,cAAcc,GAAG,CAAC,CAACC;YACpB,IAAI,UAAUA,SAASA,MAAML,IAAI,KAAK,WAAW;gBAC/C,OAAO;oBACLA,MAAM;oBACNC,MAAM;oBACNC,OAAO;oBACPI,SAASX,sBAAsBR;oBAC/BoB,UAAU;oBACV,GAAIZ,sBAAsBA,oBAAoB,CAAC,EAAE,IAAIE,oBACjD;wBACEW,cAAcb,oBAAoB,CAAC,EAAE,CAACc;oBACxC,IACA,CAAC,CAAC;gBACR;YACF;YAEA,OAAOJ;QACT;KACD;IAED,MAAMX,SACJD,kBAAkB,OAAOA,mBAAmB,aACxCA,eAAe;QAAEM;IAAc,KAC/BA;IAEN,MAAMW,aAA+B;QACnCC,MAAM;QACNC,YAAY;QACZ,GAAGpB,SAAS;QACZqB,OAAO;YACLC,YAAY;YACZ,GAAGtB,WAAWqB,KAAK;QACrB;QACAnB;IACF;IAEA,OAAO;QAAE,GAAGgB,UAAU;IAAC;AACzB,EAAC"}