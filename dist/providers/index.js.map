{"version":3,"sources":["../../src/providers/index.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, use, useCallback, useEffect, useReducer } from 'react'\nimport type { DefaultDocumentIDType } from 'payload'\nimport * as qs from 'qs-esm'\nimport { LMSContextType, LMSProviderProps, CourseProgress } from './types.js'\nimport { lmsReducer, initialState, type LMSState } from './reducer.js'\n\nconst defaultContext: LMSContextType = {\n  users: [],\n  courses: [],\n  topics: [],\n  lessons: [],\n  progress: [],\n  quizzes: [],\n  certificates: [],\n  enrolledCourses: [],\n  completedCourses: [],\n  enroll: async () => {},\n  completeCourse: async () => {},\n  completeLesson: async () => {},\n  submitQuiz: async () => {},\n  addUserToGroup: async () => {},\n  getProgress: () => undefined,\n  fetchProgress: async () => {},\n  fetchUsers: async () => {},\n  fetchCourses: async () => {},\n  fetchTopics: async () => {},\n  fetchLessons: async () => {},\n  fetchQuizzes: async () => {},\n  generateCertificate: async () => {},\n  addCertificate: async () => {},\n  isLoading: false,\n  error: null,\n}\n\nconst LMSContext = createContext<LMSContextType>(defaultContext)\n\nconst defaultLocalStorage = {\n  key: 'lms',\n}\n\nexport const LMSProvider: React.FC<LMSProviderProps> = ({\n  children,\n  api,\n  syncLocalStorage = true,\n}) => {\n  const localStorageConfig =\n    syncLocalStorage && typeof syncLocalStorage === 'object'\n      ? {\n          ...defaultLocalStorage,\n          ...(syncLocalStorage as Record<string, unknown>),\n        }\n      : defaultLocalStorage\n\n  const { apiRoute = '/api', serverURL = '' } = api || {}\n  const baseAPIURL = `${serverURL}${apiRoute}`\n\n  const [state, dispatch] = useReducer(lmsReducer, initialState)\n\n  const fetchProgress = useCallback(async () => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    dispatch({ type: 'SET_ERROR', payload: null })\n    try {\n      const response = await fetch(`${baseAPIURL}/lms/fetch-progress`)\n      if (!response.ok) throw new Error('Failed to fetch user progress')\n      const data = await response.json()\n      const { coursesProgress, enrolledCourses, completedCourses } = data\n      \n      // Update all progress-related state\n      dispatch({ type: 'UPDATE_PROGRESS', payload: coursesProgress || [] })\n      \n      // Ensure enrolledCourses is an array before mapping\n      const enrolledCoursesArray = Array.isArray(enrolledCourses) ? enrolledCourses : []\n      dispatch({ type: 'SET_ENROLLED_COURSES', payload: enrolledCoursesArray.map((course: { id: DefaultDocumentIDType }) => course.id) })\n      \n      // Ensure completedCourses is an array before mapping\n      const completedCoursesArray = Array.isArray(completedCourses) ? completedCourses : []\n      dispatch({ type: 'SET_COMPLETED_COURSES', payload: completedCoursesArray.map((course: { id: DefaultDocumentIDType }) => course.id) })\n    } catch (e: unknown) {\n      dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false })\n    }\n  }, [baseAPIURL])\n\n  // Load progress and course status from database on initial render\n  useEffect(() => {\n    if (syncLocalStorage) {\n      // First try to load from localStorage for immediate UI rendering\n      const storedProgress = localStorage.getItem(localStorageConfig.key)\n      if (storedProgress) {\n        const parsed = JSON.parse(storedProgress)\n        \n        // Normalize progress data to use IDs only for backward compatibility\n        const normalizedProgress = (parsed.progress || []).map((progress: CourseProgress) => ({\n          ...progress,\n          course: typeof progress.course === 'object' && progress.course !== null ? progress.course.id : progress.course,\n          completedLessons: progress.completedLessons?.map((lesson) => ({\n            ...lesson,\n            lesson: typeof lesson.lesson === 'object' && lesson.lesson !== null ? lesson.lesson.id : lesson.lesson,\n          })) || [],\n          completedQuizzes: progress.completedQuizzes?.map((quiz) => ({\n            ...quiz,\n            quiz: typeof quiz.quiz === 'object' && quiz.quiz !== null ? quiz.quiz.id : quiz.quiz,\n          })) || [],\n        }))\n        \n        // Normalize enrolled and completed courses to use IDs only\n        const normalizedEnrolledCourses = (parsed.enrolledCourses || []).map((course: DefaultDocumentIDType | { id: DefaultDocumentIDType }) => \n          typeof course === 'object' && course !== null ? course.id : course\n        )\n        const normalizedCompletedCourses = (parsed.completedCourses || []).map((course: DefaultDocumentIDType | { id: DefaultDocumentIDType }) => \n          typeof course === 'object' && course !== null ? course.id : course\n        )\n        \n        dispatch({\n          type: 'LOAD_FROM_STORAGE',\n          payload: {\n            progress: normalizedProgress,\n            enrolledCourses: normalizedEnrolledCourses,\n            completedCourses: normalizedCompletedCourses,\n          },\n        })\n      }\n      \n      // Then fetch fresh data from database\n      fetchProgress()\n    }\n  }, [syncLocalStorage, localStorageConfig.key, fetchProgress])\n\n  // Persist progress and course status to localStorage whenever they change\n  useEffect(() => {\n    if (syncLocalStorage) {\n      const serializedState = JSON.stringify({\n        progress: state.progress,\n        enrolledCourses: state.enrolledCourses,\n        completedCourses: state.completedCourses,\n      })\n      localStorage.setItem(localStorageConfig.key, serializedState)\n    }\n  }, [state.progress, state.enrolledCourses, state.completedCourses, syncLocalStorage, localStorageConfig.key])\n\n  const enroll = useCallback(\n    async (courseId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/enroll`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId }),\n        })\n        if (!response.ok) throw new Error('Failed to enroll in course')\n        await fetchProgress() // Refetch progress to ensure state is up-to-date\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL, fetchProgress],\n  )\n\n  const completeCourse = useCallback(\n    async (courseId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/complete-course`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId }),\n        })\n        if (!response.ok) throw new Error('Failed to complete course')\n        await fetchProgress() // Refetch progress to ensure state is up-to-date\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL, fetchProgress],\n  )\n\n  const completeLesson = useCallback(\n    async (courseId: DefaultDocumentIDType, lessonId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        await fetch(`${baseAPIURL}/lms/complete-lesson`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId, lessonId }),\n        })\n        await fetchProgress() // Refetch progress to ensure state is up-to-date\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL, fetchProgress],\n  )\n\n  const submitQuiz = useCallback(\n    async (courseId: DefaultDocumentIDType, quizId: DefaultDocumentIDType, answers: Record<string, unknown>) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/submit-quiz`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId, quizId, answers }),\n        })\n        if (!response.ok) throw new Error('Failed to submit quiz')\n        await fetchProgress() // Refetch progress to ensure state is up-to-date\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL, fetchProgress],\n  )\n\n  const addUserToGroup = useCallback(\n    async (groupId: DefaultDocumentIDType, userId: DefaultDocumentIDType, role: 'leader' | 'student') => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/add-user-to-group`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ groupId, userId, role }),\n        })\n        if (!response.ok) throw new Error('Failed to add user to group')\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const getProgress = useCallback(\n    (courseId: DefaultDocumentIDType, refreshFromDB = false) => {\n      if (refreshFromDB) {\n        // Fetch fresh progress from database\n        fetchProgress()\n      }\n      return state.progress.find((cp) => {\n        // Handle both full course objects and course IDs for backward compatibility\n        if (typeof cp.course === 'object' && cp.course !== null) {\n          return cp.course.id === courseId\n        }\n        return cp.course === courseId\n      })\n    },\n    [state.progress, fetchProgress],\n  )\n\n  const fetchUsers = useCallback(async () => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    dispatch({ type: 'SET_ERROR', payload: null })\n    try {\n      const response = await fetch(`${baseAPIURL}/users`)\n      if (!response.ok) throw new Error('Failed to fetch users')\n      const data = await response.json()\n      dispatch({ type: 'SET_USERS', payload: data.docs })\n    } catch (e: unknown) {\n      dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      dispatch({ type: 'SET_USERS', payload: [] })\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false })\n    }\n  }, [baseAPIURL])\n\n  const fetchCourses = useCallback(async () => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    dispatch({ type: 'SET_ERROR', payload: null })\n    try {\n      const response = await fetch(`${baseAPIURL}/courses`)\n      if (!response.ok) throw new Error('Failed to fetch courses')\n      const data = await response.json()\n      dispatch({ type: 'SET_COURSES', payload: data.docs })\n    } catch (e: unknown) {\n      dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      dispatch({ type: 'SET_COURSES', payload: [] })\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false })\n    }\n  }, [baseAPIURL])\n\n  const fetchTopics = useCallback(\n    async (courseId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      const query = qs.stringify({ where: { course: { equals: courseId } } })\n      try {\n        const response = await fetch(`${baseAPIURL}/topics?${query}`)\n        if (!response.ok) throw new Error('Failed to fetch topics')\n        const data = await response.json()\n        dispatch({ type: 'SET_TOPICS', payload: data.docs })\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n        dispatch({ type: 'SET_TOPICS', payload: [] })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const fetchLessons = useCallback(\n    async (topicId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      const query = qs.stringify({ where: { topic: { equals: topicId } } })\n      try {\n        const response = await fetch(`${baseAPIURL}/lessons?${query}`)\n        if (!response.ok) throw new Error('Failed to fetch lessons')\n        const data = await response.json()\n        dispatch({ type: 'SET_LESSONS', payload: data.docs })\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n        dispatch({ type: 'SET_LESSONS', payload: [] })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const fetchQuizzes = useCallback(\n    async (lessonId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      const query = qs.stringify({ where: { lesson: { equals: lessonId } } })\n      try {\n        const response = await fetch(`${baseAPIURL}/quizzes?${query}`)\n        if (!response.ok) throw new Error('Failed to fetch quizzes')\n        const data = await response.json()\n        dispatch({ type: 'SET_QUIZZES', payload: data.docs })\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n        dispatch({ type: 'SET_QUIZZES', payload: [] })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const generateCertificate = useCallback(\n    async (courseId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/generate-certificate`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId }),\n        })\n        if (!response.ok) throw new Error('Failed to generate certificate')\n        dispatch({ type: 'GENERATE_CERTIFICATE', payload: { id: courseId } })\n        await fetchProgress() // Refetch progress to ensure state is up-to-date\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL, fetchProgress],\n  )\n\n  const addCertificate = useCallback(\n    async (courseId: DefaultDocumentIDType, certificateId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/add-certificate-to-user`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId, certificateId }),\n        })\n        if (!response.ok) throw new Error('Failed to add certificate')\n        // const result = await response.json()\n        dispatch({ type: 'ADD_CERTIFICATE', payload: { id: certificateId } })\n        \n        await fetchProgress() // Refetch progress to ensure state is up-to-date\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL, fetchProgress],\n  )\n\n  const value: LMSContextType = {\n    users: state.users,\n    courses: state.courses,\n    topics: state.topics,\n    lessons: state.lessons,\n    progress: state.progress,\n    quizzes: state.quizzes,\n    certificates: state.certificates,\n    enrolledCourses: state.enrolledCourses,\n    completedCourses: state.completedCourses,\n    enroll,\n    completeCourse,\n    completeLesson,\n    submitQuiz,\n    addUserToGroup,\n    getProgress,\n    fetchProgress,\n    fetchUsers,\n    fetchCourses,\n    fetchTopics,\n    fetchLessons,\n    fetchQuizzes,\n    generateCertificate,\n    addCertificate,\n    isLoading: state.isLoading,\n    error: state.error,\n  }\n\n  return <LMSContext.Provider value={value}>{children}</LMSContext.Provider>\n}\n\nexport const useLMS = (): LMSContextType => {\n  const context = use(LMSContext)\n  if (context === undefined) {\n    throw new Error('useLMS must be used within a LMSProvider')\n  }\n  return context\n}\n"],"names":["React","createContext","use","useCallback","useEffect","useReducer","qs","lmsReducer","initialState","defaultContext","users","courses","topics","lessons","progress","quizzes","certificates","enrolledCourses","completedCourses","enroll","completeCourse","completeLesson","submitQuiz","addUserToGroup","getProgress","undefined","fetchProgress","fetchUsers","fetchCourses","fetchTopics","fetchLessons","fetchQuizzes","generateCertificate","addCertificate","isLoading","error","LMSContext","defaultLocalStorage","key","LMSProvider","children","api","syncLocalStorage","localStorageConfig","apiRoute","serverURL","baseAPIURL","state","dispatch","type","payload","response","fetch","ok","Error","data","json","coursesProgress","enrolledCoursesArray","Array","isArray","map","course","id","completedCoursesArray","e","storedProgress","localStorage","getItem","parsed","JSON","parse","normalizedProgress","completedLessons","lesson","completedQuizzes","quiz","normalizedEnrolledCourses","normalizedCompletedCourses","serializedState","stringify","setItem","courseId","method","headers","body","lessonId","quizId","answers","groupId","userId","role","refreshFromDB","find","cp","docs","query","where","equals","topicId","topic","certificateId","value","Provider","useLMS","context"],"mappings":"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"}