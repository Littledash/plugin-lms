{"version":3,"sources":["../../src/providers/index.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, use, useCallback, useEffect, useReducer } from 'react'\nimport type { DefaultDocumentIDType } from 'payload'\nimport * as qs from 'qs-esm'\nimport { LMSContextType, LMSProviderProps } from './types.js'\nimport { lmsReducer, initialState, type LMSState } from './reducer.js'\n\nconst defaultContext: LMSContextType = {\n  users: [],\n  courses: [],\n  topics: [],\n  lessons: [],\n  progress: [],\n  quizzes: [],\n  certificates: [],\n  enrolledCourses: [],\n  completedCourses: [],\n  enroll: async () => {},\n  completeCourse: async () => {},\n  completeLesson: async () => {},\n  submitQuiz: async () => {},\n  addUserToGroup: async () => {},\n  getProgress: () => undefined,\n  fetchProgress: async () => {},\n  fetchUsers: async () => {},\n  fetchCourses: async () => {},\n  fetchTopics: async () => {},\n  fetchLessons: async () => {},\n  fetchQuizzes: async () => {},\n  generateCertificate: async () => {},\n  isLoading: false,\n  error: null,\n}\n\nconst LMSContext = createContext<LMSContextType>(defaultContext)\n\nconst defaultLocalStorage = {\n  key: 'lms',\n}\n\nexport const LMSProvider: React.FC<LMSProviderProps> = ({\n  children,\n  api,\n  syncLocalStorage = true,\n}) => {\n  const localStorageConfig =\n    syncLocalStorage && typeof syncLocalStorage === 'object'\n      ? {\n          ...defaultLocalStorage,\n          ...(syncLocalStorage as Record<string, unknown>),\n        }\n      : defaultLocalStorage\n\n  const { apiRoute = '/api', serverURL = '' } = api || {}\n  const baseAPIURL = `${serverURL}${apiRoute}`\n\n  const [state, dispatch] = useReducer(lmsReducer, initialState)\n\n  const fetchProgress = useCallback(async () => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    dispatch({ type: 'SET_ERROR', payload: null })\n    try {\n      const response = await fetch(`${baseAPIURL}/lms/fetch-progress`)\n      if (!response.ok) throw new Error('Failed to fetch user progress')\n      const data = await response.json()\n      const { coursesProgress, enrolledCourses, completedCourses } = data\n      \n      // Update all progress-related state\n      dispatch({ type: 'UPDATE_PROGRESS', payload: coursesProgress || [] })\n      dispatch({ type: 'SET_ENROLLED_COURSES', payload: enrolledCourses || [] })\n      dispatch({ type: 'SET_COMPLETED_COURSES', payload: completedCourses || [] })\n    } catch (e: unknown) {\n      dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false })\n    }\n  }, [baseAPIURL])\n\n  // Load progress and course status from database on initial render\n  useEffect(() => {\n    if (syncLocalStorage) {\n      // First try to load from localStorage for immediate UI rendering\n      const storedProgress = localStorage.getItem(localStorageConfig.key)\n      if (storedProgress) {\n        const parsed = JSON.parse(storedProgress)\n        dispatch({\n          type: 'LOAD_FROM_STORAGE',\n          payload: {\n            progress: parsed.progress || [],\n            enrolledCourses: parsed.enrolledCourses || [],\n            completedCourses: parsed.completedCourses || [],\n          },\n        })\n      }\n      \n      // Then fetch fresh data from database\n      fetchProgress()\n    }\n  }, [syncLocalStorage, localStorageConfig.key, fetchProgress])\n\n  // Persist progress and course status to localStorage whenever they change\n  useEffect(() => {\n    if (syncLocalStorage) {\n      const serializedState = JSON.stringify({\n        progress: state.progress,\n        enrolledCourses: state.enrolledCourses,\n        completedCourses: state.completedCourses,\n      })\n      localStorage.setItem(localStorageConfig.key, serializedState)\n    }\n  }, [state.progress, state.enrolledCourses, state.completedCourses, syncLocalStorage, localStorageConfig.key])\n\n  const enroll = useCallback(\n    async (courseId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/enroll`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId }),\n        })\n        if (!response.ok) throw new Error('Failed to enroll in course')\n        const enrolledCourse = state.courses.find((course) => course.id === courseId)\n        if (enrolledCourse) {\n                  dispatch({ type: 'ENROLL_IN_COURSE', payload: enrolledCourse })\n      }\n    } catch (e: unknown) {\n      dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false })\n    }\n  },\n  [baseAPIURL, state.courses],\n)\n\n  const completeCourse = useCallback(\n    async (courseId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/complete-course`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId }),\n        })\n        if (!response.ok) throw new Error('Failed to complete course')\n        const courseToComplete = state.enrolledCourses.find((course) => course.id === courseId)\n        if (courseToComplete) {\n          dispatch({ \n            type: 'COMPLETE_COURSE', \n            payload: { courseId, course: courseToComplete } \n          })\n        }\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL, state.enrolledCourses],\n  )\n\n  const completeLesson = useCallback(\n    async (courseId: DefaultDocumentIDType, lessonId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        await fetch(`${baseAPIURL}/lms/complete-lesson`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId, lessonId }),\n        })\n        // Progress is now handled by the API endpoint\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const submitQuiz = useCallback(\n    async (courseId: DefaultDocumentIDType, quizId: DefaultDocumentIDType, answers: Record<string, unknown>) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/submit-quiz`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId, quizId, answers }),\n        })\n        if (!response.ok) throw new Error('Failed to submit quiz')\n        const { score } = await response.json()\n        // Progress is now handled by the API endpoint\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const addUserToGroup = useCallback(\n    async (groupId: DefaultDocumentIDType, userId: DefaultDocumentIDType, role: 'leader' | 'student') => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/add-user-to-group`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ groupId, userId, role }),\n        })\n        if (!response.ok) throw new Error('Failed to add user to group')\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const getProgress = useCallback(\n    (courseId: DefaultDocumentIDType, refreshFromDB = false) => {\n      if (refreshFromDB) {\n        // Fetch fresh progress from database\n        fetchProgress()\n      }\n      return state.progress.find((cp) => cp.course === courseId)\n    },\n    [state.progress, fetchProgress],\n  )\n\n  const fetchUsers = useCallback(async () => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    dispatch({ type: 'SET_ERROR', payload: null })\n    try {\n      const response = await fetch(`${baseAPIURL}/users`)\n      if (!response.ok) throw new Error('Failed to fetch users')\n      const data = await response.json()\n      dispatch({ type: 'SET_USERS', payload: data.docs })\n    } catch (e: unknown) {\n      dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      dispatch({ type: 'SET_USERS', payload: [] })\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false })\n    }\n  }, [baseAPIURL])\n\n  const fetchCourses = useCallback(async () => {\n    dispatch({ type: 'SET_LOADING', payload: true })\n    dispatch({ type: 'SET_ERROR', payload: null })\n    try {\n      const response = await fetch(`${baseAPIURL}/courses`)\n      if (!response.ok) throw new Error('Failed to fetch courses')\n      const data = await response.json()\n      dispatch({ type: 'SET_COURSES', payload: data.docs })\n    } catch (e: unknown) {\n      dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      dispatch({ type: 'SET_COURSES', payload: [] })\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false })\n    }\n  }, [baseAPIURL])\n\n  const fetchTopics = useCallback(\n    async (courseId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      const query = qs.stringify({ where: { course: { equals: courseId } } })\n      try {\n        const response = await fetch(`${baseAPIURL}/topics?${query}`)\n        if (!response.ok) throw new Error('Failed to fetch topics')\n        const data = await response.json()\n        dispatch({ type: 'SET_TOPICS', payload: data.docs })\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n        dispatch({ type: 'SET_TOPICS', payload: [] })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const fetchLessons = useCallback(\n    async (topicId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      const query = qs.stringify({ where: { topic: { equals: topicId } } })\n      try {\n        const response = await fetch(`${baseAPIURL}/lessons?${query}`)\n        if (!response.ok) throw new Error('Failed to fetch lessons')\n        const data = await response.json()\n        dispatch({ type: 'SET_LESSONS', payload: data.docs })\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n        dispatch({ type: 'SET_LESSONS', payload: [] })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const fetchQuizzes = useCallback(\n    async (lessonId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      const query = qs.stringify({ where: { lesson: { equals: lessonId } } })\n      try {\n        const response = await fetch(`${baseAPIURL}/quizzes?${query}`)\n        if (!response.ok) throw new Error('Failed to fetch quizzes')\n        const data = await response.json()\n        dispatch({ type: 'SET_QUIZZES', payload: data.docs })\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n        dispatch({ type: 'SET_QUIZZES', payload: [] })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const generateCertificate = useCallback(\n    async (courseId: DefaultDocumentIDType) => {\n      dispatch({ type: 'SET_LOADING', payload: true })\n      dispatch({ type: 'SET_ERROR', payload: null })\n      try {\n        const response = await fetch(`${baseAPIURL}/lms/generate-certificate`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ courseId }),\n        })\n        if (!response.ok) throw new Error('Failed to generate certificate')\n        const newCertificate = await response.json()\n        dispatch({ type: 'ADD_CERTIFICATE', payload: newCertificate })\n      } catch (e: unknown) {\n        dispatch({ type: 'SET_ERROR', payload: e instanceof Error ? e : new Error('An unknown error occurred') })\n      } finally {\n        dispatch({ type: 'SET_LOADING', payload: false })\n      }\n    },\n    [baseAPIURL],\n  )\n\n  const value: LMSContextType = {\n    users: state.users,\n    courses: state.courses,\n    topics: state.topics,\n    lessons: state.lessons,\n    progress: state.progress,\n    quizzes: state.quizzes,\n    certificates: state.certificates,\n    enrolledCourses: state.enrolledCourses,\n    completedCourses: state.completedCourses,\n    enroll,\n    completeCourse,\n    completeLesson,\n    submitQuiz,\n    addUserToGroup,\n    getProgress,\n    fetchProgress,\n    fetchUsers,\n    fetchCourses,\n    fetchTopics,\n    fetchLessons,\n    fetchQuizzes,\n    generateCertificate,\n    isLoading: state.isLoading,\n    error: state.error,\n  }\n\n  return <LMSContext.Provider value={value}>{children}</LMSContext.Provider>\n}\n\nexport const useLMS = (): LMSContextType => {\n  const context = use(LMSContext)\n  if (context === undefined) {\n    throw new Error('useLMS must be used within a LMSProvider')\n  }\n  return context\n}\n"],"names":["React","createContext","use","useCallback","useEffect","useReducer","qs","lmsReducer","initialState","defaultContext","users","courses","topics","lessons","progress","quizzes","certificates","enrolledCourses","completedCourses","enroll","completeCourse","completeLesson","submitQuiz","addUserToGroup","getProgress","undefined","fetchProgress","fetchUsers","fetchCourses","fetchTopics","fetchLessons","fetchQuizzes","generateCertificate","isLoading","error","LMSContext","defaultLocalStorage","key","LMSProvider","children","api","syncLocalStorage","localStorageConfig","apiRoute","serverURL","baseAPIURL","state","dispatch","type","payload","response","fetch","ok","Error","data","json","coursesProgress","e","storedProgress","localStorage","getItem","parsed","JSON","parse","serializedState","stringify","setItem","courseId","method","headers","body","enrolledCourse","find","course","id","courseToComplete","lessonId","quizId","answers","score","groupId","userId","role","refreshFromDB","cp","docs","query","where","equals","topicId","topic","lesson","newCertificate","value","Provider","useLMS","context"],"mappings":"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"}