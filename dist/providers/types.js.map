{"version":3,"sources":["../../src/providers/types.ts"],"sourcesContent":["import type { DefaultDocumentIDType, TypedCollection } from 'payload'\nimport type React from 'react'\n\n\n\nexport type LMSUser = TypedCollection['users']\nexport type Course = TypedCollection['courses']\nexport type Lesson = TypedCollection['lessons'] & {\n  topic?: DefaultDocumentIDType | Topic\n  course?: DefaultDocumentIDType | Course\n}\nexport type Quiz = TypedCollection['quizzes'] & { lesson?: DefaultDocumentIDType | Lesson }\nexport type Certificate = TypedCollection['certificates']\nexport type Topic = TypedCollection['topics'] & { course?: DefaultDocumentIDType | Course }\n\n/**\n * Represents the progress of a user in a specific course.\n */\nexport type CourseProgress = {\n  /** The course this progress belongs to. */\n  course: DefaultDocumentIDType | { id: DefaultDocumentIDType }\n  /** Whether the entire course has been completed. */\n  completed: boolean\n  /** The completion percentage of the course (0-100). */\n  completionPercentage?: number\n  /** A list of lessons completed by the user. */\n  completedLessons: Array<{\n    lesson: DefaultDocumentIDType | { id: DefaultDocumentIDType }\n    completedAt: string\n  }>\n  /** A list of quizzes completed by the user. */\n  completedQuizzes: Array<{\n    quiz: DefaultDocumentIDType | { id: DefaultDocumentIDType }\n    score: number\n    completedAt: string\n  }>\n}\n\n/**\n * An array of CourseProgress objects, representing a user's progress across all their courses.\n */\nexport type Progress = CourseProgress[]\n\n/**\n * Defines the shape of the LMS React Context.\n */\nexport type LMSContextType = {\n  /** A list of all users. */\n  users: LMSUser[]\n  /** A list of all courses. */\n  courses: Course[]\n  /** A list of topics for the currently viewed course. */\n  topics: Topic[]\n  /** A list of lessons for the currently viewed topic. */\n  lessons: Lesson[]\n  /** The progress of the current user across all courses. */\n  progress: Progress\n  /** A list of quizzes for the currently viewed lesson. */\n  quizzes: Quiz[]\n  /** A list of certificates earned by the current user. */\n  certificates: Certificate[]\n  /** A list of course IDs the current user is enrolled in. */\n  enrolledCourses: DefaultDocumentIDType[]\n  /** A list of course IDs the current user has completed. */\n  completedCourses: DefaultDocumentIDType[]\n  /** Enrolls the current user in a course. */\n  enroll: (courseId: DefaultDocumentIDType) => Promise<void>\n  /** Marks a course as complete for the current user. */\n  completeCourse: (courseId: DefaultDocumentIDType) => Promise<void>\n  /** Marks a lesson as complete for the current user. */\n  completeLesson: (\n    courseId: DefaultDocumentIDType,\n    lessonId: DefaultDocumentIDType,\n  ) => Promise<void>\n  /** Submits the user's answers for a quiz. */\n  submitQuiz: (\n    courseId: DefaultDocumentIDType,\n    quizId: DefaultDocumentIDType,\n    answers: Record<string, unknown>,\n  ) => Promise<void>\n  /** Adds a user to a group with a specific role. */\n  addUserToGroup: (\n    groupId: DefaultDocumentIDType,\n    userId: DefaultDocumentIDType,\n    role: 'leader' | 'student',\n  ) => Promise<void>\n  /** Gets the progress for a specific course from the local state. */\n  getProgress: (courseId: DefaultDocumentIDType) => CourseProgress | undefined\n  /** Fetches the latest progress data from the server. */\n  fetchProgress: () => Promise<void>\n  /** Fetches a list of all users. */\n  fetchUsers: () => Promise<void>\n  /** Fetches a list of all courses. */\n  fetchCourses: () => Promise<void>\n  /** Fetches the topics for a specific course. */\n  fetchTopics: (courseId: DefaultDocumentIDType) => Promise<void>\n  /** Fetches the lessons for a specific topic. */\n  fetchLessons: (topicId: DefaultDocumentIDType) => Promise<void>\n  /** Fetches the quizzes for a specific lesson. */\n  fetchQuizzes: (lessonId: DefaultDocumentIDType) => Promise<void>\n  /** Generates a new certificate for a completed course. */\n  generateCertificate: (courseId: DefaultDocumentIDType) => Promise<void>\n  /** Adds an existing certificate to a user for a completed course. */\n  addCertificate: (courseId: DefaultDocumentIDType, certificateId: DefaultDocumentIDType) => Promise<void>\n  /** Whether the provider is currently fetching data. */\n  isLoading: boolean\n  /** Any error that occurred during data fetching. */\n  error: Error | null\n}\n\n/**\n * Defines the props for the LMSProvider component.\n */\nexport type LMSProviderProps = {\n  /** The child components to be rendered within the provider. */\n  children: React.ReactNode\n  /** API configuration for the provider. */\n  api?: {\n    /** The base URL of the Payload server. */\n    serverURL?: string\n    /** The API route, e.g., '/api'. */\n    apiRoute?: string\n  }\n  /**\n   * Whether to sync the user's progress with localStorage.\n   * Can be a boolean or an object to override the default localStorage key.\n   * @default true\n   */\n  syncLocalStorage?: boolean\n}\n"],"names":[],"mappings":"AA8GA;;CAEC,GACD,WAgBC"}