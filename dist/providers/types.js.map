{"version":3,"sources":["../../src/providers/types.ts"],"sourcesContent":["import type { DefaultDocumentIDType, TypedCollection } from 'payload'\nimport type React from 'react'\n\n\n\nexport type LMSUser = TypedCollection['users']\nexport type Course = TypedCollection['courses']\nexport type Lesson = TypedCollection['lessons'] & {\n  topic?: DefaultDocumentIDType | Topic\n  course?: DefaultDocumentIDType | Course\n}\nexport type Quiz = TypedCollection['quizzes'] & { lesson?: DefaultDocumentIDType | Lesson }\nexport type Certificate = TypedCollection['certificates']\nexport type Topic = TypedCollection['topics'] & { course?: DefaultDocumentIDType | Course }\n\nexport type CourseProgress = {\n  course: DefaultDocumentIDType | Course\n  completed: boolean\n  completedLessons: Array<{\n    lesson: DefaultDocumentIDType | Lesson\n    completedAt: string\n  }>\n  completedQuizzes: Array<{\n    quiz: DefaultDocumentIDType | Quiz\n    score: number\n    completedAt: string\n  }>\n}\n\nexport type Progress = CourseProgress[]\n\nexport type LMSContextType = {\n  users: LMSUser[]\n  courses: Course[]\n  topics: Topic[]\n  lessons: Lesson[]\n  progress: Progress\n  quizzes: Quiz[]\n  certificates: Certificate[]\n  enrolledCourses: Course[]\n  completedCourses: Course[]\n  enroll: (courseId: DefaultDocumentIDType) => Promise<void>\n  completeCourse: (courseId: DefaultDocumentIDType) => Promise<void>\n  completeLesson: (\n    courseId: DefaultDocumentIDType,\n    lessonId: DefaultDocumentIDType,\n  ) => Promise<void>\n  submitQuiz: (\n    courseId: DefaultDocumentIDType,\n    quizId: DefaultDocumentIDType,\n    answers: Record<string, unknown>,\n  ) => Promise<void>\n  addUserToGroup: (\n    groupId: DefaultDocumentIDType,\n    userId: DefaultDocumentIDType,\n    role: 'leader' | 'student',\n  ) => Promise<void>\n  getProgress: (courseId: DefaultDocumentIDType) => CourseProgress | undefined\n  fetchProgress: () => Promise<void>\n  fetchUsers: () => Promise<void>\n  fetchCourses: () => Promise<void>\n  fetchTopics: (courseId: DefaultDocumentIDType) => Promise<void>\n  fetchLessons: (topicId: DefaultDocumentIDType) => Promise<void>\n  fetchQuizzes: (lessonId: DefaultDocumentIDType) => Promise<void>\n  generateCertificate: (courseId: DefaultDocumentIDType) => Promise<void>\n  isLoading: boolean\n  error: Error | null\n}\n\nexport type LMSProviderProps = {\n  children: React.ReactNode\n  api?: {\n    serverURL?: string\n    apiRoute?: string\n  }\n  syncLocalStorage?: boolean\n}\n"],"names":[],"mappings":"AAqEA,WAOC"}