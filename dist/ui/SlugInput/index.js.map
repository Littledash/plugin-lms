{"version":3,"sources":["../../../src/ui/SlugInput/index.tsx"],"sourcesContent":["'use client'\nimport React, { useCallback, useEffect } from 'react'\nimport { TextFieldClientProps } from 'payload'\n\nimport { useField, Button, TextInput, FieldLabel, useFormFields, useForm } from '@payloadcms/ui'\n\nimport { formatSlug } from './formatSlug.js'\nimport './index.scss'\n\ntype SlugComponentProps = {\n  fieldToUse: string\n  checkboxFieldPath: string\n} & TextFieldClientProps\n\nexport const SlugInput: React.FC<SlugComponentProps> = ({\n  field,\n  fieldToUse,\n  checkboxFieldPath: checkboxFieldPathFromProps,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field\n\n  const checkboxFieldPath = path?.includes('.')\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps\n\n  const { value, setValue } = useField<string>({ path: path || field.name })\n\n  const { dispatchFields } = useForm()\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string\n  })\n\n  // The value of the field we're listening to for the slug\n  const targetFieldValue = useFormFields(([fields]) => {\n    return fields[fieldToUse]?.value as string\n  })\n\n  useEffect(() => {\n    if (checkboxValue) {\n      if (targetFieldValue) {\n        const formattedSlug = formatSlug(targetFieldValue)\n\n        if (value !== formattedSlug) setValue(formattedSlug)\n      } else {\n        if (value !== '') setValue('')\n      }\n    }\n  }, [targetFieldValue, checkboxValue, setValue, value])\n\n  const handleLock = useCallback(\n    (e: React.MouseEvent<Element>) => {\n      e.preventDefault()\n\n      dispatchFields({\n        type: 'UPDATE',\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      })\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  )\n\n  const readOnly = readOnlyFromProps || checkboxValue\n\n  return (\n    <div className=\"field-type slug-field-component\">\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n\n        <Button className=\"lock-button\" buttonStyle=\"none\" onClick={handleLock}>\n          {checkboxValue ? 'Unlock' : 'Lock'}\n        </Button>\n      </div>\n\n      <TextInput\n        value={value}\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n      />\n    </div>\n  )\n}\n"],"names":["React","useCallback","useEffect","useField","Button","TextInput","FieldLabel","useFormFields","useForm","formatSlug","SlugInput","field","fieldToUse","checkboxFieldPath","checkboxFieldPathFromProps","path","readOnly","readOnlyFromProps","label","includes","value","setValue","name","dispatchFields","checkboxValue","fields","targetFieldValue","formattedSlug","handleLock","e","preventDefault","type","div","className","htmlFor","buttonStyle","onClick","onChange","Boolean"],"mappings":"AAAA;;AACA,OAAOA,SAASC,WAAW,EAAEC,SAAS,QAAQ,QAAO;AAGrD,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,aAAa,EAAEC,OAAO,QAAQ,iBAAgB;AAEhG,SAASC,UAAU,QAAQ,kBAAiB;AAC5C,OAAO,eAAc;AAOrB,OAAO,MAAMC,YAA0C,CAAC,EACtDC,KAAK,EACLC,UAAU,EACVC,mBAAmBC,0BAA0B,EAC7CC,IAAI,EACJC,UAAUC,iBAAiB,EAC5B;IACC,MAAM,EAAEC,KAAK,EAAE,GAAGP;IAElB,MAAME,oBAAoBE,MAAMI,SAAS,OACrC,GAAGJ,KAAK,CAAC,EAAED,4BAA4B,GACvCA;IAEJ,MAAM,EAAEM,KAAK,EAAEC,QAAQ,EAAE,GAAGlB,SAAiB;QAAEY,MAAMA,QAAQJ,MAAMW,IAAI;IAAC;IAExE,MAAM,EAAEC,cAAc,EAAE,GAAGf;IAE3B,4BAA4B;IAC5B,4DAA4D;IAC5D,MAAMgB,gBAAgBjB,cAAc,CAAC,CAACkB,OAAO;QAC3C,OAAOA,MAAM,CAACZ,kBAAkB,EAAEO;IACpC;IAEA,yDAAyD;IACzD,MAAMM,mBAAmBnB,cAAc,CAAC,CAACkB,OAAO;QAC9C,OAAOA,MAAM,CAACb,WAAW,EAAEQ;IAC7B;IAEAlB,UAAU;QACR,IAAIsB,eAAe;YACjB,IAAIE,kBAAkB;gBACpB,MAAMC,gBAAgBlB,WAAWiB;gBAEjC,IAAIN,UAAUO,eAAeN,SAASM;YACxC,OAAO;gBACL,IAAIP,UAAU,IAAIC,SAAS;YAC7B;QACF;IACF,GAAG;QAACK;QAAkBF;QAAeH;QAAUD;KAAM;IAErD,MAAMQ,aAAa3B,YACjB,CAAC4B;QACCA,EAAEC,cAAc;QAEhBP,eAAe;YACbQ,MAAM;YACNhB,MAAMF;YACNO,OAAO,CAACI;QACV;IACF,GACA;QAACA;QAAeX;QAAmBU;KAAe;IAGpD,MAAMP,WAAWC,qBAAqBO;IAEtC,qBACE,MAACQ;QAAIC,WAAU;;0BACb,MAACD;gBAAIC,WAAU;;kCACb,KAAC3B;wBAAW4B,SAAS,CAAC,MAAM,EAAEnB,MAAM;wBAAEG,OAAOA;;kCAE7C,KAACd;wBAAO6B,WAAU;wBAAcE,aAAY;wBAAOC,SAASR;kCACzDJ,gBAAgB,WAAW;;;;0BAIhC,KAACnB;gBACCe,OAAOA;gBACPiB,UAAUhB;gBACVN,MAAMA,QAAQJ,MAAMW,IAAI;gBACxBN,UAAUsB,QAAQtB;;;;AAI1B,EAAC"}