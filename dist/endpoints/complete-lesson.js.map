{"version":3,"sources":["../../src/endpoints/complete-lesson.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, type Endpoint } from 'payload'\nimport { CourseProgress } from '../providers/types.js'\n\ntype Args = {\n  userSlug: string\n}\n\ntype CompleteLessonHandler = (args: Args) => Endpoint['handler']\n\nexport const completeLessonHandler: CompleteLessonHandler = ({ userSlug = 'users'}) => \n  async (req) => {\n\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const lessonId = data?.lessonId\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to complete a lesson.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId || !lessonId) {\n    return Response.json({ message: 'Course ID and Lesson ID are required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const coursesProgress = currentUser.coursesProgress || []\n    \n    // Check if course progress already exists for this course\n    let courseProgressIndex = coursesProgress.findIndex((c: CourseProgress) => {\n      const courseIdToCompare = typeof c.course === 'object' ? c.course.id : c.course\n      return courseIdToCompare === courseId\n    })\n    \n    if (courseProgressIndex === -1) {\n      // Create new course progress entry if it doesn't exist\n      const newCourseProgress = {\n        course: courseId,\n        completed: false,\n        completedLessons: [],\n        completedQuizzes: [],\n      }\n      coursesProgress.push(newCourseProgress)\n      courseProgressIndex = coursesProgress.length - 1\n    }\n    \n    const courseProgress = coursesProgress[courseProgressIndex]\n    \n    // Check if lesson is already completed\n    const lessonExists = courseProgress.completedLessons.some((cl: { lesson: string | { id: string } }) => {\n      const lessonIdToCompare = typeof cl.lesson === 'object' ? cl.lesson.id : cl.lesson\n      return lessonIdToCompare === lessonId\n    })\n    \n    if (!lessonExists) {\n      // Add the completed lesson\n      courseProgress.completedLessons.push({\n        lesson: lessonId,\n        completedAt: new Date().toISOString(),\n      })\n    }\n\n    await payload.update({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      data: {\n        coursesProgress,\n      },\n    })\n\n    payload.logger.info(`User ${user.id} completed lesson ${lessonId} in course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully completed lesson.' })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","completeLessonHandler","userSlug","req","data","user","payload","courseId","lessonId","Response","json","message","status","currentUser","findByID","collection","id","depth","coursesProgress","courseProgressIndex","findIndex","c","courseIdToCompare","course","newCourseProgress","completed","completedLessons","completedQuizzes","push","length","courseProgress","lessonExists","some","cl","lessonIdToCompare","lesson","completedAt","Date","toISOString","update","logger","info","success","error","Error"],"mappings":"AAAA,SAASA,uBAAuB,QAAuC,UAAS;AAShF,OAAO,MAAMC,wBAA+C,CAAC,EAAEC,WAAW,OAAO,EAAC,GAChF,OAAOC;QAEP,MAAMH,wBAAwBG;QAC9B,MAAMC,OAAOD,IAAIC,IAAI;QACrB,MAAMC,OAAOF,IAAIE,IAAI;QACrB,MAAMC,UAAUH,IAAIG,OAAO;QAC3B,MAAMC,WAAWH,MAAMG;QACvB,MAAMC,WAAWJ,MAAMI;QAEvB,IAAI,CAACH,MAAM;YACT,OAAOI,SAASC,IAAI,CAClB;gBAAEC,SAAS;YAA8C,GACzD;gBAAEC,QAAQ;YAAI;QAElB;QAEA,IAAI,CAACL,YAAY,CAACC,UAAU;YAC1B,OAAOC,SAASC,IAAI,CAAC;gBAAEC,SAAS;YAAwC,GAAG;gBAAEC,QAAQ;YAAI;QAC3F;QAEA,IAAI;YACF,MAAMC,cAAc,MAAMP,QAAQQ,QAAQ,CAAC;gBACzCC,YAAYb;gBACZc,IAAIX,KAAKW,EAAE;gBACXC,OAAO;YACT;YAEA,IAAI,CAACJ,aAAa;gBAChB,OAAOJ,SAASC,IAAI,CAAC;oBAAEC,SAAS;gBAAkB,GAAG;oBAAEC,QAAQ;gBAAI;YACrE;YAEA,MAAMM,kBAAkBL,YAAYK,eAAe,IAAI,EAAE;YAEzD,0DAA0D;YAC1D,IAAIC,sBAAsBD,gBAAgBE,SAAS,CAAC,CAACC;gBACnD,MAAMC,oBAAoB,OAAOD,EAAEE,MAAM,KAAK,WAAWF,EAAEE,MAAM,CAACP,EAAE,GAAGK,EAAEE,MAAM;gBAC/E,OAAOD,sBAAsBf;YAC/B;YAEA,IAAIY,wBAAwB,CAAC,GAAG;gBAC9B,uDAAuD;gBACvD,MAAMK,oBAAoB;oBACxBD,QAAQhB;oBACRkB,WAAW;oBACXC,kBAAkB,EAAE;oBACpBC,kBAAkB,EAAE;gBACtB;gBACAT,gBAAgBU,IAAI,CAACJ;gBACrBL,sBAAsBD,gBAAgBW,MAAM,GAAG;YACjD;YAEA,MAAMC,iBAAiBZ,eAAe,CAACC,oBAAoB;YAE3D,uCAAuC;YACvC,MAAMY,eAAeD,eAAeJ,gBAAgB,CAACM,IAAI,CAAC,CAACC;gBACzD,MAAMC,oBAAoB,OAAOD,GAAGE,MAAM,KAAK,WAAWF,GAAGE,MAAM,CAACnB,EAAE,GAAGiB,GAAGE,MAAM;gBAClF,OAAOD,sBAAsB1B;YAC/B;YAEA,IAAI,CAACuB,cAAc;gBACjB,2BAA2B;gBAC3BD,eAAeJ,gBAAgB,CAACE,IAAI,CAAC;oBACnCO,QAAQ3B;oBACR4B,aAAa,IAAIC,OAAOC,WAAW;gBACrC;YACF;YAEA,MAAMhC,QAAQiC,MAAM,CAAC;gBACnBxB,YAAYb;gBACZc,IAAIX,KAAKW,EAAE;gBACXZ,MAAM;oBACJc;gBACF;YACF;YAEAZ,QAAQkC,MAAM,CAACC,IAAI,CAAC,CAAC,KAAK,EAAEpC,KAAKW,EAAE,CAAC,kBAAkB,EAAER,SAAS,WAAW,EAAED,UAAU;YAExF,OAAOE,SAASC,IAAI,CAAC;gBAAEgC,SAAS;gBAAM/B,SAAS;YAAiC;QAClF,EAAE,OAAOgC,OAAgB;YACvB,MAAMhC,UAAUgC,iBAAiBC,QAAQD,MAAMhC,OAAO,GAAG;YACzDL,QAAQkC,MAAM,CAACG,KAAK,CAAChC;YACrB,OAAOF,SAASC,IAAI,CAAC;gBAAEC;YAAQ,GAAG;gBAAEC,QAAQ;YAAI;QAClD;IACF,EAAC"}