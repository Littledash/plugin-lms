{"version":3,"sources":["../../src/endpoints/complete-lesson.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, type Endpoint, TypedCollection } from 'payload'\nimport { CourseProgress } from '../providers/types.js'\n\ntype Args = {\n  userSlug: string\n}\n\ntype CompleteLessonHandler = (args: Args) => Endpoint['handler']\n\nexport const completeLessonHandler: CompleteLessonHandler = ({ userSlug = 'users'}) => \n  async (req) => {\n\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const lessonId = data?.lessonId\n\n  let courseFinished = false\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to complete a lesson.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId || !lessonId) {\n    return Response.json({ message: 'Course ID and Lesson ID are required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const coursesProgress = currentUser.coursesProgress || []\n    \n    // Check if course progress already exists for this course\n    let courseProgressIndex = coursesProgress.findIndex((c: CourseProgress) => {\n      // Handle both full course objects and course IDs for backward compatibility\n      if (typeof c.course === 'object' && c.course !== null) {\n        return c.course.id === courseId\n      }\n      return c.course === courseId\n    })\n    \n    if (courseProgressIndex === -1) {\n      // Create new course progress entry if it doesn't exist\n      const newCourseProgress = {\n        course: courseId,\n        completed: false,\n        completedLessons: [],\n        completedQuizzes: [],\n      }\n      coursesProgress.push(newCourseProgress)\n      courseProgressIndex = coursesProgress.length - 1\n    }\n    \n    const courseProgress = coursesProgress[courseProgressIndex]\n    // Check if lesson is already completed\n    const lessonExists = courseProgress.completedLessons.some((cl: { lesson: string | { id: string } }) => {\n      // Handle both full lesson objects and lesson IDs for backward compatibility\n      if (typeof cl.lesson === 'object' && cl.lesson !== null) {\n        return cl.lesson.id === lessonId\n      }\n      return cl.lesson === lessonId\n    })\n    \n    if (!lessonExists) {\n      // Add the completed lesson\n      courseProgress.completedLessons.push({\n        lesson: lessonId,\n        completedAt: new Date().toISOString(),\n      })\n    }\n\n    // Check if all lessons in the course are completed\n    try {\n      const course = await payload.findByID({\n        collection: 'courses' as CollectionSlug,\n        id: courseId,\n        depth: 1,\n      })\n\n      if (course && course.lessons) {\n        // Count total required lessons (non-optional)\n        const totalRequiredLessons = course.lessons.filter((lessonItem: { lesson: string | { id: string }, isOptional?: boolean }) => !lessonItem.isOptional)\n        \n        // Get completed lesson IDs\n        const completedLessonIds = courseProgress.completedLessons.map((lesson: { lesson: string | { id: string } }) => \n          typeof lesson.lesson === 'object' && lesson.lesson !== null ? lesson.lesson.id : lesson.lesson\n        )\n        \n        // Check if all required lessons are completed\n        const allRequiredLessonsCompleted = totalRequiredLessons.every((lessonItem: { lesson: string | { id: string } }) => {\n          const lessonId = typeof lessonItem.lesson === 'object' && lessonItem.lesson !== null ? lessonItem.lesson.id : lessonItem.lesson\n          return completedLessonIds.includes(lessonId)\n        })\n\n        if (allRequiredLessonsCompleted && !courseProgress.completed) {\n          // Mark course as completed\n          courseProgress.completed = true\n          courseProgress.completedAt = new Date().toISOString()\n          \n          // Update course collection - add student to courseCompletedStudents and remove from enrolledStudents\n          const enrolledStudentIds = (Array.isArray(course.enrolledStudents) ? course.enrolledStudents : []).map(\n            (student: string | TypedCollection[typeof userSlug]) => (typeof student === 'object' ? student.id : student),\n          )\n          const courseCompletedStudents = (Array.isArray(course.courseCompletedStudents) ? course.courseCompletedStudents : []).map(\n            (student: string | TypedCollection[typeof userSlug]) => (typeof student === 'object' ? student.id : student),\n          )\n\n          // Remove user from enrolledStudents and add to courseCompletedStudents\n          const updatedEnrolledStudents = enrolledStudentIds.filter(id => id !== user.id)\n          const updatedCompletedStudents = courseCompletedStudents.includes(user.id) \n            ? courseCompletedStudents \n            : [...courseCompletedStudents, user.id]\n\n          await payload.update({\n            collection: 'courses' as CollectionSlug,\n            id: courseId,\n            data: {\n              enrolledStudents: updatedEnrolledStudents,\n              courseCompletedStudents: updatedCompletedStudents,\n            },\n          })\n\n          payload.logger.info(`User ${user.id} completed course ${courseId} after completing lesson ${lessonId}`)\n          courseFinished = true\n        }\n      }\n    } catch (error) {\n      payload.logger.warn(`Could not check course completion for course ${courseId}: ${error}`)\n    }\n\n    await payload.update({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      data: {\n        coursesProgress,\n      },\n    })\n\n    payload.logger.info(`User ${user.id} completed lesson ${lessonId} in course ${courseId}`)\n\n    if (courseFinished) {\n      return Response.json({ success: true, message: 'Successfully completed course and lesson.' })\n    }\n    return Response.json({ success: true, message: 'Successfully completed lesson.' })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","completeLessonHandler","userSlug","req","data","user","payload","courseId","lessonId","courseFinished","Response","json","message","status","currentUser","findByID","collection","id","depth","coursesProgress","courseProgressIndex","findIndex","c","course","newCourseProgress","completed","completedLessons","completedQuizzes","push","length","courseProgress","lessonExists","some","cl","lesson","completedAt","Date","toISOString","lessons","totalRequiredLessons","filter","lessonItem","isOptional","completedLessonIds","map","allRequiredLessonsCompleted","every","includes","enrolledStudentIds","Array","isArray","enrolledStudents","student","courseCompletedStudents","updatedEnrolledStudents","updatedCompletedStudents","update","logger","info","error","warn","success","Error"],"mappings":"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"}