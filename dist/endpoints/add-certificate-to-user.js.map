{"version":3,"sources":["../../src/endpoints/add-certificate-to-user.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, TypedCollection, type Endpoint } from 'payload'\n\ntype Args = {\n  userSlug: string\n  courseSlug: string\n  certificatesSlug: string\n}\n\ntype AddCertificateToUserHandler = (args: Args) => Endpoint['handler']\n\nexport const addCertificateToUserHandler: AddCertificateToUserHandler = ({ userSlug = 'users', courseSlug = 'courses', certificatesSlug = 'certificates' }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const certificateId = data?.certificateId\n  const userId = data?.userId\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to add a certificate.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  if (!certificateId) {\n    return Response.json({ message: 'Certificate ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: userId ? userId : user.id,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    // Fetch the certificate object\n    const certificate = await payload.findByID({\n      collection: certificatesSlug as CollectionSlug,\n      id: certificateId,\n    })\n\n    if (!certificate) {\n      return Response.json({ message: 'Certificate not found.' }, { status: 404 })\n    }\n\n    const completedCourses = (currentUser.completedCourses || []).map((course: string | TypedCollection[typeof courseSlug]) =>\n      typeof course === 'object' ? course.id : course,\n    )\n\n    if (!completedCourses.includes(courseId)) {\n      return Response.json({ message: 'You have not completed this course.' }, { status: 403 })\n    }\n\n    const existingCertificates = (currentUser.certificates || []).map((cert: { certificate: string | TypedCollection[typeof certificatesSlug], course: string | TypedCollection[typeof courseSlug] }) => ({\n      certificateId: typeof cert.certificate === 'object' ? cert.certificate.id : cert.certificate,\n      courseId: typeof cert.course === 'object' ? cert.course.id : cert.course\n    }))\n\n    const hasExistingCertificate = existingCertificates.some((cert: { certificateId: string, courseId: string }) => \n      cert.certificateId === certificateId && cert.courseId === courseId\n    )\n\n    if (hasExistingCertificate) {\n      return Response.json({ message: 'You already have this certificate.' }, { status: 400 })\n    }\n\n    await payload.update({\n      collection: userSlug as CollectionSlug,\n      id: currentUser.id,\n      data: {\n        certificates: [\n          ...(currentUser.certificates || []),\n          {\n            certificate: certificateId,\n            course: courseId,\n            completedDate: new Date().toISOString(),\n          },\n        ],\n      },\n    })\n\n    \n\n    payload.logger.info(`Certificate added to user ${currentUser.id} for course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully added certificate to user.' })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","addCertificateToUserHandler","userSlug","courseSlug","certificatesSlug","req","data","user","payload","courseId","certificateId","userId","Response","json","message","status","currentUser","findByID","collection","id","depth","certificate","completedCourses","map","course","includes","existingCertificates","certificates","cert","hasExistingCertificate","some","update","completedDate","Date","toISOString","logger","info","success","error","Error"],"mappings":"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"}