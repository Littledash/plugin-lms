{"version":3,"sources":["../../src/endpoints/generate-certificate.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, type Endpoint } from 'payload'\nimport { createPDF } from '../utilities/createPDF.js'\n\ntype Args = {\n  userSlug: string\n  courseSlug: string\n  mediaSlug: string\n  certificatesSlug: string\n  baseUrl?: string\n}\n\ntype GenerateCertificateHandler = (args: Args) => Endpoint['handler']\n\nexport const generateCertificateHandler: GenerateCertificateHandler = ({ userSlug = 'users', courseSlug = 'courses', mediaSlug = 'media', certificatesSlug = 'certificates', baseUrl = process.env.PAYLOAD_PUBLIC_SERVER_URL }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const certificateId = data?.certificateId\n  const userId = data?.userId\n\n  if (!user || !userId) {\n    return Response.json(\n      { message: 'You must be logged in to generate a certificate.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: userId ? userId : user.id,\n      depth: 1,\n    })\n\n    const course = await payload.findByID({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      depth: 1,\n    })\n\n    const certificate = await payload.findByID({\n      collection: certificatesSlug as CollectionSlug,\n      id: certificateId,\n      depth: 1,\n    })\n\n    if ( !course ) {\n      return Response.json({ message: 'Course not found.' }, { status: 404 })\n    }\n\n    if ( !certificate ) {\n      return Response.json({ message: 'Certificate not found.' }, { status: 404 })\n    }\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    let certificatePDF = null\n\n\n    //\n    //\n    payload.logger.info(`Course:`, JSON.stringify(course, null, 2));\n    payload.logger.info(`Certificate:`, JSON.stringify(certificate, null, 2));\n    payload.logger.info(`Current user:`, JSON.stringify(currentUser, null, 2));\n  \n    // Validate required data\n    if (!currentUser.firstName || !currentUser.lastName) {\n      return Response.json({ message: 'User name is incomplete.' }, { status: 400 })\n    }\n    \n    if (!course.title) {\n      return Response.json({ message: 'Course title is missing.' }, { status: 400 })\n    }\n\n    const certificateData = {\n      studentName: `${currentUser.firstName} ${currentUser.lastName}`,\n      courseTitle: course.title,\n      completionDate: new Date().toLocaleDateString(),\n      certificateNumber: `CERT-${courseId}-${certificate.id}-${currentUser.id}`,\n      templateImage: certificate.template?.url || '', // Provide empty string as fallback\n      fontFamily: 'Poppins',\n      authorName: certificate.authors && certificate.authors.length > 0 \n        ? `${certificate.authors[0]?.firstName || ''} ${certificate.authors[0]?.lastName || ''}`.trim()\n        : undefined\n    }\n\n\n\n  \n  const certificateFileName = `certificate-${courseId}-${certificate.id}-${currentUser.id}.pdf`;\n  \n  const existingCertificate = await payload.find({\n    collection: mediaSlug as CollectionSlug,\n    where: {\n      filename: {\n        equals: certificateFileName\n      }\n    }\n  })\n  payload.logger.info(`Existing certificate:`, JSON.stringify(existingCertificate, null, 2));\n\n  if (existingCertificate.docs.length > 0) {\n    payload.logger.info(`Certificate already exists for user ${currentUser.id} for course ${courseId}`)\n    certificatePDF = existingCertificate\n  } else {\n    payload.logger.info(`Creating new certificate for user ${currentUser.id} for course ${courseId}`)\n    payload.logger.info(`Generating certificate for user ${currentUser.id} for course ${courseId}`)\n    payload.logger.info(`Certificate data:`, JSON.stringify(certificateData, null, 2));\n  \n    payload.logger.info(`Creating PDF for user ${currentUser.id} for course ${courseId}`)\n    payload.logger.info(`About to call createPDF with certificate data:`, JSON.stringify(certificateData, null, 2))\n    \n    let createPDFRes\n    try {\n      payload.logger.info(`Calling createPDF function...`)\n      createPDFRes = await createPDF(certificateData)\n      payload.logger.info(`PDF created successfully for user ${currentUser.id} for course ${courseId}`)\n    } catch (pdfError) {\n      payload.logger.error(`Failed to create PDF for user ${currentUser.id} for course ${courseId}`)\n      payload.logger.error(`PDF Error type:`, typeof pdfError)\n      payload.logger.error(`PDF Error details:`, pdfError)\n      payload.logger.error(`PDF Error stack:`, pdfError instanceof Error ? pdfError.stack : 'No stack trace available')\n      payload.logger.error(`PDF Error message:`, pdfError instanceof Error ? pdfError.message : String(pdfError))\n      payload.logger.error(`PDF Error name:`, pdfError instanceof Error ? pdfError.name : 'Not an Error object')\n      \n      // Try to stringify the error for more details\n      try {\n        payload.logger.error(`PDF Error JSON:`, JSON.stringify(pdfError, null, 2))\n      } catch (stringifyError) {\n        payload.logger.error(`Could not stringify error:`, stringifyError)\n      }\n      \n      return Response.json({ \n        message: 'Failed to generate certificate PDF.', \n        error: pdfError instanceof Error ? pdfError.message : String(pdfError),\n        details: pdfError \n      }, { status: 500 })\n    }\n\n    payload.logger.info(`Generated certificate for user ${currentUser.id} for course ${courseId}`)\n    \n    // Convert Uint8Array to Blob - use type assertion to handle ArrayBufferLike issue\n    const pdfBlob = new Blob([createPDFRes as any], { type: 'application/pdf' })\n    \n    const pdfFormData = new FormData()\n    pdfFormData.append('file', pdfBlob, certificateFileName)\n    pdfFormData.append('_payload', \n      JSON.stringify({\n        title: 'Certificate - ' + course.title + ' - ' + currentUser.firstName + ' ' + currentUser.lastName,\n        mimeType: 'application/pdf',\n      })\n    )\n\n  const certificateMedia = await fetch(`${baseUrl}/api/${mediaSlug}`, {\n    method: 'POST',\n    body: pdfFormData,\n    headers: {\n      Authorization: `users API-Key ${process.env.PAYLOAD_API_KEY}`,\n    },\n  })\n\n  const certificateMediaData = await certificateMedia.json()\n\n    payload.logger.info(`Created new certificate for user ${currentUser.id} for course ${courseId}`)\n    certificatePDF = certificateMediaData\n    payload.logger.info(`Set certificatePDF to ${certificateMediaData.id}`)\n  }\n    \n\n    payload.logger.info(`Generated certificate for user ${currentUser.id} for course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully generated certificate.', certificate: certificatePDF })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}"],"names":["addDataAndFileToRequest","createPDF","generateCertificateHandler","userSlug","courseSlug","mediaSlug","certificatesSlug","baseUrl","process","env","PAYLOAD_PUBLIC_SERVER_URL","req","data","user","payload","courseId","certificateId","userId","Response","json","message","status","currentUser","findByID","collection","id","depth","course","certificate","certificatePDF","logger","info","JSON","stringify","firstName","lastName","title","certificateData","studentName","courseTitle","completionDate","Date","toLocaleDateString","certificateNumber","templateImage","template","url","fontFamily","authorName","authors","length","trim","undefined","certificateFileName","existingCertificate","find","where","filename","equals","docs","createPDFRes","pdfError","error","Error","stack","String","name","stringifyError","details","pdfBlob","Blob","type","pdfFormData","FormData","append","mimeType","certificateMedia","fetch","method","body","headers","Authorization","PAYLOAD_API_KEY","certificateMediaData","success"],"mappings":"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"}