{"version":3,"sources":["../../src/endpoints/generate-certificate.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, TypedCollection, type Endpoint } from 'payload'\nimport { renderToStream, type DocumentProps } from '@react-pdf/renderer'\nimport React from 'react'\nimport { CertificateDocument } from '../ui/Certificate/index.js'\ntype Args = {\n  userSlug: string\n  courseSlug: string\n  mediaSlug: string\n}\n\nasync function renderToBuffer(doc: React.ReactElement<DocumentProps>) {\n  const stream = await renderToStream(doc)\n  const chunks: Buffer[] = []\n  for await (const chunk of stream) {\n    chunks.push(chunk as Buffer)\n  }\n  return Buffer.concat(chunks)\n}\n\ntype GenerateCertificateHandler = (args: Args) => Endpoint['handler']\n\nexport const generateCertificateHandler: GenerateCertificateHandler = ({ userSlug = 'users', courseSlug = 'courses', mediaSlug = 'media' }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const certificate = data?.certificate\n  const userId = data?.userId\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to generate a certificate.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: userId ? userId : user.id,\n      depth: 1,\n    })\n\n    const course = await payload.findByID({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const completedCourses = (currentUser.completedCourses || []).map((course: string | TypedCollection[typeof courseSlug]) =>\n      typeof course === 'object' ? course.id : course,\n    )\n\n    if (!completedCourses.includes(courseId)) {\n      return Response.json({ message: 'You have not completed this course.' }, { status: 403 })\n    }\n\n    let certificatePDF = null\n\n  \n    const certificateData = {\n      studentName: currentUser.firstName + ' ' + currentUser.lastName,\n      courseTitle: course.title, // should be the course title\n      completionDate: new Date().toLocaleDateString(),\n      certificateNumber: `CERT-${courseId}-${certificate.id}-${currentUser.id}`,\n      templateImage: certificate.template?.url, // A4 landscape\n      fontFamily: 'Poppins',\n      authorName: certificate.authors?.[0]?.name\n  }\n\n  const pdfBuffer = await renderToBuffer(React.createElement(CertificateDocument, certificateData) as React.ReactElement<DocumentProps>);\n\n  const certificateFileName = `certificate-${courseId}-${certificate.id}-${currentUser.id}.pdf`;\n  \n  const existingCertificate = await payload.find({\n    collection: mediaSlug as CollectionSlug,\n    where: {\n      filename: {\n        equals: certificateFileName\n      }\n    }\n  })\n\n  if (existingCertificate.docs.length > 0) {\n    \n    certificatePDF = existingCertificate\n  } else {\n  //   certificatePDF = await generateCertificatePDF(courseId, user.id)\n   const certificateMedia = await payload.create({\n      collection: mediaSlug as CollectionSlug,\n      data: {\n        filename: certificateFileName,\n        title: 'Certificate - ' + course.title + ' - ' + currentUser.firstName + ' ' + currentUser.lastName,\n        mimeType: 'application/pdf',\n        filesize:  pdfBuffer?.length,\n      }\n    })\n\n    certificatePDF = certificateMedia\n  }\n\n    // const certificatePDF = await generateCertificatePDF(courseId, user.id)\n\n\n    \n\n    payload.logger.info(`Generated certificate for user ${currentUser.id} for course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully generated certificate.', certificate: certificatePDF })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}"],"names":["addDataAndFileToRequest","renderToStream","React","CertificateDocument","renderToBuffer","doc","stream","chunks","chunk","push","Buffer","concat","generateCertificateHandler","userSlug","courseSlug","mediaSlug","req","data","user","payload","courseId","certificate","userId","Response","json","message","status","currentUser","findByID","collection","id","depth","course","completedCourses","map","includes","certificatePDF","certificateData","studentName","firstName","lastName","courseTitle","title","completionDate","Date","toLocaleDateString","certificateNumber","templateImage","template","url","fontFamily","authorName","authors","name","pdfBuffer","createElement","certificateFileName","existingCertificate","find","where","filename","equals","docs","length","certificateMedia","create","mimeType","filesize","logger","info","success","error","Error"],"mappings":"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"}