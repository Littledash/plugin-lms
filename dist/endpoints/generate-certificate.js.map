{"version":3,"sources":["../../src/endpoints/generate-certificate.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, TypedCollection, type Endpoint } from 'payload'\n\ntype Args = {\n  userSlug: string\n  courseSlug: string\n  certificatesSlug: string\n}\n\ntype GenerateCertificateHandler = (args: Args) => Endpoint['handler']\n\nexport const generateCertificateHandler: GenerateCertificateHandler = ({ userSlug = 'users', courseSlug = 'courses', certificatesSlug = 'certificates' }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to generate a certificate.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const completedCourses = (currentUser.completedCourses || []).map((course: string | TypedCollection[typeof courseSlug]) =>\n      typeof course === 'object' ? course.id : course,\n    )\n\n    if (!completedCourses.includes(courseId)) {\n      return Response.json({ message: 'You have not completed this course.' }, { status: 403 })\n    }\n\n    const newCertificate = await payload.create({\n      collection: certificatesSlug as CollectionSlug,\n      data: {\n        user: user.id,\n        course: courseId,\n        issuedAt: new Date().toISOString(),\n      },\n    })\n\n    \n\n    payload.logger.info(`Generated certificate for user ${user.id} for course ${courseId}`)\n\n    return Response.json(newCertificate)\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","generateCertificateHandler","userSlug","courseSlug","certificatesSlug","req","data","user","payload","courseId","Response","json","message","status","currentUser","findByID","collection","id","depth","completedCourses","map","course","includes","newCertificate","create","issuedAt","Date","toISOString","logger","info","error","Error"],"mappings":"AAAA,SAASA,uBAAuB,QAAwD,UAAS;AAUjG,OAAO,MAAMC,6BAAyD,CAAC,EAAEC,WAAW,OAAO,EAAEC,aAAa,SAAS,EAAEC,mBAAmB,cAAc,EAAE,GAAK,OAAOC;QAClK,MAAML,wBAAwBK;QAC9B,MAAMC,OAAOD,IAAIC,IAAI;QACrB,MAAMC,OAAOF,IAAIE,IAAI;QACrB,MAAMC,UAAUH,IAAIG,OAAO;QAC3B,MAAMC,WAAWH,MAAMG;QAEvB,IAAI,CAACF,MAAM;YACT,OAAOG,SAASC,IAAI,CAClB;gBAAEC,SAAS;YAAmD,GAC9D;gBAAEC,QAAQ;YAAI;QAElB;QAEA,IAAI,CAACJ,UAAU;YACb,OAAOC,SAASC,IAAI,CAAC;gBAAEC,SAAS;YAAyB,GAAG;gBAAEC,QAAQ;YAAI;QAC5E;QAEA,IAAI;YACF,MAAMC,cAAc,MAAMN,QAAQO,QAAQ,CAAC;gBACzCC,YAAYd;gBACZe,IAAIV,KAAKU,EAAE;gBACXC,OAAO;YACT;YAEA,IAAI,CAACJ,aAAa;gBAChB,OAAOJ,SAASC,IAAI,CAAC;oBAAEC,SAAS;gBAAkB,GAAG;oBAAEC,QAAQ;gBAAI;YACrE;YAEA,MAAMM,mBAAmB,AAACL,CAAAA,YAAYK,gBAAgB,IAAI,EAAE,AAAD,EAAGC,GAAG,CAAC,CAACC,SACjE,OAAOA,WAAW,WAAWA,OAAOJ,EAAE,GAAGI;YAG3C,IAAI,CAACF,iBAAiBG,QAAQ,CAACb,WAAW;gBACxC,OAAOC,SAASC,IAAI,CAAC;oBAAEC,SAAS;gBAAsC,GAAG;oBAAEC,QAAQ;gBAAI;YACzF;YAEA,MAAMU,iBAAiB,MAAMf,QAAQgB,MAAM,CAAC;gBAC1CR,YAAYZ;gBACZE,MAAM;oBACJC,MAAMA,KAAKU,EAAE;oBACbI,QAAQZ;oBACRgB,UAAU,IAAIC,OAAOC,WAAW;gBAClC;YACF;YAIAnB,QAAQoB,MAAM,CAACC,IAAI,CAAC,CAAC,+BAA+B,EAAEtB,KAAKU,EAAE,CAAC,YAAY,EAAER,UAAU;YAEtF,OAAOC,SAASC,IAAI,CAACY;QACvB,EAAE,OAAOO,OAAgB;YACvB,MAAMlB,UAAUkB,iBAAiBC,QAAQD,MAAMlB,OAAO,GAAG;YACzDJ,QAAQoB,MAAM,CAACE,KAAK,CAAClB;YACrB,OAAOF,SAASC,IAAI,CAAC;gBAAEC;YAAQ,GAAG;gBAAEC,QAAQ;YAAI;QAClD;IACF,EAAC"}