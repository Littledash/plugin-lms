{"version":3,"sources":["../../src/endpoints/fetch-progress.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, type Endpoint, type DefaultDocumentIDType } from 'payload'\nimport type { CourseProgress } from '../providers/types.js'\n\ntype Args = {\n  userSlug: string\n  courseSlug?: string\n}\n\ntype FetchProgressHandler = (args: Args) => Endpoint['handler']\n\nexport const fetchProgressHandler: FetchProgressHandler = ({ userSlug = 'users', courseSlug = 'courses' }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const user = req.user\n  const payload = req.payload\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to fetch progress.' },\n      { status: 401 },\n    )\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const coursesProgress = currentUser.coursesProgress || []\n    const enrolledCourses = currentUser.enrolledCourses || []\n    const completedCourses = currentUser.completedCourses || []\n\n    // Calculate completion percentage for each course progress\n    const normalizedProgress = await Promise.all(\n      coursesProgress.map(async (progress: CourseProgress) => {\n        const courseId = typeof progress.course === 'object' && progress.course !== null ? progress.course.id : progress.course\n        \n        // Fetch course data to get total required lessons\n        let completionPercentage = 0\n        let courseCompletion = ''\n        try {\n          const course = await payload.findByID({\n            collection: courseSlug as CollectionSlug,\n            id: courseId,\n            depth: 1,\n          })\n          \n          if (course && course.lessons) {\n            // Count total required lessons (non-optional)\n            const totalRequiredLessons = course.lessons.filter((lessonItem: { lesson: string | { id: string }, isOptional?: boolean }) => !lessonItem.isOptional).length\n            \n            // Count completed lessons\n            const completedLessonIds = progress.completedLessons?.map((lesson) => \n              typeof lesson.lesson === 'object' && lesson.lesson !== null ? lesson.lesson.id : lesson.lesson\n            ) || []\n            \n            // Calculate percentage\n            if (totalRequiredLessons > 0) {\n              completionPercentage = Math.round((completedLessonIds.length / totalRequiredLessons) * 100)\n              courseCompletion = `${completedLessonIds.length}/${totalRequiredLessons}`\n            }\n          }\n        } catch (error) {\n          payload.logger.warn(`Could not fetch course ${courseId} for completion percentage calculation: ${error}`)\n        }\n\n        return {\n          ...progress,\n          course: courseId,\n          completionPercentage,\n          courseCompletion,\n          completedLessons: progress.completedLessons?.map((lesson) => ({\n            ...lesson,\n            lesson: typeof lesson.lesson === 'object' && lesson.lesson !== null ? lesson.lesson.id : lesson.lesson,\n          })) || [],\n          completedQuizzes: progress.completedQuizzes?.map((quiz) => ({\n            ...quiz,\n            quiz: typeof quiz.quiz === 'object' && quiz.quiz !== null ? quiz.quiz.id : quiz.quiz,\n          })) || [],\n        }\n      })\n    )\n\n    // Normalize enrolled and completed courses to use IDs only\n    const enrolledCoursesArray = Array.isArray(enrolledCourses) ? enrolledCourses : []\n    const completedCoursesArray = Array.isArray(completedCourses) ? completedCourses : []\n    \n    const normalizedEnrolledCourses = enrolledCoursesArray.map((course: DefaultDocumentIDType | { id: DefaultDocumentIDType }) => \n      typeof course === 'object' && course !== null ? course.id : course\n    )\n    const normalizedCompletedCourses = completedCoursesArray.map((course: DefaultDocumentIDType | { id: DefaultDocumentIDType }) => \n      typeof course === 'object' && course !== null ? course.id : course\n    )\n\n    payload.logger.info(`Fetched progress for user ${user.id}`)\n\n    return Response.json({\n      coursesProgress: normalizedProgress,\n      enrolledCourses: normalizedEnrolledCourses,\n      completedCourses: normalizedCompletedCourses,\n    })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","fetchProgressHandler","userSlug","courseSlug","req","user","payload","Response","json","message","status","currentUser","findByID","collection","id","depth","coursesProgress","enrolledCourses","completedCourses","normalizedProgress","Promise","all","map","progress","courseId","course","completionPercentage","courseCompletion","lessons","totalRequiredLessons","filter","lessonItem","isOptional","length","completedLessonIds","completedLessons","lesson","Math","round","error","logger","warn","completedQuizzes","quiz","enrolledCoursesArray","Array","isArray","completedCoursesArray","normalizedEnrolledCourses","normalizedCompletedCourses","info","Error"],"mappings":"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"}