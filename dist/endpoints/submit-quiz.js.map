{"version":3,"sources":["../../src/endpoints/submit-quiz.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, type Endpoint } from 'payload'\n\ntype Args = {\n  userSlug: string\n  quizzesSlug: string\n}\n\ntype SubmitQuizHandler = (args: Args) => Endpoint['handler']\n\nexport const submitQuizHandler: SubmitQuizHandler = ({ userSlug = 'users', quizzesSlug = 'quizzes' }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const quizId = data?.quizId\n  const answers = data?.answers\n\n  if (!user) {\n    return Response.json({ message: 'You must be logged in to submit a quiz.' }, { status: 401 })\n  }\n\n  if (!courseId || !quizId || !answers) {\n    return Response.json(\n      { message: 'Course ID, Quiz ID, and answers are required.' },\n      { status: 400 },\n    )\n  }\n\n  try {\n    const quiz = await payload.findByID({\n      collection: quizzesSlug as CollectionSlug,\n      id: quizId,\n      depth: 2, // Eager load questions and their answers\n    })\n\n    if (!quiz) {\n      return Response.json({ message: 'Quiz not found.' }, { status: 404 })\n    }\n\n    // Basic grading logic\n    let correctAnswers = 0\n    if (quiz.questions && Array.isArray(quiz.questions)) {\n      for (const question of quiz.questions) {\n        if (\n          question &&\n          typeof question === 'object' &&\n          'answers' in question &&\n          Array.isArray(question.answers)\n        ) {\n          const submittedAnswer = answers[question.id]\n          const correctAnswer = question.answers.find((a: { isCorrect: boolean; id: string }) => a.isCorrect)?.id\n          if (submittedAnswer === correctAnswer) {\n            correctAnswers++\n          }\n        }\n      }\n    }\n    const score = quiz.questions.length > 0 ? (correctAnswers / quiz.questions.length) * 100 : 0\n\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const coursesProgress = currentUser.coursesProgress || []\n    let courseProgressIndex = coursesProgress.findIndex((cp: { course: string }) => cp.course === courseId)\n    \n    if (courseProgressIndex === -1) {\n      // Create new course progress entry\n      coursesProgress.push({\n        course: courseId,\n        completed: false,\n        completedLessons: [],\n        completedQuizzes: [],\n      })\n      courseProgressIndex = coursesProgress.length - 1\n    }\n    \n    const courseProgress = coursesProgress[courseProgressIndex]\n    const quizExists = courseProgress.completedQuizzes.some((cq: { quiz: string }) => cq.quiz === quizId)\n    \n    if (!quizExists) {\n      courseProgress.completedQuizzes.push({\n        quiz: quizId,\n        score: score,\n        completedAt: new Date().toISOString(),\n      })\n    } else {\n      // Update existing quiz score\n      const quizIndex = courseProgress.completedQuizzes.findIndex((cq: { quiz: string }) => cq.quiz === quizId)\n      if (quizIndex !== -1) {\n        courseProgress.completedQuizzes[quizIndex].score = score\n        courseProgress.completedQuizzes[quizIndex].completedAt = new Date().toISOString()\n      }\n    }\n\n    await payload.update({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      data: {\n        coursesProgress,\n      },\n    })\n\n    payload.logger.info(\n      `User ${user.id} submitted quiz ${quizId} in course ${courseId} and scored ${score}`,\n    )\n\n    return Response.json({ success: true, score })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","submitQuizHandler","userSlug","quizzesSlug","req","data","user","payload","courseId","quizId","answers","Response","json","message","status","quiz","findByID","collection","id","depth","correctAnswers","questions","Array","isArray","question","submittedAnswer","correctAnswer","find","a","isCorrect","score","length","currentUser","coursesProgress","courseProgressIndex","findIndex","cp","course","push","completed","completedLessons","completedQuizzes","courseProgress","quizExists","some","cq","completedAt","Date","toISOString","quizIndex","update","logger","info","success","error","Error"],"mappings":"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"}