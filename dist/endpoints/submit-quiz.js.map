{"version":3,"sources":["../../src/endpoints/submit-quiz.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, type Endpoint, TypedCollection } from 'payload'\n\ntype Args = {\n  userSlug: string\n  quizzesSlug: string\n}\n\ntype SubmitQuizHandler = (args: Args) => Endpoint['handler']\n\nexport const submitQuizHandler: SubmitQuizHandler = ({ userSlug = 'users', quizzesSlug = 'quizzes' }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const quizId = data?.quizId\n  const answers = data?.answers\n\n  if (!user) {\n    return Response.json({ message: 'You must be logged in to submit a quiz.' }, { status: 401 })\n  }\n\n  if (!courseId || !quizId || !answers) {\n    return Response.json(\n      { message: 'Course ID, Quiz ID, and answers are required.' },\n      { status: 400 },\n    )\n  }\n\n  try {\n    const quiz = await payload.findByID({\n      collection: quizzesSlug as CollectionSlug,\n      id: quizId,\n      depth: 2, // Eager load questions and their answers\n    })\n\n    if (!quiz) {\n      return Response.json({ message: 'Quiz not found.' }, { status: 404 })\n    }\n\n    // Basic grading logic\n    let correctAnswers = 0\n    if (quiz.questions && Array.isArray(quiz.questions)) {\n      for (const question of quiz.questions) {\n        if (question && typeof question === 'object') {\n          const submittedAnswer = answers[question.id]\n          \n          // Handle different question types\n          if (question.questionType === 'trueFalse') {\n            // For true/false questions, compare with correctAnswer field\n            if (submittedAnswer === question.correctAnswer) {\n              correctAnswers++\n            }\n          } else if (question.questionType === 'multipleChoice' || question.questionType === 'singleChoice') {\n            // For multiple choice questions, find the correct choice ID\n            if (question.choices && Array.isArray(question.choices)) {\n              const correctChoice = question.choices.find((choice: { isCorrect: boolean; id: string }) => choice.isCorrect)\n              if (correctChoice && submittedAnswer === correctChoice.id) {\n                correctAnswers++\n              }\n            }\n          }\n          // Add support for other question types as needed\n        }\n      }\n    }\n    const score = quiz.questions.length > 0 ? (correctAnswers / quiz.questions.length) * 100 : 0\n\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const coursesProgress = currentUser.coursesProgress || []\n    let courseProgressIndex = coursesProgress.findIndex((cp: { course: string | { id: string } }) => {\n      // Handle both full course objects and course IDs for backward compatibility\n      if (typeof cp.course === 'object' && cp.course !== null) {\n        return cp.course.id === courseId\n      }\n      return cp.course === courseId\n    })\n    \n    if (courseProgressIndex === -1) {\n      // Create new course progress entry\n      coursesProgress.push({\n        course: courseId,\n        completed: false,\n        completedLessons: [],\n        completedQuizzes: [],\n      })\n      courseProgressIndex = coursesProgress.length - 1\n    }\n    \n    const courseProgress = coursesProgress[courseProgressIndex]\n    const quizExists = courseProgress.completedQuizzes.some((cq: { quiz: string | { id: string } }) => {\n      // Handle both full quiz objects and quiz IDs for backward compatibility\n      if (typeof cq.quiz === 'object' && cq.quiz !== null) {\n        return cq.quiz.id === quizId\n      }\n      return cq.quiz === quizId\n    })\n    \n    if (!quizExists) {\n      courseProgress.completedQuizzes.push({\n        quiz: quizId,\n        score: score,\n        completedAt: new Date().toISOString(),\n      })\n    } else {\n      // Update existing quiz score\n      const quizIndex = courseProgress.completedQuizzes.findIndex((cq: { quiz: string | { id: string } }) => {\n        // Handle both full quiz objects and quiz IDs for backward compatibility\n        if (typeof cq.quiz === 'object' && cq.quiz !== null) {\n          return cq.quiz.id === quizId\n        }\n        return cq.quiz === quizId\n      })\n      if (quizIndex !== -1) {\n\n        // Update the quiz score if the new score is higher. The user can only improve their score on the same quiz.\n        if (score > courseProgress.completedQuizzes[quizIndex].score) {\n          courseProgress.completedQuizzes[quizIndex].score = score\n          courseProgress.completedQuizzes[quizIndex].completedAt = new Date().toISOString()\n        }\n      }\n    }\n\n    await payload.update({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      data: {\n        coursesProgress,\n      },\n    })\n\n    payload.logger.info(\n      `User ${user.id} submitted quiz ${quizId} in course ${courseId} and scored ${score}`,\n    )\n\n    if ( score >= quiz.minimumScore ) {\n      // Mark the lesson as completed if quiz is passed\n      const lessonId = quiz.lesson\n      if (lessonId) {\n        const lessonExists = courseProgress.completedLessons.some((cl: { lesson: string | { id: string } }) => {\n          // Handle both full lesson objects and lesson IDs for backward compatibility\n          if (typeof cl.lesson === 'object' && cl.lesson !== null) {\n            return cl.lesson.id === lessonId\n          }\n          return cl.lesson === lessonId\n        })\n        \n        if (!lessonExists) {\n          // Add the completed lesson\n          courseProgress.completedLessons.push({\n            lesson: lessonId,\n            completedAt: new Date().toISOString(),\n          })\n        }\n      }\n\n      payload.logger.info(`User ${user.id} completed lesson ${lessonId} in course ${courseId}`)\n\n      // Check if all lessons in the course are completed\n      try {\n        const course = await payload.findByID({\n          collection: 'courses' as CollectionSlug,\n          id: courseId,\n          depth: 1,\n        })\n\n        if (course && course.lessons) {\n          // Count total required lessons (non-optional)\n          const totalRequiredLessons = course.lessons.filter((lessonItem: { lesson: string | { id: string }, isOptional?: boolean }) => !lessonItem.isOptional)\n          \n          // Get completed lesson IDs\n          const completedLessonIds = courseProgress.completedLessons.map((lesson: { lesson: string | { id: string } }) => \n            typeof lesson.lesson === 'object' && lesson.lesson !== null ? lesson.lesson.id : lesson.lesson\n          )\n          \n          // Check if all required lessons are completed\n          const allRequiredLessonsCompleted = totalRequiredLessons.every((lessonItem: { lesson: string | { id: string } }) => {\n            const lessonId = typeof lessonItem.lesson === 'object' && lessonItem.lesson !== null ? lessonItem.lesson.id : lessonItem.lesson\n            return completedLessonIds.includes(lessonId)\n          })\n\n          if (allRequiredLessonsCompleted && !courseProgress.completed) {\n            // Mark course as completed\n            courseProgress.completed = true\n            courseProgress.completedAt = new Date().toISOString()\n            \n            // Update course collection - add student to courseCompletedStudents and remove from enrolledStudents\n            const enrolledStudentIds = (Array.isArray(course.enrolledStudents) ? course.enrolledStudents : []).map(\n              (student: string | TypedCollection[typeof userSlug]) => (typeof student === 'object' ? student.id : student),\n            )\n            const courseCompletedStudents = (Array.isArray(course.courseCompletedStudents) ? course.courseCompletedStudents : []).map(\n              (student: string | TypedCollection[typeof userSlug]) => (typeof student === 'object' ? student.id : student),\n            )\n\n            // Remove user from enrolledStudents and add to courseCompletedStudents\n            const updatedEnrolledStudents = enrolledStudentIds.filter(id => id !== user.id)\n            const updatedCompletedStudents = courseCompletedStudents.includes(user.id) \n              ? courseCompletedStudents \n              : [...courseCompletedStudents, user.id]\n\n            await payload.update({\n              collection: 'courses' as CollectionSlug,\n              id: courseId,\n              data: {\n                enrolledStudents: updatedEnrolledStudents,\n                courseCompletedStudents: updatedCompletedStudents,\n              },\n            })\n\n            payload.logger.info(`User ${user.id} completed course ${courseId} after passing quiz ${quizId}`)\n          }\n        }\n      } catch (error) {\n        payload.logger.warn(`Could not check course completion for course ${courseId}: ${error}`)\n      }\n\n      // Update user progress with the new lesson completion and potential course completion\n      await payload.update({\n        collection: userSlug as CollectionSlug,\n        id: user.id,\n        data: {\n          coursesProgress,\n        },\n      })\n\n      payload.logger.info(`User ${user.id} submitted quiz ${quizId} in course ${courseId} and scored ${score}`)\n      \n      return Response.json({ success: true, message: 'Quiz submitted successfully and successfully passed', score, passed: true })\n    }\n\n    return Response.json({ success: true, message: 'Quiz submitted successfully but you did not pass. You can try again. Required score: ' + quiz.minimumScore + '%', score, passed: false })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred submitting quiz. Please try again.'\n    payload.logger.error(message)\n    return Response.json({ message, passed: false, score: 0 }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","submitQuizHandler","userSlug","quizzesSlug","req","data","user","payload","courseId","quizId","answers","Response","json","message","status","quiz","findByID","collection","id","depth","correctAnswers","questions","Array","isArray","question","submittedAnswer","questionType","correctAnswer","choices","correctChoice","find","choice","isCorrect","score","length","currentUser","coursesProgress","courseProgressIndex","findIndex","cp","course","push","completed","completedLessons","completedQuizzes","courseProgress","quizExists","some","cq","completedAt","Date","toISOString","quizIndex","update","logger","info","minimumScore","lessonId","lesson","lessonExists","cl","lessons","totalRequiredLessons","filter","lessonItem","isOptional","completedLessonIds","map","allRequiredLessonsCompleted","every","includes","enrolledStudentIds","enrolledStudents","student","courseCompletedStudents","updatedEnrolledStudents","updatedCompletedStudents","error","warn","success","passed","Error"],"mappings":"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"}