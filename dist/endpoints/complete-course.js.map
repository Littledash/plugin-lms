{"version":3,"sources":["../../src/endpoints/complete-course.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, TypedCollection, type Endpoint } from 'payload'\nimport type { CourseProgress } from '../providers/types.js'\ntype Args = {\n  userSlug: string\n  courseSlug: string\n}\n\ntype CompleteCourseHandler = (args: Args) => Endpoint['handler']\n\nexport const completeCourseHandler: CompleteCourseHandler = ({ userSlug = 'users', courseSlug = 'courses'\n}) => \nasync (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const userId = data?.userId || ''\n  const baseUrl = req.url ? req.url.split('/api')[0] : 'http://localhost:3000'\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to complete a course.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: userId ? userId : user.id,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const course = await payload.findByID({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      depth: 1,\n    })\n\n    // Check enrollment by looking at the course's enrolledStudents field (more reliable than join field)\n    const enrolledStudentIds = (Array.isArray(course?.enrolledStudents) ? course.enrolledStudents : []).map((student: string | TypedCollection[typeof userSlug]) =>\n      typeof student === 'object' ? student.id : student,\n    )\n    \n    const completedCourses = (Array.isArray(currentUser.completedCourses) ? currentUser.completedCourses : []).map(\n      (course: string | TypedCollection[typeof courseSlug]) => (typeof course === 'object' ? course.id : course),\n    )\n\n    if (!enrolledStudentIds.includes(currentUser.id)) {\n      return Response.json({ message: 'You are not enrolled in this course.' }, { status: 409 })\n    }\n\n    if (completedCourses.includes(courseId)) {\n      return Response.json({ message: 'You have already completed this course.' }, { status: 409 })\n    }\n\n    // Update course collection - add student to courseCompletedStudents and remove from enrolledStudents\n    const courseCompletedStudents = (Array.isArray(course.courseCompletedStudents) ? course.courseCompletedStudents : []).map(\n      (student: string | TypedCollection[typeof userSlug]) => (typeof student === 'object' ? student.id : student),\n    )\n\n    // Remove user from enrolledStudents and add to courseCompletedStudents\n    const updatedEnrolledStudents = enrolledStudentIds.filter(id => id !== user.id)\n    const updatedCompletedStudents = courseCompletedStudents.includes(user.id) \n      ? courseCompletedStudents \n      : [...courseCompletedStudents, user.id]\n\n    await payload.update({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      data: {\n        enrolledStudents: updatedEnrolledStudents,\n        courseCompletedStudents: updatedCompletedStudents,\n      },\n    })\n\n    // Update user's course progress to mark as completed\n    const coursesProgress = currentUser.coursesProgress || []\n    const courseProgressIndex = coursesProgress.findIndex((progress: CourseProgress) => {\n      if (typeof progress.course === 'object' && progress.course !== null) {\n        return progress.course.id === courseId\n      }\n      return progress.course === courseId\n    })\n\n    if (courseProgressIndex !== -1) {\n      // Update existing progress to mark as completed\n      coursesProgress[courseProgressIndex] = {\n        ...coursesProgress[courseProgressIndex],\n        completed: true,\n        completedAt: new Date().toISOString(),\n      }\n    } else {\n      // Create new progress entry if it doesn't exist (shouldn't happen with enrollment initialization)\n      coursesProgress.push({\n        course: courseId,\n        completed: true,\n        completedAt: new Date().toISOString(),\n        completedLessons: [],\n        completedQuizzes: [],\n      })\n    }\n\n    await payload.update({\n      collection: userSlug as CollectionSlug,\n      id: currentUser.id,\n      data: {\n        coursesProgress,\n      },\n    })\n\n    // Add certificate to user if the course has one\n    try {\n      // Check if the course has a certificate configured\n      if (course.awards?.certificate) {\n        const certificateId = typeof course.awards.certificate === 'object' \n          ? course.awards.certificate.id \n          : course.awards.certificate\n\n        // Use the existing add-certificate-to-user endpoint via HTTP\n\n        const certificateResponse = await fetch(`${baseUrl}/api/lms/add-certificate-to-user`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `${userSlug} API-Key ${process.env.PAYLOAD_API_KEY}`,\n\n          },\n          credentials: 'include',\n          body: JSON.stringify({\n            courseId,\n            certificateId,\n            options: {\n              userId: user.id,\n            }\n          }),\n        })\n        \n        if (certificateResponse.ok) {\n          payload.logger.info(`Certificate ${certificateId} added to user ${user.id} for completing course ${courseId}`)\n        } else {\n          const errorData = await certificateResponse.json()\n          payload.logger.warn(`Failed to add certificate: ${errorData.message}`)\n        }\n      } else {\n        payload.logger.info(`Course ${courseId} does not have a certificate configured`)\n      }\n    } catch (error: unknown) {\n      payload.logger.error(`Failed to add certificate to user: ${error instanceof Error ? error.message : 'An unknown error occurred.'}`)\n      // Don't fail the entire course completion if certificate addition fails\n    }\n\n    payload.logger.info(`User ${user.id} completed course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully completed course.' })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","completeCourseHandler","userSlug","courseSlug","req","data","user","payload","courseId","userId","baseUrl","url","split","Response","json","message","status","currentUser","findByID","collection","id","depth","course","enrolledStudentIds","Array","isArray","enrolledStudents","map","student","completedCourses","includes","courseCompletedStudents","updatedEnrolledStudents","filter","updatedCompletedStudents","update","coursesProgress","courseProgressIndex","findIndex","progress","completed","completedAt","Date","toISOString","push","completedLessons","completedQuizzes","awards","certificate","certificateId","certificateResponse","fetch","method","headers","Authorization","process","env","PAYLOAD_API_KEY","credentials","body","JSON","stringify","options","ok","logger","info","errorData","warn","error","Error","success"],"mappings":"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"}