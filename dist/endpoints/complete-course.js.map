{"version":3,"sources":["../../src/endpoints/complete-course.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, TypedCollection, type Endpoint } from 'payload'\nimport type { CourseProgress } from '../providers/types.js'\n\ntype Args = {\n  userSlug: string\n  courseSlug: string\n}\n\ntype CompleteCourseHandler = (args: Args) => Endpoint['handler']\n\nexport const completeCourseHandler: CompleteCourseHandler = ({ userSlug = 'users', courseSlug = 'courses'\n}) => \nasync (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to complete a course.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const course = await payload.findByID({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      depth: 1,\n    })\n\n    const enrolledCourses = (currentUser.enrolledCourses || []).map(\n      (course: string | TypedCollection[typeof courseSlug]) => (typeof course === 'object' ? course.id : course),\n    )\n    const completedCourses = (currentUser.completedCourses || []).map(\n      (course: string | TypedCollection[typeof courseSlug]) => (typeof course === 'object' ? course.id : course),\n    )\n\n    if (!enrolledCourses.includes(courseId)) {\n      return Response.json({ message: 'You are not enrolled in this course.' }, { status: 409 })\n    }\n\n    if (completedCourses.includes(courseId)) {\n      return Response.json({ message: 'You have already completed this course.' }, { status: 409 })\n    }\n\n    // Update course collection - add student to courseCompletedStudents while keeping them enrolled\n    const courseCompletedStudents = (course.courseCompletedStudents || []).map(\n      (student: string | TypedCollection[typeof userSlug]) => (typeof student === 'object' ? student.id : student),\n    )\n\n    // Only add to completed students if not already there\n    if (!courseCompletedStudents.includes(user.id)) {\n      await payload.update({\n        collection: courseSlug as CollectionSlug,\n        id: courseId,\n        data: {\n          courseCompletedStudents: [...courseCompletedStudents, user.id],\n        },\n      })\n    }\n\n    // Update user's course progress to mark as completed\n    const coursesProgress = currentUser.coursesProgress || []\n    const courseProgressIndex = coursesProgress.findIndex((progress: CourseProgress) => {\n      if (typeof progress.course === 'object' && progress.course !== null) {\n        return progress.course.id === courseId\n      }\n      return progress.course === courseId\n    })\n\n    if (courseProgressIndex !== -1) {\n      // Update existing progress to mark as completed\n      coursesProgress[courseProgressIndex] = {\n        ...coursesProgress[courseProgressIndex],\n        completed: true,\n        completedAt: new Date().toISOString(),\n      }\n    } else {\n      // Create new progress entry if it doesn't exist (shouldn't happen with enrollment initialization)\n      coursesProgress.push({\n        course: courseId,\n        completed: true,\n        completedAt: new Date().toISOString(),\n        completedLessons: [],\n        completedQuizzes: [],\n      })\n    }\n\n    await payload.update({\n      collection: userSlug as CollectionSlug,\n      id: user.id,\n      data: {\n        coursesProgress,\n      },\n    })\n\n    payload.logger.info(`User ${user.id} completed course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully completed course.' })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","completeCourseHandler","userSlug","courseSlug","req","data","user","payload","courseId","Response","json","message","status","currentUser","findByID","collection","id","depth","course","enrolledCourses","map","completedCourses","includes","courseCompletedStudents","student","update","coursesProgress","courseProgressIndex","findIndex","progress","completed","completedAt","Date","toISOString","push","completedLessons","completedQuizzes","logger","info","success","error","Error"],"mappings":"AAAA,SAASA,uBAAuB,QAAwD,UAAS;AAUjG,OAAO,MAAMC,wBAA+C,CAAC,EAAEC,WAAW,OAAO,EAAEC,aAAa,SAAS,EACxG,GACD,OAAOC;QACL,MAAMJ,wBAAwBI;QAC9B,MAAMC,OAAOD,IAAIC,IAAI;QACrB,MAAMC,OAAOF,IAAIE,IAAI;QACrB,MAAMC,UAAUH,IAAIG,OAAO;QAC3B,MAAMC,WAAWH,MAAMG;QAEvB,IAAI,CAACF,MAAM;YACT,OAAOG,SAASC,IAAI,CAClB;gBAAEC,SAAS;YAA8C,GACzD;gBAAEC,QAAQ;YAAI;QAElB;QAEA,IAAI,CAACJ,UAAU;YACb,OAAOC,SAASC,IAAI,CAAC;gBAAEC,SAAS;YAAyB,GAAG;gBAAEC,QAAQ;YAAI;QAC5E;QAEA,IAAI;YACF,MAAMC,cAAc,MAAMN,QAAQO,QAAQ,CAAC;gBACzCC,YAAYb;gBACZc,IAAIV,KAAKU,EAAE;gBACXC,OAAO;YACT;YAEA,IAAI,CAACJ,aAAa;gBAChB,OAAOJ,SAASC,IAAI,CAAC;oBAAEC,SAAS;gBAAkB,GAAG;oBAAEC,QAAQ;gBAAI;YACrE;YAEA,MAAMM,SAAS,MAAMX,QAAQO,QAAQ,CAAC;gBACpCC,YAAYZ;gBACZa,IAAIR;gBACJS,OAAO;YACT;YAEA,MAAME,kBAAkB,AAACN,CAAAA,YAAYM,eAAe,IAAI,EAAE,AAAD,EAAGC,GAAG,CAC7D,CAACF,SAAyD,OAAOA,WAAW,WAAWA,OAAOF,EAAE,GAAGE;YAErG,MAAMG,mBAAmB,AAACR,CAAAA,YAAYQ,gBAAgB,IAAI,EAAE,AAAD,EAAGD,GAAG,CAC/D,CAACF,SAAyD,OAAOA,WAAW,WAAWA,OAAOF,EAAE,GAAGE;YAGrG,IAAI,CAACC,gBAAgBG,QAAQ,CAACd,WAAW;gBACvC,OAAOC,SAASC,IAAI,CAAC;oBAAEC,SAAS;gBAAuC,GAAG;oBAAEC,QAAQ;gBAAI;YAC1F;YAEA,IAAIS,iBAAiBC,QAAQ,CAACd,WAAW;gBACvC,OAAOC,SAASC,IAAI,CAAC;oBAAEC,SAAS;gBAA0C,GAAG;oBAAEC,QAAQ;gBAAI;YAC7F;YAEA,gGAAgG;YAChG,MAAMW,0BAA0B,AAACL,CAAAA,OAAOK,uBAAuB,IAAI,EAAE,AAAD,EAAGH,GAAG,CACxE,CAACI,UAAwD,OAAOA,YAAY,WAAWA,QAAQR,EAAE,GAAGQ;YAGtG,sDAAsD;YACtD,IAAI,CAACD,wBAAwBD,QAAQ,CAAChB,KAAKU,EAAE,GAAG;gBAC9C,MAAMT,QAAQkB,MAAM,CAAC;oBACnBV,YAAYZ;oBACZa,IAAIR;oBACJH,MAAM;wBACJkB,yBAAyB;+BAAIA;4BAAyBjB,KAAKU,EAAE;yBAAC;oBAChE;gBACF;YACF;YAEA,qDAAqD;YACrD,MAAMU,kBAAkBb,YAAYa,eAAe,IAAI,EAAE;YACzD,MAAMC,sBAAsBD,gBAAgBE,SAAS,CAAC,CAACC;gBACrD,IAAI,OAAOA,SAASX,MAAM,KAAK,YAAYW,SAASX,MAAM,KAAK,MAAM;oBACnE,OAAOW,SAASX,MAAM,CAACF,EAAE,KAAKR;gBAChC;gBACA,OAAOqB,SAASX,MAAM,KAAKV;YAC7B;YAEA,IAAImB,wBAAwB,CAAC,GAAG;gBAC9B,gDAAgD;gBAChDD,eAAe,CAACC,oBAAoB,GAAG;oBACrC,GAAGD,eAAe,CAACC,oBAAoB;oBACvCG,WAAW;oBACXC,aAAa,IAAIC,OAAOC,WAAW;gBACrC;YACF,OAAO;gBACL,kGAAkG;gBAClGP,gBAAgBQ,IAAI,CAAC;oBACnBhB,QAAQV;oBACRsB,WAAW;oBACXC,aAAa,IAAIC,OAAOC,WAAW;oBACnCE,kBAAkB,EAAE;oBACpBC,kBAAkB,EAAE;gBACtB;YACF;YAEA,MAAM7B,QAAQkB,MAAM,CAAC;gBACnBV,YAAYb;gBACZc,IAAIV,KAAKU,EAAE;gBACXX,MAAM;oBACJqB;gBACF;YACF;YAEAnB,QAAQ8B,MAAM,CAACC,IAAI,CAAC,CAAC,KAAK,EAAEhC,KAAKU,EAAE,CAAC,kBAAkB,EAAER,UAAU;YAElE,OAAOC,SAASC,IAAI,CAAC;gBAAE6B,SAAS;gBAAM5B,SAAS;YAAiC;QAClF,EAAE,OAAO6B,OAAgB;YACvB,MAAM7B,UAAU6B,iBAAiBC,QAAQD,MAAM7B,OAAO,GAAG;YACzDJ,QAAQ8B,MAAM,CAACG,KAAK,CAAC7B;YACrB,OAAOF,SAASC,IAAI,CAAC;gBAAEC;YAAQ,GAAG;gBAAEC,QAAQ;YAAI;QAClD;IACF,EAAC"}