{"version":3,"sources":["../../src/endpoints/complete-course.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, TypedCollection, type Endpoint } from 'payload'\nimport type { CourseProgress } from '../providers/types.js'\ntype Args = {\n  userSlug: string\n  courseSlug: string\n  certificatesSlug: string\n}\n\ntype CompleteCourseHandler = (args: Args) => Endpoint['handler']\n\nexport const completeCourseHandler: CompleteCourseHandler = ({ userSlug = 'users', courseSlug = 'courses', certificatesSlug = 'certificates'\n}) => \nasync (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const userId = data?.userId || ''\n\n  if (!user) {\n    return Response.json(\n      { message: 'You must be logged in to complete a course.' },\n      { status: 401 },\n    )\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: userId ? userId : user.id,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const course = await payload.findByID({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      depth: 1,\n    })\n\n    // Check enrollment by looking at the course's enrolledStudents field (more reliable than join field)\n    const enrolledStudentIds = (Array.isArray(course?.enrolledStudents) ? course.enrolledStudents : []).map((student: string | TypedCollection[typeof userSlug]) =>\n      typeof student === 'object' ? student.id : student,\n    )\n    \n    const completedCourses = (Array.isArray(currentUser.completedCourses) ? currentUser.completedCourses : []).map(\n      (course: string | TypedCollection[typeof courseSlug]) => (typeof course === 'object' ? course.id : course),\n    )\n\n    if (!enrolledStudentIds.includes(currentUser.id)) {\n      return Response.json({ message: 'You are not enrolled in this course.' }, { status: 409 })\n    }\n\n    if (completedCourses.includes(courseId)) {\n      return Response.json({ message: 'You have already completed this course.' }, { status: 409 })\n    }\n\n    // Update course collection - add student to courseCompletedStudents and remove from enrolledStudents\n    const courseCompletedStudents = (Array.isArray(course.courseCompletedStudents) ? course.courseCompletedStudents : []).map(\n      (student: string | TypedCollection[typeof userSlug]) => (typeof student === 'object' ? student.id : student),\n    )\n\n    // Remove user from enrolledStudents and add to courseCompletedStudents\n    const updatedEnrolledStudents = enrolledStudentIds.filter(id => id !== currentUser.id)\n    const updatedCompletedStudents = courseCompletedStudents.includes(currentUser.id) \n      ? courseCompletedStudents \n      : [...courseCompletedStudents, currentUser.id]\n\n    await payload.update({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      data: {\n        enrolledStudents: updatedEnrolledStudents,\n        courseCompletedStudents: updatedCompletedStudents,\n      },\n    })\n\n    // Update user's course progress to mark as completed\n    const coursesProgress = currentUser.coursesProgress || []\n    const courseProgressIndex = coursesProgress.findIndex((progress: CourseProgress) => {\n      if (typeof progress.course === 'object' && progress.course !== null) {\n        return progress.course.id === courseId\n      }\n      return progress.course === courseId\n    })\n\n    if (courseProgressIndex !== -1) {\n      // Update existing progress to mark as completed\n      coursesProgress[courseProgressIndex] = {\n        ...coursesProgress[courseProgressIndex],\n        completed: true,\n        completedAt: new Date().toISOString(),\n      }\n    } else {\n      // Create new progress entry if it doesn't exist (shouldn't happen with enrollment initialization)\n      coursesProgress.push({\n        course: courseId,\n        completed: true,\n        completedAt: new Date().toISOString(),\n        completedLessons: [],\n        completedQuizzes: [],\n      })\n    }\n\n    await payload.update({\n      collection: userSlug as CollectionSlug,\n      id: currentUser.id,\n      data: {\n        coursesProgress,\n      },\n    })\n\n    // Add certificate to user if the course has one\n    try {\n      // Check if the course has a certificate configured\n      if (course.awards?.certificate) {\n        const certificateId = typeof course.awards.certificate === 'object' \n          ? course.awards.certificate.id \n          : course.awards.certificate\n\n\n          const existingCertificates = (Array.isArray(currentUser.certificates) ? currentUser.certificates : []).map((cert: { certificate: string | TypedCollection[typeof certificatesSlug], course: string | TypedCollection[typeof courseSlug] }) => ({\n            certificateId: typeof cert.certificate === 'object' ? cert.certificate.id : cert.certificate,\n            courseId: typeof cert.course === 'object' ? cert.course.id : cert.course\n          }))\n\n        const hasExistingCertificate = existingCertificates.some((cert: { certificateId: string | number, courseId: string | number }) => \n          cert.certificateId === certificateId && cert.courseId === courseId\n        )\n\n        if (hasExistingCertificate) {\n          \n          return Response.json({ message: 'You already have this certificate.' }, { status: 200 })\n        }\n\n        await payload.update({\n          collection: userSlug as CollectionSlug,\n          id: currentUser.id,\n          data: {\n            certificates: [\n              ...(currentUser.certificates || []),\n              {\n                certificate: certificateId,\n                course: courseId,\n                completedDate: new Date().toISOString(),\n              },\n            ],\n          },\n        })\n        \n        payload.logger.info(`Certificate ${certificateId} added to user ${currentUser.id} for completing course ${courseId}`)\n      } else {\n        payload.logger.info(`Course ${courseId} does not have a certificate configured`)\n      }\n    } catch (error: unknown) {\n      payload.logger.error(`Failed to add certificate to user: ${error instanceof Error ? error.message : 'An unknown error occurred.'}`)\n      // Don't fail the entire course completion if certificate addition fails\n    }\n      \n\n    payload.logger.info(`User ${currentUser.id} completed course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully completed course.' })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","completeCourseHandler","userSlug","courseSlug","certificatesSlug","req","data","user","payload","courseId","userId","Response","json","message","status","currentUser","findByID","collection","id","depth","course","enrolledStudentIds","Array","isArray","enrolledStudents","map","student","completedCourses","includes","courseCompletedStudents","updatedEnrolledStudents","filter","updatedCompletedStudents","update","coursesProgress","courseProgressIndex","findIndex","progress","completed","completedAt","Date","toISOString","push","completedLessons","completedQuizzes","awards","certificate","certificateId","existingCertificates","certificates","cert","hasExistingCertificate","some","completedDate","logger","info","error","Error","success"],"mappings":"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"}