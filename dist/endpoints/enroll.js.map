{"version":3,"sources":["../../src/endpoints/enroll.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, TypedCollection, type Endpoint } from 'payload'\nimport type { CourseProgress } from '../providers/types.js'\n\ntype Args = {\n  userSlug?: string\n  courseSlug?: string\n  groupSlug?: string\n}\n\ntype EnrollHandler = (args: Args) => Endpoint['handler']\n\nexport const enrollHandler: EnrollHandler = ({ userSlug = 'users', courseSlug = 'courses', groupSlug = 'groups' }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const isGroup = data?.isGroup || false\n  const companyName = data?.companyName || ''\n  const userId = data?.userId || ''\n  let isLeader = data?.isLeader || false\n\n  if (!user) {\n    return Response.json({ message: 'You must be logged in to enroll.' }, { status: 401 })\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: userId ? userId : user.id,\n      depth: 1,\n    })\n\n    const course = await payload.findByID({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const enrolledStudentIds = (course?.enrolledStudents || []).map((student: string | TypedCollection[typeof userSlug]) =>\n      typeof student === 'object' ? student.id : student,\n    )\n    const enrolledGroupIds = (course?.enrolledGroups || []).map((group: string | TypedCollection[typeof groupSlug]) =>\n      typeof group === 'object' ? group.id : group,\n    )\n\n    const enrolledCourseIds = (currentUser.enrolledCourses || []).map(\n      (course: string | TypedCollection[typeof courseSlug]) => (typeof course === 'object' ? course.id : course),\n    )\n\n    const completedCourseIds = (currentUser.completedCourses || []).map(\n      (course: string | TypedCollection[typeof courseSlug]) => (typeof course === 'object' ? course.id : course),\n    )\n    \n    if (isGroup) {\n      if (!companyName) {\n        payload.logger.error('Company name is required for group enrollment.')\n        return Response.json({ message: 'Company name is required for group enrollment.' }, { status: 400 })\n      }\n\n      let group: TypedCollection[typeof groupSlug] | null = null\n\n      if (groupSlug) {\n        const { docs: existingGroups }= await payload.find({\n          collection: groupSlug as CollectionSlug,\n          where: {\n            title: {\n              equals: companyName,\n            },\n          },\n          depth: 1,\n        })\n\n        if (existingGroups.length > 0) {\n          group = existingGroups[0] || null\n          payload.logger.info(`Found existing group '${companyName}' with id ${group?.id}`)\n         \n          const currentLeaders = (group.leaders || []).map((leader: string | TypedCollection[typeof userSlug]) =>\n            typeof leader === 'string' ? leader : leader.id,\n          )\n          const currentStudents = (group.students || []).map((student: string | TypedCollection[typeof userSlug]) =>\n            typeof student === 'string' ? student : student.id,\n          )\n\n          const currentCourses = (group.courses || []).map((c: string | TypedCollection[typeof courseSlug]) =>\n            typeof c === 'string' ? c : c.id,\n          )\n\n          const updatedData: Partial<TypedCollection[typeof groupSlug]> = {}\n\n          if (isLeader && !currentLeaders.includes(user.id)) {\n            updatedData.leaders = [...currentLeaders, user.id]\n          }\n\n          if (!isLeader && !currentStudents.includes(user.id)) {\n            updatedData.students = [...currentStudents, user.id]\n          }\n\n          if (!currentCourses.includes(courseId)) {\n            updatedData.courses = [...currentCourses, courseId]\n          }\n\n          if (Object.keys(updatedData).length > 0) {\n            await payload.update({\n              collection: 'groups',\n              id: group.id,\n              data: updatedData,\n            })\n            payload.logger.info(`Updated group ${group.id} with new student/course.`)\n          } else {\n            payload.logger.info(`Group ${group.id} already up-to-date.`)\n          }\n          \n\n        } else {\n          payload.logger.info(`No existing group found for '${companyName}'`)\n          const newGroupData = {\n            title: companyName,\n            ...(isLeader ? { leaders: [user.id] } : { students: [user.id] }),\n            courses: [courseId],\n          }\n          \n          const newGroup = await payload.create({\n            collection: 'groups',\n            data: newGroupData,\n          })\n          group = newGroup\n          payload.logger.info(`Created new group '${companyName}' with id ${group?.id}`)\n        }\n\n          // Add group to course's courseEnrolledGroups array\n          const currentEnrolledGroups = (course.courseEnrolledGroups || []).map(\n            (g: string | TypedCollection[typeof groupSlug]) => (typeof g === 'string' ? g : g.id),\n          )\n\n          if (!currentEnrolledGroups.includes(group.id)) {\n            await payload.update({\n              collection: courseSlug as CollectionSlug,\n              id: courseId,\n              data: {\n                courseEnrolledGroups: [...currentEnrolledGroups, group.id],\n              },\n            })\n            payload.logger.info(\n              `Added group ${group.title} to course ${course.title}'s enrolled groups`,\n            )\n          } else {\n            payload.logger.info(\n              `Group ${group.title} is already enrolled in course ${course.title}`,\n            )\n          }\n      \n      }\n\n    }\n\n    if (\n      enrolledStudentIds?.includes(user.id) ||\n      enrolledCourseIds.includes(courseId)\n    ) {\n      return Response.json({ message: 'You are already enrolled in this course.' }, { status: 409 })\n    }\n\n    if (\n      completedCourseIds.includes(courseId) \n    ) {\n      return Response.json({ message: 'You have already completed this course.' }, { status: 409 })\n    }\n\n    await payload.update({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      data: {\n        enrolledStudents: [...enrolledStudentIds, user.id],\n      },\n    })\n\n    // Initialize course progress for the user\n    const coursesProgress = currentUser.coursesProgress || []\n    \n    // Check if course progress already exists for this course\n    const courseProgressExists = coursesProgress.some((progress: CourseProgress) => {\n      if (typeof progress.course === 'object' && progress.course !== null) {\n        return progress.course.id === courseId\n      }\n      return progress.course === courseId\n    })\n    \n    if (!courseProgressExists) {\n      // Create new course progress entry\n      const newCourseProgress = {\n        course: courseId,\n        completed: false,\n        completedLessons: [],\n        completedQuizzes: [],\n      }\n      \n      await payload.update({\n        collection: userSlug as CollectionSlug,\n        id: user.id,\n        data: {\n          coursesProgress: [...coursesProgress, newCourseProgress],\n        },\n      })\n    }\n\n    payload.logger.info(`User ${user.id} enrolled in course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully enrolled in course.' })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","enrollHandler","userSlug","courseSlug","groupSlug","req","data","user","payload","courseId","isGroup","companyName","userId","isLeader","Response","json","message","status","currentUser","findByID","collection","id","depth","course","enrolledStudentIds","enrolledStudents","map","student","enrolledGroupIds","enrolledGroups","group","enrolledCourseIds","enrolledCourses","completedCourseIds","completedCourses","logger","error","docs","existingGroups","find","where","title","equals","length","info","currentLeaders","leaders","leader","currentStudents","students","currentCourses","courses","c","updatedData","includes","Object","keys","update","newGroupData","newGroup","create","currentEnrolledGroups","courseEnrolledGroups","g","coursesProgress","courseProgressExists","some","progress","newCourseProgress","completed","completedLessons","completedQuizzes","success","Error"],"mappings":"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"}