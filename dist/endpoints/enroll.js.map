{"version":3,"sources":["../../src/endpoints/enroll.ts"],"sourcesContent":["import { addDataAndFileToRequest, CollectionSlug, TypedCollection, type Endpoint } from 'payload'\nimport type { CourseProgress } from '../providers/types.js'\n\ntype Args = {\n  userSlug?: string\n  courseSlug?: string\n  groupSlug?: string\n}\n\ntype EnrollHandler = (args: Args) => Endpoint['handler']\n\nexport const enrollHandler: EnrollHandler = ({ userSlug = 'users', courseSlug = 'courses', groupSlug = 'groups' }) => async (req) => {\n  await addDataAndFileToRequest(req)\n  const data = req.data\n  const user = req.user\n  const payload = req.payload\n  const courseId = data?.courseId\n  const isGroup = data?.isGroup || false\n  const companyName = data?.companyName || ''\n  const userId = data?.userId || ''\n  let isLeader = data?.isLeader || false\n  const totalSeats = data?.totalSeats || 1\n  const couponId = data?.couponId || null\n\n  if (!user || !userId) {\n    return Response.json({ message: 'You must be logged in to enroll.' }, { status: 401 })\n  }\n\n  if (!courseId) {\n    return Response.json({ message: 'Course ID is required.' }, { status: 400 })\n  }\n\n  try {\n    const currentUser = await payload.findByID({\n      collection: userSlug as CollectionSlug,\n      id: userId ? userId : user.id,\n      depth: 1,\n    })\n\n    const course = await payload.findByID({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      depth: 1,\n    })\n\n    if (!currentUser) {\n      return Response.json({ message: 'User not found.' }, { status: 404 })\n    }\n\n    const enrolledStudentIds = (course?.enrolledStudents || []).map((student: string | TypedCollection[typeof userSlug]) =>\n      typeof student === 'object' ? student.id : student,\n    )\n    const enrolledGroupIds = (course?.courseEnrolledGroups || []).map((group: string | TypedCollection[typeof groupSlug]) =>\n      typeof group === 'object' ? group.id : group,\n    )\n\n    const enrolledCourseIds = (Array.isArray(currentUser.enrolledCourses) ? currentUser.enrolledCourses : []).map(\n      (course: string | TypedCollection[typeof courseSlug]) => (typeof course === 'object' ? course.id : course),\n    )\n\n    const completedCourseIds = (Array.isArray(currentUser.completedCourses) ? currentUser.completedCourses : []).map(\n      (course: string | TypedCollection[typeof courseSlug]) => (typeof course === 'object' ? course.id : course),\n    )\n    \n    if (isGroup ) {\n      if (!companyName) {\n        payload.logger.error('Company name is required for group enrollment.')\n        return Response.json({ message: 'Company name is required for group enrollment.' }, { status: 400 })\n      }\n\n      let group: TypedCollection[typeof groupSlug] | null = null\n\n      if (groupSlug) {\n        const { docs: existingGroups }= await payload.find({\n          collection: groupSlug as CollectionSlug,\n          where: {\n            title: {\n              equals: companyName,\n            },\n          },\n          depth: 1,\n        })\n\n        if (existingGroups.length > 0) {\n          group = existingGroups[0] || null\n          payload.logger.info(`Found existing group '${companyName}' with id ${group?.id}`)\n         \n          const currentLeaders = (group.leaders || []).map((leader: string | TypedCollection[typeof userSlug]) =>\n            typeof leader === 'string' ? leader : leader.id,\n          )\n          const currentStudents = (group.students || []).map((student: string | TypedCollection[typeof userSlug]) =>\n            typeof student === 'string' ? student : student.id,\n          )\n\n          const currentPurchasedCourses = (group.purchasedCourses || [])\n            .map((purchasedCourse: TypedCollection[typeof groupSlug]['purchasedCourses'][number]) => purchasedCourse?.seatManagement?.course)\n            .filter(Boolean)\n            .map((course: string | TypedCollection[typeof courseSlug]) =>\n              typeof course === 'string' ? course : course.id,\n            )\n\n          const updatedData: Partial<TypedCollection[typeof groupSlug]> = {}\n\n          if (isLeader && !currentLeaders.includes(user.id)) {\n            updatedData.leaders = [...currentLeaders, user.id]\n          }\n\n          if (!isLeader && !currentStudents.includes(user.id)) {\n            updatedData.students = [...currentStudents, user.id]\n          }\n\n          if (!currentPurchasedCourses.includes(courseId)) {\n            // Add the course to purchasedCourses with seat management structure\n            const newPurchasedCourse = {\n              seatManagement: {\n                seatsTotal: totalSeats,\n                seatsUsed: 1,\n                course: courseId,\n                coupon: couponId || null\n              }\n            }\n            updatedData.purchasedCourses = [...(group.purchasedCourses || []), newPurchasedCourse]\n          } else {\n            // Group already has this course - increment seatsUsed\n            const updatedPurchasedCourses = (group.purchasedCourses || []).map((purchasedCourse: TypedCollection[typeof groupSlug]['purchasedCourses'][number]) => {\n              if (purchasedCourse?.seatManagement?.course === courseId || \n                  (typeof purchasedCourse?.seatManagement?.course === 'object' && purchasedCourse?.seatManagement?.course?.id === courseId)) {\n                return {\n                  ...purchasedCourse,\n                  seatManagement: {\n                    ...purchasedCourse.seatManagement,\n                    seatsUsed: (purchasedCourse.seatManagement.seatsUsed || 0) + 1\n                  }\n                }\n              }\n              return purchasedCourse\n            })\n            updatedData.purchasedCourses = updatedPurchasedCourses\n          }\n\n          if (Object.keys(updatedData).length > 0) {\n            await payload.update({\n              collection: 'groups',\n              id: group.id,\n              data: updatedData,\n            })\n            payload.logger.info(`Updated group ${group.id} with new student/course.`)\n          } else {\n            payload.logger.info(`Group ${group.id} already up-to-date.`)\n          }\n          \n\n        } else {\n          payload.logger.info(`No existing group found for '${companyName}'`)\n          const newGroupData = {\n            title: companyName,\n            ...(isLeader ? { leaders: [user.id] } : { students: [user.id] }),\n            purchasedCourses: [\n              {\n                seatManagement: {\n                  seatsTotal: totalSeats,\n                  seatsUsed: 1,\n                  course: courseId,\n                  coupon: couponId || null\n                }\n              }\n            ],\n          }\n          \n          const newGroup = await payload.create({\n            collection: 'groups',\n            data: newGroupData,\n          })\n          group = newGroup\n          payload.logger.info(`Created new group '${companyName}' with id ${group?.id}`)\n        }\n\n          // Add group to course's courseEnrolledGroups array\n          const currentEnrolledGroups = (course.courseEnrolledGroups || []).map(\n            (g: string | TypedCollection[typeof groupSlug]) => (typeof g === 'string' ? g : g.id),\n          )\n\n          if (!currentEnrolledGroups.includes(group.id)) {\n            await payload.update({\n              collection: courseSlug as CollectionSlug,\n              id: courseId,\n              data: {\n                courseEnrolledGroups: [...currentEnrolledGroups, group.id],\n              },\n            })\n            payload.logger.info(\n              `Added group ${group.title} to course ${course.title}'s enrolled groups`,\n            )\n          } else {\n            payload.logger.info(\n              `Group ${group.title} is already enrolled in course ${course.title}`,\n            )\n          }\n      \n      }\n\n    }\n  \n    // Initialize course progress for the user\n    const coursesProgress = Array.isArray(currentUser.coursesProgress) ? currentUser.coursesProgress : []\n\n        \n    // Check if course progress already exists for this course\n    const courseProgressExists = coursesProgress.some((progress: CourseProgress) => {\n      if (typeof progress.course === 'object' && progress.course !== null) {\n        return progress.course.id === courseId\n      }\n      return progress.course === courseId\n    })\n\n\n    if (\n      enrolledStudentIds?.includes(user.id) ||\n      enrolledCourseIds.includes(courseId)\n    ) {\n        \n       if (!courseProgressExists) {\n          // Create new course progress entry\n          const newCourseProgress = {\n            course: courseId,\n            completed: false,\n            completedLessons: [],\n            completedQuizzes: [],\n          }\n          \n          await payload.update({\n            collection: userSlug as CollectionSlug,\n            id: currentUser.id,\n            data: {\n              coursesProgress: [...coursesProgress, newCourseProgress],\n            },\n          })\n\n\n          payload.logger.info(`User ${currentUser.id} course progress created for course ${courseId}`)\n        }\n\n      return Response.json({ message: 'You are already enrolled in this course.' }, { status: 200 })\n    }\n\n    if (\n      completedCourseIds.includes(courseId) \n    ) {\n      return Response.json({ message: 'You have already completed this course.' }, { status: 200 })\n    }\n\n    await payload.update({\n      collection: courseSlug as CollectionSlug,\n      id: courseId,\n      data: {\n        enrolledStudents: [...enrolledStudentIds, user.id],\n      },\n    })\n\n\n    \n    if (!courseProgressExists) {\n      // Create new course progress entry\n      const newCourseProgress = {\n        course: courseId,\n        completed: false,\n        completedLessons: [],\n        completedQuizzes: [],\n      }\n      \n      await payload.update({\n        collection: userSlug as CollectionSlug,\n        id: currentUser.id,\n        data: {\n          coursesProgress: [...coursesProgress, newCourseProgress],\n        },\n      })\n      payload.logger.info(`User ${currentUser.id} course progress created for course ${courseId}`)\n    }\n\n    payload.logger.info(`User ${currentUser.id} enrolled in course ${courseId}`)\n\n    return Response.json({ success: true, message: 'Successfully enrolled in course.' })\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unknown error occurred.'\n    payload.logger.error(message)\n    return Response.json({ message }, { status: 500 })\n  }\n}\n"],"names":["addDataAndFileToRequest","enrollHandler","userSlug","courseSlug","groupSlug","req","data","user","payload","courseId","isGroup","companyName","userId","isLeader","totalSeats","couponId","Response","json","message","status","currentUser","findByID","collection","id","depth","course","enrolledStudentIds","enrolledStudents","map","student","enrolledGroupIds","courseEnrolledGroups","group","enrolledCourseIds","Array","isArray","enrolledCourses","completedCourseIds","completedCourses","logger","error","docs","existingGroups","find","where","title","equals","length","info","currentLeaders","leaders","leader","currentStudents","students","currentPurchasedCourses","purchasedCourses","purchasedCourse","seatManagement","filter","Boolean","updatedData","includes","newPurchasedCourse","seatsTotal","seatsUsed","coupon","updatedPurchasedCourses","Object","keys","update","newGroupData","newGroup","create","currentEnrolledGroups","g","coursesProgress","courseProgressExists","some","progress","newCourseProgress","completed","completedLessons","completedQuizzes","success","Error"],"mappings":"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"}