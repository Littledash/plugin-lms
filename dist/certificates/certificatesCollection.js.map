{"version":3,"sources":["../../src/certificates/certificatesCollection.ts"],"sourcesContent":["import { CollectionConfig, Field } from 'payload'\nimport { FieldsOverride } from '../types.js'\n\n/**\n * Props interface for configuring the certificates collection\n * @property coursesCollectionSlug - Slug for the courses collection (default: 'courses')\n * @property studentsCollectionSlug - Slug for the students collection (default: 'users')\n * @property mediaCollectionSlug - Slug for the media collection (default: 'media')\n * @property overrides - Optional configuration overrides for fields and collection settings\n */\ntype Props = {\n  coursesCollectionSlug?: string\n  studentsCollectionSlug?: string\n  mediaCollectionSlug?: string\n  overrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n}\n\n/**\n * Creates a certificates collection configuration for Payload CMS\n * This collection manages digital certificates for course completion\n *\n * @param props - Configuration properties for the certificates collection\n * @returns CollectionConfig object for certificates\n */\nexport const certificatesCollection: (props?: Props) => CollectionConfig<'certificates'> = (\n  props,\n) => {\n  const {\n    overrides,\n    coursesCollectionSlug = 'courses',\n    studentsCollectionSlug = 'users',\n    mediaCollectionSlug = 'media',\n  } = props || {}\n  const fieldsOverride = overrides?.fields\n\n  /**\n   * Default fields for the certificates collection\n   * Includes title, description, template, course relationship, student relationships,\n   * issue date, expiry date, certificate number, and status\n   */\n  const defaultFields: Field[] = [\n    {\n      name: 'title',\n      type: 'text',\n      required: true,\n      admin: {\n        description: 'The title of the certificate',\n      },\n    },\n    {\n      name: 'description',\n      type: 'richText',\n      admin: {\n        description: 'The description of the certificate',\n      },\n    },\n    {\n      name: 'template',\n      type: 'upload',\n      relationTo: mediaCollectionSlug,\n      admin: {\n        description: 'The certificate template image',\n      },\n    },\n    {\n      name: 'courses',\n      type: 'relationship',\n      relationTo: coursesCollectionSlug,\n      hasMany: true,\n      admin: {\n        allowCreate: false,\n        description: 'The courses this certificate is for',\n      },\n    },\n    {\n      name: 'expiryDate',\n      type: 'date',\n      admin: {\n        description: 'The date the certificate expires (if applicable)',\n      },\n    },\n    {\n      name: 'status',\n      type: 'select',\n      defaultValue: 'active',\n      options: [\n        { label: 'Active', value: 'active' },\n        { label: 'Expired', value: 'expired' },\n        { label: 'Revoked', value: 'revoked' },\n      ],\n      required: true,\n      admin: {\n        description: 'The status of the certificate',\n      },\n    },\n    {\n      name: 'students',\n      type: 'relationship',\n      relationTo: studentsCollectionSlug,\n      hasMany: true,\n      admin: {\n        // readOnly: true,\n        allowCreate: false,\n        description: 'The students of the certificate',\n      },\n    },\n    {\n      name: 'authors',\n      type: 'relationship',\n      relationTo: studentsCollectionSlug,\n      hasMany: true,\n      admin: {\n        allowCreate: false,\n        description: 'The authors of the certificate',\n      },\n    },\n  ]\n\n  // Apply field overrides if provided\n  const fields =\n    fieldsOverride && typeof fieldsOverride === 'function'\n      ? fieldsOverride({ defaultFields })\n      : defaultFields\n\n  /**\n   * Base configuration for the certificates collection\n   * Includes slug, access control, timestamps, and admin settings\n   */\n  const baseConfig: CollectionConfig = {\n    slug: 'certificates',\n    timestamps: true,\n    ...overrides,\n    admin: {\n      useAsTitle: 'title',\n      ...overrides?.admin,\n    },\n    fields,\n  }\n\n  return { ...baseConfig }\n}\n"],"names":["certificatesCollection","props","overrides","coursesCollectionSlug","studentsCollectionSlug","mediaCollectionSlug","fieldsOverride","fields","defaultFields","name","type","required","admin","description","relationTo","hasMany","allowCreate","defaultValue","options","label","value","baseConfig","slug","timestamps","useAsTitle"],"mappings":"AAiBA;;;;;;CAMC,GACD,OAAO,MAAMA,yBAA8E,CACzFC;IAEA,MAAM,EACJC,SAAS,EACTC,wBAAwB,SAAS,EACjCC,yBAAyB,OAAO,EAChCC,sBAAsB,OAAO,EAC9B,GAAGJ,SAAS,CAAC;IACd,MAAMK,iBAAiBJ,WAAWK;IAElC;;;;GAIC,GACD,MAAMC,gBAAyB;QAC7B;YACEC,MAAM;YACNC,MAAM;YACNC,UAAU;YACVC,OAAO;gBACLC,aAAa;YACf;QACF;QACA;YACEJ,MAAM;YACNC,MAAM;YACNE,OAAO;gBACLC,aAAa;YACf;QACF;QACA;YACEJ,MAAM;YACNC,MAAM;YACNI,YAAYT;YACZO,OAAO;gBACLC,aAAa;YACf;QACF;QACA;YACEJ,MAAM;YACNC,MAAM;YACNI,YAAYX;YACZY,SAAS;YACTH,OAAO;gBACLI,aAAa;gBACbH,aAAa;YACf;QACF;QACA;YACEJ,MAAM;YACNC,MAAM;YACNE,OAAO;gBACLC,aAAa;YACf;QACF;QACA;YACEJ,MAAM;YACNC,MAAM;YACNO,cAAc;YACdC,SAAS;gBACP;oBAAEC,OAAO;oBAAUC,OAAO;gBAAS;gBACnC;oBAAED,OAAO;oBAAWC,OAAO;gBAAU;gBACrC;oBAAED,OAAO;oBAAWC,OAAO;gBAAU;aACtC;YACDT,UAAU;YACVC,OAAO;gBACLC,aAAa;YACf;QACF;QACA;YACEJ,MAAM;YACNC,MAAM;YACNI,YAAYV;YACZW,SAAS;YACTH,OAAO;gBACL,kBAAkB;gBAClBI,aAAa;gBACbH,aAAa;YACf;QACF;QACA;YACEJ,MAAM;YACNC,MAAM;YACNI,YAAYV;YACZW,SAAS;YACTH,OAAO;gBACLI,aAAa;gBACbH,aAAa;YACf;QACF;KACD;IAED,oCAAoC;IACpC,MAAMN,SACJD,kBAAkB,OAAOA,mBAAmB,aACxCA,eAAe;QAAEE;IAAc,KAC/BA;IAEN;;;GAGC,GACD,MAAMa,aAA+B;QACnCC,MAAM;QACNC,YAAY;QACZ,GAAGrB,SAAS;QACZU,OAAO;YACLY,YAAY;YACZ,GAAGtB,WAAWU,KAAK;QACrB;QACAL;IACF;IAEA,OAAO;QAAE,GAAGc,UAAU;IAAC;AACzB,EAAC"}