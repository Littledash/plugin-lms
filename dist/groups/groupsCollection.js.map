{"version":3,"sources":["../../src/groups/groupsCollection.ts"],"sourcesContent":["import { CollectionConfig } from 'payload'\nimport { slugField } from '../fields/slug.js'\n// import { isAdminOrGroupLeader } from '../access/isAdminOrGroupLeader.js'\n// import { isMemberOfGroup } from '../access/isMemberOfGroup.js'\nimport { FieldsOverride } from '../types.js'\n\ntype Props = {\n  coursesCollectionSlug?: string\n  usersCollectionSlug?: string\n  couponsCollectionSlug?: string\n  // certificatesCollectionSlug?: string\n  overrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n}\n\nexport const groupsCollection: (props?: Props) => CollectionConfig = (props) => {\n  const {\n    overrides,\n    coursesCollectionSlug = 'courses',\n    usersCollectionSlug = 'users',\n    couponsCollectionSlug = 'coupons',\n    // certificatesCollectionSlug = 'certificates',\n  } = props || {}\n\n  const fieldsOverride = overrides?.fields\n\n  const defaultFields: CollectionConfig['fields'] = [\n    {\n      name: 'title',\n      type: 'text',\n      required: true,\n    },\n\n    {\n      name: 'description',\n      type: 'richText',\n    },\n    ...slugField(),\n    {\n      name: 'purchasedCourses',\n      type: 'array',\n      fields: [\n        {\n          name: 'seatManagement',\n          type: 'group',\n          required: true,\n          fields: [\n            {\n              name: 'seatsTotal',\n              type: 'number',\n              required: true,\n              defaultValue: 1,\n              admin: { description: 'Total seats purchased for this group' },\n            },\n            {\n              name: 'seatsUsed',\n              type: 'number',\n              defaultValue: 0,\n              admin: { readOnly: true },\n            },\n            {\n              name: 'course',\n              type: 'relationship',\n              relationTo: coursesCollectionSlug,\n              hasMany: false,\n              admin: { description: 'The course that is associated with the group' },\n            },\n            {\n              name: 'coupon',\n              type: 'relationship',\n              relationTo: couponsCollectionSlug,\n              admin: { description: 'The coupon that is associated with the group' },\n            }\n          ],\n        },\n      ],\n    },\n    {\n      name: 'students',\n      type: 'relationship',\n      relationTo: usersCollectionSlug,\n      hasMany: true,\n      admin: {\n        position: 'sidebar',\n        description: 'The users that are part of the group',\n        allowCreate: false,\n        allowEdit: false,\n      },\n    },\n \n    {\n      name: 'leaders',\n      type: 'relationship',\n      relationTo: usersCollectionSlug,\n      hasMany: true,\n      admin: {\n        position: 'sidebar',\n        description: 'The leaders of the group',\n        allowCreate: false,\n        allowEdit: false,\n      },\n      // filterOptions: ({ user }) => {\n      //   if (user && user.roles.includes('admin')) {\n      //     return {}\n      //   }\n      //   return {\n      //     roles: {\n      //       contains: ['instructor', 'leader'],\n      //     },\n      //   }\n      // },\n    },\n    // {\n    //   name: 'accessMode',\n    //   type: 'select',\n    //   options: [\n    //     { label: 'Free', value: 'free' },\n    //     { label: 'Buy Now', value: 'buy_now' },\n    //     { label: 'Recurring', value: 'recurring' },\n    //     { label: 'Closed', value: 'closed' },\n    //   ],\n    //   defaultValue: 'free',\n    //   admin: {\n    //     description: 'The access mode of the group',\n    //   },\n    // },\n    // {\n    //   name: 'price',\n    //   type: 'number',\n    //   required: true,\n    //   admin: {\n    //     condition: (_, siblingData) =>\n    //       siblingData.accessMode === 'buy_now' || siblingData.accessMode === 'recurring',\n    //   },\n    // },\n    // {\n    //   name: 'billingCycle',\n    //   type: 'group',\n    //   admin: {\n    //     condition: (_, siblingData) => siblingData.accessMode === 'recurring',\n    //   },\n    //   fields: [\n    //     {\n    //       name: 'interval',\n    //       type: 'select',\n    //       options: [\n    //         { label: 'Day', value: 'day' },\n    //         { label: 'Week', value: 'week' },\n    //         { label: 'Month', value: 'month' },\n    //         { label: 'Year', value: 'year' },\n    //       ],\n    //       required: true,\n    //     },\n    //     {\n    //       name: 'frequency',\n    //       type: 'number',\n    //       required: true,\n    //     },\n    //   ],\n    // },\n    // {\n    //   type: 'row',\n    //   fields: [\n    //     {\n    //       name: 'startDate',\n    //       type: 'date',\n    //       admin: {\n    //         date: {\n    //           pickerAppearance: 'dayOnly',\n    //         },\n    //         description: 'The start date of the group',\n    //         width: '50%',\n    //       },\n    \n    //     },\n    //     {\n    //       name: 'endDate',\n    //       type: 'date',\n    //       admin: {\n    //         date: {\n    //           pickerAppearance: 'dayOnly',\n    //         },\n    //         description: 'The end date of the group',\n    //         width: '50%',\n    //       },\n    //     },\n    //   ],\n    // },\n    // {\n    //   name: 'studentLimit',\n    //   type: 'number',\n    // },\n    // {\n    //   name: 'materials',\n    //   type: 'richText',\n    // },\n    // {\n    //   name: 'certificate',\n    //   type: 'relationship',\n    //   relationTo: certificatesCollectionSlug,\n    //   admin: {\n    //     allowCreate: false,\n    //     description: 'The certificate that is awarded to the students who complete the group',\n    //   },\n    // },\n    // {\n    //   name: 'contentVisibility',\n    //   type: 'select',\n    //   options: [\n    //     { label: 'Always visible', value: 'always' },\n    //     { label: 'Only visible to enrollees', value: 'enrolled' },\n    //   ],\n    //   defaultValue: 'always',\n    // },\n    // {\n    //   name: 'customPagination',\n    //   type: 'number',\n    //   defaultValue: 20,\n    // },\n    // {\n    //   name: 'order',\n    //   type: 'select',\n    //   options: [\n    //     { label: 'Date Ascending', value: 'date_asc' },\n    //     { label: 'Date Descending', value: 'date_desc' },\n    //     { label: 'Title Ascending', value: 'title_asc' },\n    //     { label: 'Title Descending', value: 'title_desc' },\n    //   ],\n    //   defaultValue: 'date_desc',\n    // },\n  ]\n\n  const fields =\n    fieldsOverride && typeof fieldsOverride === 'function'\n      ? fieldsOverride({ defaultFields })\n      : defaultFields\n\n  const baseConfig: CollectionConfig = {\n    slug: 'groups',\n    admin: {\n      useAsTitle: 'title',\n      // group: 'LMS',\n      ...overrides?.admin,\n    },\n    // hooks: {\n    //   afterChange: [\n    //     async ({ req, doc, previousDoc }) => {\n    //       const { payload } = req\n    //       const previousUsers = (previousDoc.users || []).map((user) => typeof user === 'string' ? user : user.id)\n    //       const currentUsers = (doc.users || []).map(user => typeof user === 'string' ? user : user.id)\n\n    //       const newUsers = currentUsers.filter(user => !previousUsers.includes(user))\n\n    //       if (newUsers.length > 0) {\n    //         const groupCourses = (doc.courses || []).map(course => typeof course === 'string' ? course : course.id)\n\n    //         if (groupCourses.length > 0) {\n    //           for (const courseId of groupCourses) {\n    //             const course = await payload.findByID({\n    //               collection: 'courses',\n    //               id: courseId,\n    //               depth: 0,\n    //             })\n\n    //             if (course) {\n    //               const existingStudents = (course.students || []).map(student => typeof student === 'string' ? student : student.id)\n    //               const allStudents = [...new Set([...existingStudents, ...newUsers])]\n\n    //               await payload.update({\n    //                 collection: 'courses',\n    //                 id: courseId,\n    //                 data: {\n    //                   students: allStudents,\n    //                 },\n    //               })\n    //             }\n    //           }\n    //         }\n    //       }\n    //     },\n    //   ],\n    // },\n    fields,\n  }\n\n  return { ...baseConfig }\n}\n"],"names":["slugField","groupsCollection","props","overrides","coursesCollectionSlug","usersCollectionSlug","couponsCollectionSlug","fieldsOverride","fields","defaultFields","name","type","required","defaultValue","admin","description","readOnly","relationTo","hasMany","position","allowCreate","allowEdit","baseConfig","slug","useAsTitle"],"mappings":"AACA,SAASA,SAAS,QAAQ,oBAAmB;AAa7C,OAAO,MAAMC,mBAAwD,CAACC;IACpE,MAAM,EACJC,SAAS,EACTC,wBAAwB,SAAS,EACjCC,sBAAsB,OAAO,EAC7BC,wBAAwB,SAAS,EAElC,GAAGJ,SAAS,CAAC;IAEd,MAAMK,iBAAiBJ,WAAWK;IAElC,MAAMC,gBAA4C;QAChD;YACEC,MAAM;YACNC,MAAM;YACNC,UAAU;QACZ;QAEA;YACEF,MAAM;YACNC,MAAM;QACR;WACGX;QACH;YACEU,MAAM;YACNC,MAAM;YACNH,QAAQ;gBACN;oBACEE,MAAM;oBACNC,MAAM;oBACNC,UAAU;oBACVJ,QAAQ;wBACN;4BACEE,MAAM;4BACNC,MAAM;4BACNC,UAAU;4BACVC,cAAc;4BACdC,OAAO;gCAAEC,aAAa;4BAAuC;wBAC/D;wBACA;4BACEL,MAAM;4BACNC,MAAM;4BACNE,cAAc;4BACdC,OAAO;gCAAEE,UAAU;4BAAK;wBAC1B;wBACA;4BACEN,MAAM;4BACNC,MAAM;4BACNM,YAAYb;4BACZc,SAAS;4BACTJ,OAAO;gCAAEC,aAAa;4BAA+C;wBACvE;wBACA;4BACEL,MAAM;4BACNC,MAAM;4BACNM,YAAYX;4BACZQ,OAAO;gCAAEC,aAAa;4BAA+C;wBACvE;qBACD;gBACH;aACD;QACH;QACA;YACEL,MAAM;YACNC,MAAM;YACNM,YAAYZ;YACZa,SAAS;YACTJ,OAAO;gBACLK,UAAU;gBACVJ,aAAa;gBACbK,aAAa;gBACbC,WAAW;YACb;QACF;QAEA;YACEX,MAAM;YACNC,MAAM;YACNM,YAAYZ;YACZa,SAAS;YACTJ,OAAO;gBACLK,UAAU;gBACVJ,aAAa;gBACbK,aAAa;gBACbC,WAAW;YACb;QAWF;KAuHD;IAED,MAAMb,SACJD,kBAAkB,OAAOA,mBAAmB,aACxCA,eAAe;QAAEE;IAAc,KAC/BA;IAEN,MAAMa,aAA+B;QACnCC,MAAM;QACNT,OAAO;YACLU,YAAY;YACZ,gBAAgB;YAChB,GAAGrB,WAAWW,KAAK;QACrB;QACA,WAAW;QACX,mBAAmB;QACnB,6CAA6C;QAC7C,gCAAgC;QAChC,iHAAiH;QACjH,sGAAsG;QAEtG,oFAAoF;QAEpF,mCAAmC;QACnC,kHAAkH;QAElH,yCAAyC;QACzC,mDAAmD;QACnD,sDAAsD;QACtD,uCAAuC;QACvC,8BAA8B;QAC9B,0BAA0B;QAC1B,iBAAiB;QAEjB,4BAA4B;QAC5B,oIAAoI;QACpI,qFAAqF;QAErF,uCAAuC;QACvC,yCAAyC;QACzC,gCAAgC;QAChC,0BAA0B;QAC1B,2CAA2C;QAC3C,qBAAqB;QACrB,mBAAmB;QACnB,gBAAgB;QAChB,cAAc;QACd,YAAY;QACZ,UAAU;QACV,SAAS;QACT,OAAO;QACP,KAAK;QACLN;IACF;IAEA,OAAO;QAAE,GAAGc,UAAU;IAAC;AACzB,EAAC"}