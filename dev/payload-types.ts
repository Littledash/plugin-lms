/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji'

export interface Config {
  auth: {
    users: UserAuthOperations
  }
  blocks: {}
  collections: {
    users: User
    posts: Post
    media: Media
    certificates: Certificate
    courses: Course
    lessons: Lesson
    topics: Topic
    quizzes: Quiz
    categories: Category
    tags: Tag
    questions: Question
    'payload-locked-documents': PayloadLockedDocument
    'payload-preferences': PayloadPreference
    'payload-migrations': PayloadMigration
  }
  collectionsJoins: {}
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>
    posts: PostsSelect<false> | PostsSelect<true>
    media: MediaSelect<false> | MediaSelect<true>
    certificates: CertificatesSelect<false> | CertificatesSelect<true>
    courses: CoursesSelect<false> | CoursesSelect<true>
    lessons: LessonsSelect<false> | LessonsSelect<true>
    topics: TopicsSelect<false> | TopicsSelect<true>
    quizzes: QuizzesSelect<false> | QuizzesSelect<true>
    categories: CategoriesSelect<false> | CategoriesSelect<true>
    tags: TagsSelect<false> | TagsSelect<true>
    questions: QuestionsSelect<false> | QuestionsSelect<true>
    'payload-locked-documents':
      | PayloadLockedDocumentsSelect<false>
      | PayloadLockedDocumentsSelect<true>
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>
  }
  db: {
    defaultIDType: string
  }
  globals: {}
  globalsSelect: {}
  locale: null
  user: User & {
    collection: 'users'
  }
  jobs: {
    tasks: unknown
    workflows: unknown
  }
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string
    password: string
  }
  login: {
    email: string
    password: string
  }
  registerFirstUser: {
    email: string
    password: string
  }
  unlock: {
    email: string
    password: string
  }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string
  name?: string | null
  roles: ('admin' | 'public' | 'author' | 'student' | 'contributor' | 'editor' | 'subscriber')[]
  firstName: string
  lastName: string
  fullName?: string | null
  enrolledCourses?: (string | Course)[] | null
  completedCourses?: (string | Course)[] | null
  coursesProgress?:
    | {
        course: string | Course
        completed?: boolean | null
        completedAt?: string | null
        completedLessons?:
          | {
              lesson: string | Lesson
              completedAt: string
              id?: string | null
            }[]
          | null
        completedQuizzes?:
          | {
              quiz: string | Quiz
              score: number
              completedAt: string
              id?: string | null
            }[]
          | null
        id?: string | null
      }[]
    | null
  billingAddress?: BillingAddress
  shippingAddress?: ShippingAddress
  /**
   * The certificates the student has earned
   */
  certificates?: (string | Certificate)[] | null
  updatedAt: string
  createdAt: string
  email: string
  resetPasswordToken?: string | null
  resetPasswordExpiration?: string | null
  salt?: string | null
  hash?: string | null
  loginAttempts?: number | null
  lockUntil?: string | null
  sessions?:
    | {
        id: string
        createdAt?: string | null
        expiresAt: string
      }[]
    | null
  password?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: string
  /**
   * The title of the course
   */
  title: string
  /**
   * The excerpt of the course
   */
  excerpt?: string | null
  /**
   * The description of the course
   */
  description: {
    root: {
      type: string
      children: {
        type: string
        version: number
        [k: string]: unknown
      }[]
      direction: ('ltr' | 'rtl') | null
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
      indent: number
      version: number
    }
    [k: string]: unknown
  }
  /**
   * The lessons that are part of the course
   */
  lessons?: (string | Lesson)[] | null
  /**
   * The featured image of the course
   */
  featuredImage?: (string | null) | Media
  enrollment: {
    /**
     * Controls how students gain access to the course
     */
    accessMode: 'open' | 'free' | 'buy now' | 'recurring' | 'closed'
    /**
     * The price points for this item
     */
    prices?:
      | {
          amount?: number | null
          currency?: 'AUD' | null
          id?: string | null
        }[]
      | null
    /**
     * The URL for the enrollment page
     */
    enrollmentUrl?: string | null
  }
  courseSettings?: {
    /**
     * The materials that are part of the course
     */
    courseMaterials?: {
      root: {
        type: string
        children: {
          type: string
          version: number
          [k: string]: unknown
        }[]
        direction: ('ltr' | 'rtl') | null
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
        indent: number
        version: number
      }
      [k: string]: unknown
    } | null
    /**
     * The number of days after which the access to the course will expire
     */
    accessExpirationDays?: number | null
    /**
     * The duration of the course
     */
    duration?: {
      /**
       * The number of hours in the course
       */
      hours?: number | null
      /**
       * The number of minutes in the course
       */
      minutes?: number | null
    }
  }
  accessSettings?: {
    /**
     * Courses that a student must complete before enrolling in this course.
     */
    prerequisiteCourses?: (string | Course)[] | null
    /**
     * The points that are required to access this course
     */
    requiredPoints?: number | null
    /**
     * The number of students that can enroll in the course
     */
    studentLimit?: number | null
  }
  awards?: {
    /**
     * The certificate that is awarded to the students who complete the course
     */
    certificate?: (string | null) | Certificate
    /**
     * The points that are awarded to the students who complete the course
     */
    coursePoints?: number | null
  }
  navigation: {
    /**
     * Controls how students interact with the content and their navigational experience
     */
    navigationMode: 'linear' | 'free'
  }
  courseStudents?: {
    /**
     * The students enrolled in the course
     */
    students?: (string | User)[] | null
  }
  /**
   * The authors of the course
   */
  authors?: (string | User)[] | null
  /**
   * The categories that are part of the course
   */
  categories?: (string | Category)[] | null
  /**
   * The tags that are part of the course
   */
  tags?: (string | Tag)[] | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: string
  /**
   * The title of the lesson
   */
  title: string
  /**
   * The excerpt of the lesson
   */
  excerpt?: string | null
  /**
   * The content of the lesson
   */
  content?: {
    root: {
      type: string
      children: {
        type: string
        version: number
        [k: string]: unknown
      }[]
      direction: ('ltr' | 'rtl') | null
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
      indent: number
      version: number
    }
    [k: string]: unknown
  } | null
  /**
   * The authors of the lesson
   */
  authors?: (string | User)[] | null
  /**
   * The featured image of the lesson
   */
  featuredImage?: (string | null) | Media
  lessonSettings?: {
    /**
     * The materials of the lesson
     */
    lessonMaterials?: {
      root: {
        type: string
        children: {
          type: string
          version: number
          [k: string]: unknown
        }[]
        direction: ('ltr' | 'rtl') | null
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
        indent: number
        version: number
      }
      [k: string]: unknown
    } | null
    lessonVideo?: EmbeddedVideo
    videoProgression?: VideoProgression
  }
  accessSettings?: {
    /**
     * The progression behavior of the lesson
     */
    lessonReleaseSchedule?: ('immediately' | 'enrollment' | 'specificDate') | null
    /**
     * The number of days after enrollment the lesson will be released
     */
    lessonRelaseDays?: number | null
    /**
     * The date the lesson will be released
     */
    lessonReleaseDate?: string | null
  }
  /**
   * The categories that the lesson belongs to
   */
  categories?: (string | null) | Category
  /**
   * The course that the lesson belongs to
   */
  course?: (string | null) | Course
  /**
   * The quizzes that are part of the lesson
   */
  quizzes?: (string | Quiz)[] | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string
  updatedAt: string
  createdAt: string
  url?: string | null
  thumbnailURL?: string | null
  filename?: string | null
  mimeType?: string | null
  filesize?: number | null
  width?: number | null
  height?: number | null
  focalX?: number | null
  focalY?: number | null
}
/**
 * The video content for this topic
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EmbeddedVideo".
 */
export interface EmbeddedVideo {
  /**
   * Embeds a Vimeo iframe.
   */
  embed?: boolean | null
  /**
   * Maximum upload file size: 4MB. Recommended file size for images is <500KB.
   */
  poster?: (string | null) | Media
  platform?: ('vimeo' | 'internal' | 'youtube') | null
  videoURL?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoProgression".
 */
export interface VideoProgression {
  /**
   * Before completed sub-steps: The video will be shown and must be fully watched before the user can access the lesson’s associated steps | After completed sub-steps:  The video will be visible after the user has completed the lesson’s associated steps. The full video must be watched in order to complete the lesson.
   */
  displayTiming: 'before' | 'after'
  /**
   * If checked, the video will start automatically when the lesson is opened
   */
  autoStart?: boolean | null
  /**
   * If checked, the video will have controls
   */
  videoControls?: boolean | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string
  /**
   * The title of the category
   */
  title: string
  slug?: string | null
  slugLock?: boolean | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quizzes".
 */
export interface Quiz {
  id: string
  /**
   * The title of the quiz
   */
  title: string
  /**
   * The excerpt of the quiz
   */
  excerpt?: string | null
  /**
   * The description of the quiz
   */
  description: {
    root: {
      type: string
      children: {
        type: string
        version: number
        [k: string]: unknown
      }[]
      direction: ('ltr' | 'rtl') | null
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
      indent: number
      version: number
    }
    [k: string]: unknown
  }
  /**
   * The featured image of the quiz
   */
  featuredImage?: (string | null) | Media
  /**
   * The questions in this quiz
   */
  questions: (string | Question)[]
  authors?: (string | User)[] | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions".
 */
export interface Question {
  id: string
  /**
   * The title of the question
   */
  title: string
  /**
   * Points awarded for correct answer
   */
  points: number
  questionType:
    | 'multipleChoice'
    | 'trueFalse'
    | 'sorting'
    | 'fillInBlank'
    | 'assessment'
    | 'essay'
    | 'freeChoice'
    | 'singleChoice'
  question: string
  choices?:
    | {
        label: string
        isCorrect?: boolean | null
        order?: number | null
        id?: string | null
      }[]
    | null
  correctAnswer?: ('true' | 'false') | null
  correctAnswers?:
    | {
        answer: string
        id?: string | null
      }[]
    | null
  assessmentCriteria?:
    | {
        criterion: string
        points: number
        id?: string | null
      }[]
    | null
  maxLength?: number | null
  /**
   * The authors of the question
   */
  authors?: (string | User)[] | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certificates".
 */
export interface Certificate {
  id: string
  /**
   * The title of the certificate
   */
  title: string
  /**
   * The description of the certificate
   */
  description?: {
    root: {
      type: string
      children: {
        type: string
        version: number
        [k: string]: unknown
      }[]
      direction: ('ltr' | 'rtl') | null
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
      indent: number
      version: number
    }
    [k: string]: unknown
  } | null
  /**
   * The certificate template image
   */
  template: string | Media
  /**
   * The courses this certificate is for
   */
  courses?: (string | Course)[] | null
  /**
   * The date the certificate expires (if applicable)
   */
  expiryDate?: string | null
  /**
   * The status of the certificate
   */
  status: 'active' | 'expired' | 'revoked'
  /**
   * The authors of the certificate
   */
  authors?: (string | User)[] | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string
  /**
   * The title of the tag
   */
  title: string
  slug?: string | null
  slugLock?: boolean | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BillingAddress".
 */
export interface BillingAddress {
  firstName?: string | null
  lastName?: string | null
  company?: string | null
  addressLineOne?: string | null
  addressLineTwo?: string | null
  city?: string | null
  state?: string | null
  postcode?: string | null
  country?:
    | (
        | 'AF'
        | 'AX'
        | 'AL'
        | 'DZ'
        | 'AS'
        | 'AD'
        | 'AO'
        | 'AI'
        | 'AQ'
        | 'AG'
        | 'AR'
        | 'AM'
        | 'AW'
        | 'AU'
        | 'AT'
        | 'AZ'
        | 'BS'
        | 'BH'
        | 'BD'
        | 'BB'
        | 'BY'
        | 'BE'
        | 'BZ'
        | 'BJ'
        | 'BM'
        | 'BT'
        | 'BO'
        | 'BA'
        | 'BW'
        | 'BV'
        | 'BR'
        | 'IO'
        | 'BN'
        | 'BG'
        | 'BF'
        | 'BI'
        | 'KH'
        | 'CM'
        | 'CA'
        | 'CV'
        | 'KY'
        | 'CF'
        | 'TD'
        | 'CL'
        | 'CN'
        | 'CX'
        | 'CC'
        | 'CO'
        | 'KM'
        | 'CG'
        | 'CD'
        | 'CK'
        | 'CR'
        | 'CI'
        | 'HR'
        | 'CU'
        | 'CY'
        | 'CZ'
        | 'DK'
        | 'DJ'
        | 'DM'
        | 'DO'
        | 'EC'
        | 'EG'
        | 'SV'
        | 'GQ'
        | 'ER'
        | 'EE'
        | 'ET'
        | 'FK'
        | 'FO'
        | 'FJ'
        | 'FI'
        | 'FR'
        | 'GF'
        | 'PF'
        | 'TF'
        | 'GA'
        | 'GM'
        | 'GE'
        | 'DE'
        | 'GH'
        | 'GI'
        | 'GR'
        | 'GL'
        | 'GD'
        | 'GP'
        | 'GU'
        | 'GT'
        | 'GG'
        | 'GN'
        | 'GW'
        | 'GY'
        | 'HT'
        | 'HM'
        | 'VA'
        | 'HN'
        | 'HK'
        | 'HU'
        | 'IS'
        | 'IN'
        | 'ID'
        | 'IR'
        | 'IQ'
        | 'IE'
        | 'IM'
        | 'IL'
        | 'IT'
        | 'JM'
        | 'JP'
        | 'JE'
        | 'JO'
        | 'KZ'
        | 'KE'
        | 'KI'
        | 'KP'
        | 'KR'
        | 'XK'
        | 'KW'
        | 'KG'
        | 'LA'
        | 'LV'
        | 'LB'
        | 'LS'
        | 'LR'
        | 'LY'
        | 'LI'
        | 'LT'
        | 'LU'
        | 'MO'
        | 'MK'
        | 'MG'
        | 'MW'
        | 'MY'
        | 'MV'
        | 'ML'
        | 'MT'
        | 'MH'
        | 'MQ'
        | 'MR'
        | 'MU'
        | 'YT'
        | 'MX'
        | 'FM'
        | 'MD'
        | 'MC'
        | 'MN'
        | 'ME'
        | 'MS'
        | 'MA'
        | 'MZ'
        | 'MM'
        | 'NA'
        | 'NR'
        | 'NP'
        | 'NL'
        | 'AN'
        | 'NC'
        | 'NZ'
        | 'NI'
        | 'NE'
        | 'NG'
        | 'NU'
        | 'NF'
        | 'MP'
        | 'NO'
        | 'OM'
        | 'PK'
        | 'PW'
        | 'PS'
        | 'PA'
        | 'PG'
        | 'PY'
        | 'PE'
        | 'PH'
        | 'PN'
        | 'PL'
        | 'PT'
        | 'PR'
        | 'QA'
        | 'RE'
        | 'RO'
        | 'RU'
        | 'RW'
        | 'SH'
        | 'KN'
        | 'LC'
        | 'PM'
        | 'VC'
        | 'WS'
        | 'SM'
        | 'ST'
        | 'SA'
        | 'SN'
        | 'RS'
        | 'SC'
        | 'SL'
        | 'SG'
        | 'SK'
        | 'SI'
        | 'SB'
        | 'SO'
        | 'ZA'
        | 'GS'
        | 'ES'
        | 'LK'
        | 'SD'
        | 'SR'
        | 'SJ'
        | 'SZ'
        | 'SE'
        | 'CH'
        | 'SY'
        | 'TW'
        | 'TJ'
        | 'TZ'
        | 'TH'
        | 'TL'
        | 'TG'
        | 'TK'
        | 'TO'
        | 'TT'
        | 'TN'
        | 'TR'
        | 'TM'
        | 'TC'
        | 'TV'
        | 'UG'
        | 'UA'
        | 'AE'
        | 'GB'
        | 'US'
        | 'UM'
        | 'UY'
        | 'UZ'
        | 'VU'
        | 'VE'
        | 'VN'
        | 'VG'
        | 'VI'
        | 'WF'
        | 'EH'
        | 'YE'
        | 'ZM'
        | 'ZW'
      )
    | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ShippingAddress".
 */
export interface ShippingAddress {
  firstName?: string | null
  lastName?: string | null
  company?: string | null
  addressLineOne?: string | null
  addressLineTwo?: string | null
  city?: string | null
  state?: string | null
  postcode?: string | null
  country?:
    | (
        | 'AF'
        | 'AX'
        | 'AL'
        | 'DZ'
        | 'AS'
        | 'AD'
        | 'AO'
        | 'AI'
        | 'AQ'
        | 'AG'
        | 'AR'
        | 'AM'
        | 'AW'
        | 'AU'
        | 'AT'
        | 'AZ'
        | 'BS'
        | 'BH'
        | 'BD'
        | 'BB'
        | 'BY'
        | 'BE'
        | 'BZ'
        | 'BJ'
        | 'BM'
        | 'BT'
        | 'BO'
        | 'BA'
        | 'BW'
        | 'BV'
        | 'BR'
        | 'IO'
        | 'BN'
        | 'BG'
        | 'BF'
        | 'BI'
        | 'KH'
        | 'CM'
        | 'CA'
        | 'CV'
        | 'KY'
        | 'CF'
        | 'TD'
        | 'CL'
        | 'CN'
        | 'CX'
        | 'CC'
        | 'CO'
        | 'KM'
        | 'CG'
        | 'CD'
        | 'CK'
        | 'CR'
        | 'CI'
        | 'HR'
        | 'CU'
        | 'CY'
        | 'CZ'
        | 'DK'
        | 'DJ'
        | 'DM'
        | 'DO'
        | 'EC'
        | 'EG'
        | 'SV'
        | 'GQ'
        | 'ER'
        | 'EE'
        | 'ET'
        | 'FK'
        | 'FO'
        | 'FJ'
        | 'FI'
        | 'FR'
        | 'GF'
        | 'PF'
        | 'TF'
        | 'GA'
        | 'GM'
        | 'GE'
        | 'DE'
        | 'GH'
        | 'GI'
        | 'GR'
        | 'GL'
        | 'GD'
        | 'GP'
        | 'GU'
        | 'GT'
        | 'GG'
        | 'GN'
        | 'GW'
        | 'GY'
        | 'HT'
        | 'HM'
        | 'VA'
        | 'HN'
        | 'HK'
        | 'HU'
        | 'IS'
        | 'IN'
        | 'ID'
        | 'IR'
        | 'IQ'
        | 'IE'
        | 'IM'
        | 'IL'
        | 'IT'
        | 'JM'
        | 'JP'
        | 'JE'
        | 'JO'
        | 'KZ'
        | 'KE'
        | 'KI'
        | 'KP'
        | 'KR'
        | 'XK'
        | 'KW'
        | 'KG'
        | 'LA'
        | 'LV'
        | 'LB'
        | 'LS'
        | 'LR'
        | 'LY'
        | 'LI'
        | 'LT'
        | 'LU'
        | 'MO'
        | 'MK'
        | 'MG'
        | 'MW'
        | 'MY'
        | 'MV'
        | 'ML'
        | 'MT'
        | 'MH'
        | 'MQ'
        | 'MR'
        | 'MU'
        | 'YT'
        | 'MX'
        | 'FM'
        | 'MD'
        | 'MC'
        | 'MN'
        | 'ME'
        | 'MS'
        | 'MA'
        | 'MZ'
        | 'MM'
        | 'NA'
        | 'NR'
        | 'NP'
        | 'NL'
        | 'AN'
        | 'NC'
        | 'NZ'
        | 'NI'
        | 'NE'
        | 'NG'
        | 'NU'
        | 'NF'
        | 'MP'
        | 'NO'
        | 'OM'
        | 'PK'
        | 'PW'
        | 'PS'
        | 'PA'
        | 'PG'
        | 'PY'
        | 'PE'
        | 'PH'
        | 'PN'
        | 'PL'
        | 'PT'
        | 'PR'
        | 'QA'
        | 'RE'
        | 'RO'
        | 'RU'
        | 'RW'
        | 'SH'
        | 'KN'
        | 'LC'
        | 'PM'
        | 'VC'
        | 'WS'
        | 'SM'
        | 'ST'
        | 'SA'
        | 'SN'
        | 'RS'
        | 'SC'
        | 'SL'
        | 'SG'
        | 'SK'
        | 'SI'
        | 'SB'
        | 'SO'
        | 'ZA'
        | 'GS'
        | 'ES'
        | 'LK'
        | 'SD'
        | 'SR'
        | 'SJ'
        | 'SZ'
        | 'SE'
        | 'CH'
        | 'SY'
        | 'TW'
        | 'TJ'
        | 'TZ'
        | 'TH'
        | 'TL'
        | 'TG'
        | 'TK'
        | 'TO'
        | 'TT'
        | 'TN'
        | 'TR'
        | 'TM'
        | 'TC'
        | 'TV'
        | 'UG'
        | 'UA'
        | 'AE'
        | 'GB'
        | 'US'
        | 'UM'
        | 'UY'
        | 'UZ'
        | 'VU'
        | 'VE'
        | 'VN'
        | 'VG'
        | 'VI'
        | 'WF'
        | 'EH'
        | 'YE'
        | 'ZM'
        | 'ZW'
      )
    | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics".
 */
export interface Topic {
  id: string
  /**
   * The title of the topic
   */
  title: string
  /**
   * The excerpt of the topic
   */
  excerpt?: string | null
  /**
   * The content of the topic
   */
  content?: {
    root: {
      type: string
      children: {
        type: string
        version: number
        [k: string]: unknown
      }[]
      direction: ('ltr' | 'rtl') | null
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
      indent: number
      version: number
    }
    [k: string]: unknown
  } | null
  /**
   * The featured image of the topic
   */
  featuredImage?: (string | null) | Media
  topicVideo?: EmbeddedVideo
  videoProgression?: VideoProgression
  /**
   * Additional materials and resources for the topic
   */
  topicMaterials?: {
    root: {
      type: string
      children: {
        type: string
        version: number
        [k: string]: unknown
      }[]
      direction: ('ltr' | 'rtl') | null
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
      indent: number
      version: number
    }
    [k: string]: unknown
  } | null
  /**
   * The course that the topic is associated with
   */
  course?: (string | null) | Course
  /**
   * The lesson that the topic is associated with
   */
  lesson?: (string | null) | Lesson
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string
  document?:
    | ({
        relationTo: 'users'
        value: string | User
      } | null)
    | ({
        relationTo: 'posts'
        value: string | Post
      } | null)
    | ({
        relationTo: 'media'
        value: string | Media
      } | null)
    | ({
        relationTo: 'certificates'
        value: string | Certificate
      } | null)
    | ({
        relationTo: 'courses'
        value: string | Course
      } | null)
    | ({
        relationTo: 'lessons'
        value: string | Lesson
      } | null)
    | ({
        relationTo: 'topics'
        value: string | Topic
      } | null)
    | ({
        relationTo: 'quizzes'
        value: string | Quiz
      } | null)
    | ({
        relationTo: 'categories'
        value: string | Category
      } | null)
    | ({
        relationTo: 'tags'
        value: string | Tag
      } | null)
    | ({
        relationTo: 'questions'
        value: string | Question
      } | null)
  globalSlug?: string | null
  user: {
    relationTo: 'users'
    value: string | User
  }
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string
  user: {
    relationTo: 'users'
    value: string | User
  }
  key?: string | null
  value?:
    | {
        [k: string]: unknown
      }
    | unknown[]
    | string
    | number
    | boolean
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string
  name?: string | null
  batch?: number | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T
  roles?: T
  firstName?: T
  lastName?: T
  fullName?: T
  enrolledCourses?: T
  completedCourses?: T
  coursesProgress?:
    | T
    | {
        course?: T
        completed?: T
        completedAt?: T
        completedLessons?:
          | T
          | {
              lesson?: T
              completedAt?: T
              id?: T
            }
        completedQuizzes?:
          | T
          | {
              quiz?: T
              score?: T
              completedAt?: T
              id?: T
            }
        id?: T
      }
  billingAddress?: T | BillingAddressSelect<T>
  shippingAddress?: T | ShippingAddressSelect<T>
  certificates?: T
  updatedAt?: T
  createdAt?: T
  email?: T
  resetPasswordToken?: T
  resetPasswordExpiration?: T
  salt?: T
  hash?: T
  loginAttempts?: T
  lockUntil?: T
  sessions?:
    | T
    | {
        id?: T
        createdAt?: T
        expiresAt?: T
      }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BillingAddress_select".
 */
export interface BillingAddressSelect<T extends boolean = true> {
  firstName?: T
  lastName?: T
  company?: T
  addressLineOne?: T
  addressLineTwo?: T
  city?: T
  state?: T
  postcode?: T
  country?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ShippingAddress_select".
 */
export interface ShippingAddressSelect<T extends boolean = true> {
  firstName?: T
  lastName?: T
  company?: T
  addressLineOne?: T
  addressLineTwo?: T
  city?: T
  state?: T
  postcode?: T
  country?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  updatedAt?: T
  createdAt?: T
  url?: T
  thumbnailURL?: T
  filename?: T
  mimeType?: T
  filesize?: T
  width?: T
  height?: T
  focalX?: T
  focalY?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certificates_select".
 */
export interface CertificatesSelect<T extends boolean = true> {
  title?: T
  description?: T
  template?: T
  courses?: T
  expiryDate?: T
  status?: T
  authors?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T
  excerpt?: T
  description?: T
  lessons?: T
  featuredImage?: T
  enrollment?:
    | T
    | {
        accessMode?: T
        prices?:
          | T
          | {
              amount?: T
              currency?: T
              id?: T
            }
        enrollmentUrl?: T
      }
  courseSettings?:
    | T
    | {
        courseMaterials?: T
        accessExpirationDays?: T
        duration?:
          | T
          | {
              hours?: T
              minutes?: T
            }
      }
  accessSettings?:
    | T
    | {
        prerequisiteCourses?: T
        requiredPoints?: T
        studentLimit?: T
      }
  awards?:
    | T
    | {
        certificate?: T
        coursePoints?: T
      }
  navigation?:
    | T
    | {
        navigationMode?: T
      }
  courseStudents?:
    | T
    | {
        students?: T
      }
  authors?: T
  categories?: T
  tags?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  title?: T
  excerpt?: T
  content?: T
  authors?: T
  featuredImage?: T
  lessonSettings?:
    | T
    | {
        lessonMaterials?: T
        lessonVideo?: T | EmbeddedVideoSelect<T>
        videoProgression?: T | VideoProgressionSelect<T>
      }
  accessSettings?:
    | T
    | {
        lessonReleaseSchedule?: T
        lessonRelaseDays?: T
        lessonReleaseDate?: T
      }
  categories?: T
  course?: T
  quizzes?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EmbeddedVideo_select".
 */
export interface EmbeddedVideoSelect<T extends boolean = true> {
  embed?: T
  poster?: T
  platform?: T
  videoURL?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoProgression_select".
 */
export interface VideoProgressionSelect<T extends boolean = true> {
  displayTiming?: T
  autoStart?: T
  videoControls?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics_select".
 */
export interface TopicsSelect<T extends boolean = true> {
  title?: T
  excerpt?: T
  content?: T
  featuredImage?: T
  topicVideo?: T | EmbeddedVideoSelect<T>
  videoProgression?: T | VideoProgressionSelect<T>
  topicMaterials?: T
  course?: T
  lesson?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quizzes_select".
 */
export interface QuizzesSelect<T extends boolean = true> {
  title?: T
  excerpt?: T
  description?: T
  featuredImage?: T
  questions?: T
  authors?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T
  slug?: T
  slugLock?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  title?: T
  slug?: T
  slugLock?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions_select".
 */
export interface QuestionsSelect<T extends boolean = true> {
  title?: T
  points?: T
  questionType?: T
  question?: T
  choices?:
    | T
    | {
        label?: T
        isCorrect?: T
        order?: T
        id?: T
      }
  correctAnswer?: T
  correctAnswers?:
    | T
    | {
        answer?: T
        id?: T
      }
  assessmentCriteria?:
    | T
    | {
        criterion?: T
        points?: T
        id?: T
      }
  maxLength?: T
  authors?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T
  globalSlug?: T
  user?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T
  key?: T
  value?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T
  batch?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown
}

declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
